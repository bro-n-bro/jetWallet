{"version":3,"file":"js/264.fa8b78cf.js","mappings":"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","sources":["webpack://cosmos-telegram-signer/./src/components/modal/AuthErrorModal.vue","webpack://cosmos-telegram-signer/./src/components/modal/AuthErrorModal.vue?a22f","webpack://cosmos-telegram-signer/./src/views/AuthPage.vue","webpack://cosmos-telegram-signer/./src/views/AuthPage.vue?a80b"],"sourcesContent":["<template>\n    <section class=\"modal\">\n        <div class=\"modal_content\">\n            <div class=\"data\">\n                <router-link to=\"/\" class=\"close_btn\">\n                    <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_close\"></use></svg>\n                </router-link>\n\n                <div class=\"modal_title\">\n                    {{ $t('message.auth_error_title') }}\n                </div>\n\n                <div class=\"modal_desc\">\n                    {{ $t('message.auth_error_desc') }}\n                </div>\n\n                <div class=\"btns\">\n                    <router-link to=\"/import_wallet\" class=\"btn\">\n                        <span>{{ $t('message.btn_import_existing_wallet') }}</span>\n                    </router-link>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"overlay\"></div>\n    </section>\n</template>\n\n\n<script setup>\n    import { onBeforeMount, ref } from 'vue'\n    import { clearData } from '@/utils/db'\n\n    // Components\n    import Loader from '@/components/Loader.vue'\n\n\n    const loading = ref(true)\n\n\n    onBeforeMount(async () => {\n        // Clear data\n        await clearData('wallet')\n\n        // Hide loader\n        loading.value = false\n    })\n</script>","import script from \"./AuthErrorModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AuthErrorModal.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <section class=\"page_container careate_pin_page\">\n        <div class=\"cont\">\n            <div class=\"page_title\">\n                {{ $t('message.auth_title') }}\n            </div>\n\n            <div class=\"page_data_wrap\">\n                <div class=\"page_data\">\n                    <Loader v-if=\"loading\" />\n\n                    <div class=\"pin\" :class=\"{ show: !loading }\">\n                        <div class=\"label\">\n                            {{ $t('message.create_pin_create_pin_label') }}\n                        </div>\n\n                        <div class=\"row\" :class=\"{ error: wrongPin }\">\n                            <div class=\"field\">\n                                <input type=\"password\" class=\"input big\" v-model=\"pinCode[0]\" maxlength=\"1\" inputmode=\"numeric\" ref=\"inputRef\"\n                                    :class=\"{ active: pinCode[0].length }\"\n                                    @input=\"moveFocus($event, 1)\"\n                                    @keydown.backspace=\"moveBack($event, 0)\">\n                            </div>\n\n                            <div class=\"field\">\n                                <input type=\"password\" class=\"input big\" v-model=\"pinCode[1]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[0].length\"\n                                    :class=\"{ active: pinCode[1].length }\"\n                                    @input=\"moveFocus($event, 2)\"\n                                    @keydown.backspace=\"moveBack($event, 1)\">\n                            </div>\n\n                            <div class=\"field\">\n                                <input type=\"password\" class=\"input big\" v-model=\"pinCode[2]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[1].length\"\n                                    :class=\"{ active: pinCode[2].length }\"\n                                    @input=\"moveFocus($event, 3)\"\n                                    @keydown.backspace=\"moveBack($event, 2)\">\n                            </div>\n\n                            <div class=\"field\">\n                                <input type=\"password\" class=\"input big\" v-model=\"pinCode[3]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[2].length\"\n                                    :class=\"{ active: pinCode[3].length }\"\n                                    @input=\"moveFocus($event, 4)\"\n                                    @keydown.backspace=\"moveBack($event, 3)\">\n                            </div>\n\n                            <div class=\"field\">\n                                <input type=\"password\" class=\"input big\" v-model=\"pinCode[4]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[3].length\"\n                                    :class=\"{ active: pinCode[4].length }\"\n                                    @input=\"moveFocus($event, 5)\"\n                                    @keydown.backspace=\"moveBack($event, 4)\">\n                            </div>\n\n                            <div class=\"field\">\n                                <input type=\"password\" class=\"input big\" v-model=\"pinCode[5]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[4].length\"\n                                    :class=\"{ active: pinCode[5].length }\"\n                                    @input=\"moveFocus($event, 6)\"\n                                    @keydown.backspace=\"moveBack($event, 5)\">\n                            </div>\n                        </div>\n\n\n                        <div class=\"warning\" v-if=\"authErrorLimit < 4\">\n                            {{ $t('message.auth_error_warning', { count: authErrorLimit }) }}\n                        </div>\n                    </div>\n\n                    <button class=\"biometric_btn\" @click.prevent=\"checkBiometricAccess\" v-if=\"isBiometricAvailable && authErrorLimit == 4\" :class=\"{ show: !loading }\">\n                        <span>{{ $t('message.btn_biometric2') }}</span>\n\n                        <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_biometric\"></use></svg>\n                    </button>\n\n                    <div class=\"btns\" :class=\"{ show: !loading }\">\n                        <button class=\"btn\" :class=\"{ disabled: !isFormValid }\" @click.prevent=\"login()\" v-if=\"authErrorLimit < 4\">\n                            <span>{{ $t('message.btn_next') }}</span>\n                        </button>\n                    </div>\n\n                    <button @click.prevent=\"deleteAll\" style=\"padding: 10px; margin-top: 10px;\">Удалить всё</button>\n                </div>\n            </div>\n        </div>\n    </section>\n\n\n    <AuthErrorModal v-if=\"showErrorAuthModal\" />\n</template>\n\n\n<script setup>\n    import { onBeforeMount, ref, watch, onMounted, computed } from 'vue'\n    import { useRouter } from 'vue-router'\n    import { hashDataWithKey } from '@/utils'\n    import { getData, addData, clearData } from '@/utils/db'\n    import { useGlobalState } from '@/store'\n\n    // Components\n    import Loader from '@/components/Loader.vue'\n    import AuthErrorModal from '@/components/modal/AuthErrorModal.vue'\n\n\n    const router = useRouter(),\n        loading = ref(true),\n        pinCode = ref(['', '', '', '', '', '']),\n        pinDB = ref(''),\n        hmacKey = ref(''),\n        wrongPin = ref(false),\n        authErrorLimit = ref(false),\n        isBiometric = ref(false),\n        isBiometricAvailable = ref(false),\n        { isAuthorized } = useGlobalState(),\n        showErrorAuthModal = ref(false),\n        inputRef = ref(null)\n\n\n    onBeforeMount(async () => {\n        // Get pin from DB\n        pinDB.value = await getData('wallet', 'pin')\n\n        // Get hmacKey from DB\n        hmacKey.value = await getData('wallet', 'hmacKey')\n\n        // Auth error limit\n        authErrorLimit.value = await getData('wallet', 'authErrorLimit')\n\n        // Is biometric available\n        isBiometricAvailable.value = Telegram.WebApp.BiometricManager.isBiometricAvailable\n\n        // Hide loader\n        loading.value = false\n\n        // Biometric status\n        if (isBiometricAvailable.value) {\n            isBiometric.value = await getData('wallet', 'isBiometric')\n\n            if (isBiometric.value) {\n                // Check biometric access\n                checkBiometricAccess()\n            }\n        }\n    })\n\n\n    onMounted(async () => {\n        // Biometric status\n        // if (isBiometricAvailable.value) {\n        //     isBiometric.value = await getData('wallet', 'isBiometric')\n\n        //     if (isBiometric.value) {\n        //         // Check biometric access\n        //         checkBiometricAccess()\n        //     }\n        // }\n\n\n        // Focus on first input\n        // if (!isBiometricAvailable.value && !isBiometric.value && inputRef.value) {\n        //     inputRef.value.focus()\n        // }\n    })\n\n\n    watch(pinCode.value, () => {\n        // Reset focus\n        if (pinCode.value[5].length) {\n            document.activeElement.blur()\n        }\n\n        // Compare pins\n        if (pinCode.value[5].length && authErrorLimit.value === 4) {\n            login()\n        }\n    })\n\n\n    // Move focus\n    function moveFocus(event, nextIndex) {\n        if (event.target.value.length >= 1 && nextIndex < 6) {\n            event.target.closest('.row').querySelector(`.field:nth-child(${nextIndex + 1}) input`).focus()\n        }\n    }\n\n\n    // Move back\n    function moveBack(event, currentIndex) {\n        setTimeout(() => {\n            if (event.target.value.length === 0 && currentIndex > 0) {\n                event.target.closest('.row').querySelector(`.field:nth-child(${currentIndex}) input`).select()\n            }\n        })\n    }\n\n\n    // Check biometric access\n    function checkBiometricAccess() {\n        !Telegram.WebApp.isAccessGranted\n            ? Telegram.WebApp.BiometricManager.requestAccess({ reason: 'Наш текст' }, () => biometricAuthenticate())\n            : biometricAuthenticate()\n    }\n\n\n    // Biometric authenticate\n    function biometricAuthenticate() {\n        Telegram.WebApp.BiometricManager.authenticate({ reason: 'Наш текст' }, res => {\n            if (res) {\n                // Auth\n                auth(res)\n            }\n        })\n    }\n\n\n    // Validate form\n    const isFormValid = computed(() => pinCode.value[5].length != '')\n\n\n    // Login\n    async function login() {\n        // Compare pins\n        let compareResult = await comparePINCode()\n\n        compareResult\n            // Auth\n            ? auth()\n            // Set auth error\n            : await setAuthError()\n    }\n\n\n    // Compare pin code\n    async function comparePINCode() {\n        // Encrypt the PIN\n        let pinHash = await hashDataWithKey(pinCode.value.join(''), hmacKey.value)\n\n        return pinHash === pinDB.value\n    }\n\n\n    // Set auth error\n    async function setAuthError() {\n        // Set error\n        wrongPin.value = true\n\n        let newLimit = authErrorLimit.value - 1\n\n        // Update limit\n        authErrorLimit.value = newLimit\n\n        newLimit\n            // Сhange auth limit\n            ? await addData('wallet', [['authErrorLimit', newLimit]])\n            // Show error auth modal\n            : showErrorAuthModal.value = true\n\n        // Clear data\n        pinCode.value = ['', '', '', '', '', '']\n\n        // Reset data\n        wrongPin.value = false\n    }\n\n\n    // Auth\n    async function auth() {\n        // Сhange auth limit\n        await addData('wallet', [['authErrorLimit', 4]])\n\n        // Set authorized status\n        isAuthorized.value = true\n\n        // Redirect\n        router.push('/account')\n    }\n\n\n    async function deleteAll() {\n        await clearData('wallet')\n\n        // Redirect\n        router.push('/')\n    }\n</script>\n\n\n<style scoped>\n    .pin\n    {\n        position: relative;\n\n        margin-top: 8px;\n\n        opacity: 0;\n    }\n\n    .pin.show\n    {\n        opacity: 1;\n    }\n\n\n    .pin .label\n    {\n        font-size: 14px;\n\n        margin-bottom: 2px;\n        padding: 0 10px;\n    }\n\n\n    .pin .row\n    {\n        flex-wrap: nowrap;\n    }\n\n\n    .pin .row > *\n    {\n        width: 100%;\n    }\n\n\n    .pin .row > * + *\n    {\n        margin-left: 10px;\n    }\n\n\n    .pin .input\n    {\n        font-size: 20px;\n\n        text-align: center;\n    }\n\n\n    .pin .error .input\n    {\n        border-color: #f00;\n    }\n\n    .pin .success .input\n    {\n        border-color: #00aa63;\n    }\n\n\n    .pin .warning\n    {\n        font-size: 12px;\n\n        position: absolute;\n        top: 100%;\n        left: 0;\n\n        width: 100%;\n        margin-top: 4px;\n\n        text-align: center;\n\n        color: #ff4b4b;\n    }\n\n\n\n    .biometric_btn\n    {\n        font-size: 18px;\n        font-weight: 500;\n\n        display: block;\n\n        margin: auto auto 25%;\n\n        transition: opacity .2s linear;\n\n        opacity: 0;\n    }\n\n    .biometric_btn.show\n    {\n        opacity: 1;\n    }\n\n    .biometric_btn.top\n    {\n        margin-top: 40px;\n    }\n\n\n    .biometric_btn .icon\n    {\n        display: block;\n\n        width: 44px;\n        height: 44px;\n        margin: 0 auto;\n    }\n\n\n    .biometric_btn.disabled\n    {\n        pointer-events: none;\n\n        opacity: .6;\n    }\n\n\n\n    /* .input:focus\n    {\n        color: #170232;\n    }\n\n    .input.active:focus\n    {\n        color: currentColor;\n    } */\n\n\n\n    .btns\n    {\n        opacity: 0;\n    }\n\n    .btns.show\n    {\n        opacity: 1;\n    }\n</style>","import script from \"./AuthPage.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AuthPage.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./AuthPage.vue?vue&type=style&index=0&id=08166ac9&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-08166ac9\"]])\n\nexport default __exports__"],"names":["loading","ref","onBeforeMount","async","clearData","value","__exports__","router","useRouter","pinCode","pinDB","hmacKey","wrongPin","authErrorLimit","isBiometric","isBiometricAvailable","isAuthorized","useGlobalState","showErrorAuthModal","inputRef","moveFocus","event","nextIndex","target","length","closest","querySelector","focus","moveBack","currentIndex","setTimeout","select","checkBiometricAccess","Telegram","WebApp","isAccessGranted","biometricAuthenticate","BiometricManager","requestAccess","reason","authenticate","res","auth","getData","onMounted","watch","document","activeElement","blur","login","isFormValid","computed","compareResult","comparePINCode","setAuthError","pinHash","hashDataWithKey","join","newLimit","addData","push","deleteAll"],"sourceRoot":""}