{"version":3,"file":"js/422.7d079b6d.js","mappings":"mjBAoFI,MAAMA,GAAQC,EAAAA,EAAAA,KACVC,GAASC,EAAAA,EAAAA,MACTC,GAAUC,EAAAA,EAAAA,IAAO,WACjBC,GAAeC,EAAAA,EAAAA,MACfC,GAAOH,EAAAA,EAAAA,IAAO,QACdI,GAAOC,EAAAA,EAAAA,IAAI,IACXC,GAAYD,EAAAA,EAAAA,KAAI,GAChBE,GAAkBF,EAAAA,EAAAA,KAAI,GAI1BG,eAAeC,IAEXH,EAAUI,OAAQ,EAElB,IAEQf,EAAMgB,MAAMC,kBACNjB,EAAMkB,kBAIhB,IAAIC,QAAgBC,EAAAA,EAAAA,IAAOpB,EAAMqB,eAAeC,KAAKC,IAAKd,EAAKM,OAG/DT,EAAakB,OAAO,CAChBC,MAAO,UACPC,OAAO,IAIXpB,EAAakB,OAAO,CAChBC,MAAO,UACPE,MAAO,IACPC,UAAW,IACXC,MAAOrB,EAAKsB,OAAOC,EAAE,yCACrBC,KAAM,UACNV,KAAM,CACFW,eAAe,EACfC,eAAeC,EAAAA,EAAAA,IAAgBnC,EAAMoC,oBAK7CC,EAAAA,EAAAA,IAAOlB,GAASmB,OAAMC,IAClBC,QAAQC,IAAIF,GAGZvC,EAAMqB,eAAiB,KAGvBqB,EAAUH,EAAM,IAIpBrC,EAAOyC,KAAK,WAChB,CAAE,MAAOJ,GACLC,QAAQC,IAAIF,GAGZG,EAAUH,GAGVvC,EAAM4C,mBAAoB,CAC9B,CACJ,CAIA,SAASC,IAEL,MAAMC,EAAa9C,EAAM+C,eAAe/C,EAAMqB,eAAeC,KAAK0B,SAE9DF,GACAA,EAAWG,KAAK,CACZjB,KAAM,QACNkB,UAAWlD,EAAMqB,eAAeC,KAAK6B,WACrCC,QAAS5C,EAAKsB,OAAOC,EAAE,iCAK/B/B,EAAMqB,eAAiB,KAGvBf,EAAakB,OAAO,CAChBC,MAAO,UACPE,MAAO,IACPC,SAAU,IACVC,MAAOrB,EAAKsB,OAAOC,EAAE,uCACrBC,KAAM,YAIVhC,EAAMqD,aAGNrD,EAAM4C,mBAAoB,EAG1B1C,EAAOyC,KAAK,WAChB,CAIA,SAASD,EAAUH,GAEf5B,EAAUI,OAAQ,EAGlB,IAAIuC,EAAY,GAIVA,EADNf,EAAMgB,KACY/C,EAAKsB,OAAOC,EAAE,iCAAiCQ,EAAMgB,QACrD/C,EAAKsB,OAAOC,EAAE,0CAGhCzB,EAAakB,OAAO,CAChBC,MAAO,UACPC,OAAO,IAIXpB,EAAakB,OAAO,CAChBC,MAAO,UACPE,MAAO,IACPC,SAAU,IACVC,MAAOrB,EAAKsB,OAAOC,EAAE,uCACrByB,KAAMF,EACNtB,KAAM,UAIVhC,EAAMyD,SAASzD,EAAMoC,gBAAgBsB,cAAgB,KAGrD1D,EAAMqD,YACV,CAIA,SAASM,IAEL/C,EAAgBG,OAAQ,EAGxBf,EAAM4D,gBAAiB,CAC3B,C,OAIAxD,EAAQyD,GAAG,QAAQ,KAEfjD,EAAgBG,OAAQ,EAGxBf,EAAM4D,gBAAiB,EAGvB9C,GAAgB,IAKpBV,EAAQyD,GAAG,uBAAuB,KAE9BjD,EAAgBG,OAAQ,EAGxBf,EAAM4D,gBAAiB,CAAK,IAKhCxD,EAAQyD,GAAG,mBAAmB,KAE1BjD,EAAgBG,OAAQ,EAGxBf,EAAM4D,gBAAiB,CAAK,I,iqDClQpC,MAAME,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://cosmos-telegram-signer/./src/views/jetPack/SendTx.vue","webpack://cosmos-telegram-signer/./src/views/jetPack/SendTx.vue?9b47"],"sourcesContent":["<template>\n    <!-- JetPack - Send Tx page -->\n    <section class=\"page_container send_tx\">\n        <!-- Loader -->\n        <Loader v-if=\"isProcess\" />\n\n        <div class=\"cont\">\n            <!-- JetPack - Send Tx page title -->\n            <div class=\"page_title\">\n                {{ $t('message.jp_send_tx_title') }}\n            </div>\n\n            <!-- JetPack - Send Tx page data -->\n            <div class=\"page_data_wrap\">\n                <div class=\"page_data\">\n                    <!-- JetPack - Send Tx messages -->\n                    <pre><code>{{ store.jetPackRequest?.data?.msg }}</code></pre>\n\n\n                    <!-- JetPack - Send Tx page memo -->\n                    <div class=\"memo_field\">\n                        <!-- Send page memo label -->\n                        <div class=\"field_label\">\n                            {{ $t('message.memo_label') }}\n                        </div>\n\n                        <!-- JetPack - Send Tx page memo field -->\n                        <div class=\"field\">\n                            <input type=\"text\" class=\"input big\" v-model=\"memo\">\n                        </div>\n                    </div>\n\n\n                    <!-- Tx fee -->\n                    <TxFee :msgAny=\"store.jetPackRequest?.data?.msg\" txType=\"send\" />\n\n\n                    <!-- JetPack - Send Tx page buttons -->\n                    <div class=\"btns\">\n                        <!-- Send button -->\n                        <button v-if=\"!store.networks[store.currentNetwork].currentTxHash\" class=\"btn\" @click.prevent=\"openSignTxModal()\" :class=\"{ disabled: !store.TxFee.isEnough }\">\n                            <span>{{ $t('message.btn_send') }}</span>\n                        </button>\n\n                        <!-- Waiting button -->\n                        <button v-else class=\"btn waiting_btn\" @click.prevent=\"emitter.emit('show_collapsible_notification')\">\n                            <span>{{ $t('message.btn_waiting_tx') }}</span>\n                        </button>\n\n                        <!-- Reject button -->\n                        <button class=\"btn purple_btn\" @click=\"rejectRequest()\">\n                            <span>{{ $t('message.btn_reject') }}</span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </section>\n\n    <!-- Sign transaction modal -->\n    <transition name=\"modal\">\n    <SignTxModal v-if=\"showSignTxModal\"/>\n    </transition>\n\n    <!-- Overlay -->\n    <transition name=\"fade\">\n    <div class=\"modal_overlay\" @click.prevent=\"emitter.emit('close_any_modal')\" v-if=\"showSignTxModal\"></div>\n    </transition>\n</template>\n\n\n<script setup>\n    import { ref, inject } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { useRouter } from 'vue-router'\n    import { useNotification } from '@kyvg/vue3-notification'\n    import { signTx, sendTx, getExplorerLink } from '@/utils'\n\n    // Components\n    import Loader from '@/components/Loader.vue'\n    import TxFee from '@/components/TxFee.vue'\n    import SignTxModal from '@/components/modal/SignTxModal.vue'\n\n\n    const store = useGlobalStore(),\n        router = useRouter(),\n        emitter = inject('emitter'),\n        notification = useNotification(),\n        i18n = inject('i18n'),\n        memo = ref(''),\n        isProcess = ref(false),\n        showSignTxModal = ref(false)\n\n\n    // Approve request\n    async function approveRequest() {\n        // Set process status\n        isProcess.value = true\n\n        try {\n            // Update TxFee info\n            if (store.TxFee.isRemember) {\n                await store.updateTxFeeInfo()\n            }\n\n            // Sign Tx\n            let txBytes = await signTx(store.jetPackRequest.data.msg, memo.value)\n\n            // Clean notifications\n            notification.notify({\n                group: 'default',\n                clean: true\n            })\n\n            // Show notification\n            notification.notify({\n                group: 'default',\n                speed: 200,\n                duration: -100,\n                title: i18n.global.t('message.notification_tx_pending_title'),\n                type: 'pending',\n                data: {\n                    isCollapsible: true,\n                    explorer_link: getExplorerLink(store.currentNetwork)\n                }\n            })\n\n            // Send Tx\n            sendTx(txBytes).catch(error => {\n                console.log(error)\n\n                // Reset jetPack request\n                store.jetPackRequest = null\n\n                // Show error\n                showError(error)\n            })\n\n            // Redirect\n            router.push('/account')\n        } catch (error) {\n            console.log(error)\n\n            // Show error\n            showError(error)\n\n            // Show redirect modal\n            store.showRedirectModal = true\n        }\n    }\n\n\n    // Reject request\n    function rejectRequest() {\n        // Send response\n        const connection = store.RTCConnections[store.jetPackRequest.data.peer_id]\n\n        if (connection) {\n            connection.send({\n                type: 'error',\n                requestId: store.jetPackRequest.data.request_id,\n                message: i18n.global.t('message.jp_message_rejected')\n            })\n        }\n\n        // Reset jetPack request\n        store.jetPackRequest = null\n\n        // Show notification\n        notification.notify({\n            group: 'default',\n            speed: 200,\n            duration: 1000,\n            title: i18n.global.t('message.notification_jp_send_reject'),\n            type: 'default'\n        })\n\n        // Reset Tx Fee\n        store.resetTxFee()\n\n        // Show redirect modal\n        store.showRedirectModal = true\n\n        // Redirect\n        router.push('/account')\n    }\n\n\n    // Show error message\n    function showError(error) {\n        // Set process status\n        isProcess.value = false\n\n        // Get error code\n        let errorText = ''\n\n        // Get error title\n        error.code\n            ? errorText = i18n.global.t(`message.notification_tx_error_${error.code}`)\n            : errorText = i18n.global.t('message.notification_tx_error_rejected')\n\n        // Clean notifications\n        notification.notify({\n            group: 'default',\n            clean: true\n        })\n\n        // Show notification\n        notification.notify({\n            group: 'default',\n            speed: 200,\n            duration: 6000,\n            title: i18n.global.t('message.notification_tx_error_title'),\n            text: errorText,\n            type: 'error'\n        })\n\n        // Clear tx hash\n        store.networks[store.currentNetwork].currentTxHash = null\n\n        // Reset Tx Fee\n        store.resetTxFee()\n    }\n\n\n    // Open SignTx modal\n    function openSignTxModal() {\n        // Show SignTx modal\n        showSignTxModal.value = true\n\n        // Update status\n        store.isAnyModalOpen = true\n    }\n\n\n    // Event \"auth\"\n    emitter.on('auth', () => {\n        // Hide SignTx modal\n        showSignTxModal.value = false\n\n        // Update status\n        store.isAnyModalOpen = false\n\n        // Send tokens\n        approveRequest()\n    })\n\n\n    // Event \"close_sign_tx_modal\"\n    emitter.on('close_sign_tx_modal', () => {\n        // Hide SignTx modal\n        showSignTxModal.value = false\n\n        // Update status\n        store.isAnyModalOpen = false\n    })\n\n\n    // Event \"close_any_modal\"\n    emitter.on('close_any_modal', () => {\n        // Hide SignTx modal\n        showSignTxModal.value = false\n\n        // Update status\n        store.isAnyModalOpen = false\n    })\n</script>\n\n\n<style scoped>\n    .memo_field\n    {\n        margin-bottom: auto;\n    }\n\n\n    pre\n    {\n        display: block;\n        overflow: auto;\n\n        width: 100%;\n        margin-bottom: 12px;\n        padding: 15px;\n\n        border: 1px solid #1a0242;\n        border-radius: 10px;\n        background: #170232;\n    }\n\n\n    .btns\n    {\n        margin-top: 0;\n        padding: 0;\n    }\n</style>","import script from \"./SendTx.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SendTx.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./SendTx.vue?vue&type=style&index=0&id=703a5f14&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-703a5f14\"]])\n\nexport default __exports__"],"names":["store","useGlobalStore","router","useRouter","emitter","inject","notification","useNotification","i18n","memo","ref","isProcess","showSignTxModal","async","approveRequest","value","TxFee","isRemember","updateTxFeeInfo","txBytes","signTx","jetPackRequest","data","msg","notify","group","clean","speed","duration","title","global","t","type","isCollapsible","explorer_link","getExplorerLink","currentNetwork","sendTx","catch","error","console","log","showError","push","showRedirectModal","rejectRequest","connection","RTCConnections","peer_id","send","requestId","request_id","message","resetTxFee","errorText","code","text","networks","currentTxHash","openSignTxModal","isAnyModalOpen","on","__exports__"],"sourceRoot":""}