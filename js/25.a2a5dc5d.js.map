{"version":3,"file":"js/25.a2a5dc5d.js","mappings":"mZASI,SAASA,IACLC,SAASC,OAAOC,gBAAgB,CAAEC,KAAM,aAC5C,C,kHCLJ,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O,y1BCiHI,MAAMC,GAAQC,EAAAA,EAAAA,KAEVC,IADSC,EAAAA,EAAAA,OACDC,EAAAA,EAAAA,OACRC,GAAUC,EAAAA,EAAAA,IAAO,WAGjBC,IAFOD,EAAAA,EAAAA,IAAO,SACCE,EAAAA,EAAAA,MACLR,EAAMS,SAASC,MAAKH,GAAWA,EAAQI,QAAUT,EAAMU,OAAOD,SACxEE,GAAUC,EAAAA,EAAAA,IAAI,IACdC,GAASD,EAAAA,EAAAA,IAAI,IACbE,GAAOF,EAAAA,EAAAA,IAAI,IACXG,GAAkBH,EAAAA,EAAAA,KAAI,GACtBI,GAASJ,EAAAA,EAAAA,IAAI,IACbK,GAAYL,EAAAA,EAAAA,KAAI,GAChBM,GAAgBN,EAAAA,EAAAA,KAAI,GACpBO,GAAcP,EAAAA,EAAAA,KAAIQ,EAAAA,EAAAA,KAAS,IAAMF,EAAcG,OAASV,EAAQU,MAAMC,UAwB1E,SAASC,EAAgBC,GACrB,IAAIC,EAAed,EAAQU,MAAMK,WAAWrB,EAAQsB,WAAWC,eAE/DH,EACMD,EAAEK,OAAOC,UAAUC,OAAO,SAC1BP,EAAEK,OAAOC,UAAUE,IAAI,QACjC,CAIA,SAASC,IAELf,EAAcG,OAAQ,EAEtBa,YAAW,KAEPrB,EAAOQ,OAAQc,EAAAA,EAAAA,IAAkB9B,EAAQQ,OAAQR,EAAQ+B,UAGzDlB,EAAcG,OAAQ,CAAI,GAElC,CAIA,SAASgB,EAAeb,GAEpBN,EAAcG,OAAQ,EAEtBa,YAAW,KAEHV,EAAEK,OAAOR,MAAMC,QAAUE,EAAEK,OAAOR,OAAS,IAE3CR,EAAOQ,MAAQ,IAIfG,EAAEK,OAAOR,MAAMC,QAAUE,EAAEK,OAAOR,MAAQ,GAAKG,EAAEK,OAAOR,OAAQc,EAAAA,EAAAA,IAAkB9B,EAAQQ,OAAQR,EAAQ+B,YAE1GlB,EAAcG,OAAQ,GAItBG,EAAEK,OAAOR,OAAQc,EAAAA,EAAAA,IAAkB9B,EAAQQ,OAAQR,EAAQ+B,WAE3DH,GACJ,GAER,C,OArEAK,EAAAA,EAAAA,KAAMlB,EAAAA,EAAAA,KAAS,IAAMD,EAAYE,SAAQ,KACjCF,EAAYE,QAEZL,EAAOK,MAAQ,CAAC,CACZkB,QAAS,+BACTlB,MAAO,CACHmB,YAAa1C,EAAM2C,eACnBC,UAAW/B,EAAQU,MACnBR,OAAQ,CAAC,CACLJ,MAAOJ,EAAQI,MACfI,OAAQ,GAAG8B,WAAW9B,EAAOQ,MAAMuB,WAAWC,QAAQ,IAAK,MAAMC,QAAQzC,EAAQ+B,UAAYW,KAAKC,IAAI,GAAI3C,EAAQ+B,eAK9Ha,QAAQC,IAAIlC,EAAOK,OACvB,IA6HJlB,EAAQgD,GAAG,QAAQ,KAEfpC,EAAgBM,OAAQ,EAGxB+B,OAAO,IAKXjD,EAAQgD,GAAG,uBAAuB,KAE9BpC,EAAgBM,OAAQ,CAAK,I,i1FC7RrC,MAAMxB,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://cosmos-telegram-signer/./src/components/account/QRCode.vue","webpack://cosmos-telegram-signer/./src/components/account/QRCode.vue?726a","webpack://cosmos-telegram-signer/./src/views/Send.vue","webpack://cosmos-telegram-signer/./src/views/Send.vue?74fd"],"sourcesContent":["<template>\n    <button class=\"qr_code_btn\" @click.prevent=\"openScaner\">\n        <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_scaner\"></use></svg>\n    </button>\n</template>\n\n\n<script setup>\n    // Open QR popup\n    function openScaner() {\n        Telegram.WebApp.showScanQrPopup({ text: 'Наш текст' })\n    }\n</script>\n\n\n<style scoped>\n    .qr_code_btn\n    {\n        position: absolute;\n        z-index: 9;\n        top: 17px;\n        right: 12px;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 28px;\n        height: 28px;\n        margin-left: auto;\n\n        background: url(@/assets/bg_action_btn.svg) 0 0/100% 100% no-repeat;\n    }\n\n\n    .qr_code_btn.in_field\n    {\n        top: 0;\n        right: 16px;\n        bottom: 0;\n\n        margin: auto 0;\n\n        background: none;\n    }\n\n\n    .qr_code_btn .icon\n    {\n        display: block;\n\n        width: 14px;\n        height: 14px;\n    }\n</style>","import script from \"./QRCode.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./QRCode.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./QRCode.vue?vue&type=style&index=0&id=77f5f7be&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-77f5f7be\"]])\n\nexport default __exports__","<template>\n    <section class=\"page_container sens\">\n        <Loader v-if=\"isProcess\" />\n\n        <div class=\"cont\">\n            <div class=\"head\">\n                <router-link to=\"/account\" class=\"back_btn\">\n                    <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_arrow_hor\"></use></svg>\n                </router-link>\n\n                <div class=\"page_title\">\n                    {{ $t('message.send_page_title') }}\n                </div>\n            </div>\n\n\n            <div class=\"token_wrap\">\n                <div class=\"token\">\n                    <div class=\"logo\">\n                        <img :src=\"balance.token_info.logo_URIs.svg\" :alt=\"balance.token_info.name\" loading=\"lazy\">\n                    </div>\n\n                    <div class=\"denom\">\n                        {{ balance.token_info.symbol }}\n                    </div>\n\n                    <div class=\"amount\">\n                        <div class=\"val\">\n                            {{ formatTokenAmount(balance.amount, balance.exponent).toLocaleString('ru-RU', { maximumFractionDigits: 7 }) }}\n                        </div>\n\n                        <div class=\"cost\">\n                            {{ formatTokenCost(calcTokenCost(balance.token_info.symbol, balance.amount, balance.exponent)) }} {{ store.currentCurrencySymbol }}\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n            <div class=\"address\">\n                <div class=\"label\">\n                    {{ $t('message.send_address_label') }}\n                </div>\n\n                <div class=\"field\">\n                    <input type=\"text\" class=\"input big\" v-model=\"address\" @input=\"validateAddress($event)\">\n\n                    <!-- Scaner -->\n                    <QRCode class=\"in_field\" />\n                </div>\n            </div>\n\n\n            <div class=\"amount_field\">\n                <div class=\"label\">\n                    {{ $t('message.send_amount_label') }}\n\n                    <div class=\"cost\">\n                        {{ formatTokenCost(calcTokenCost(store.networks[store.currentNetwork].token_name, (amount * Math.pow(10, store.networks[store.currentNetwork].exponent)), store.networks[store.currentNetwork].exponent)) }}\n\n                        {{ store.currentCurrencySymbol }}\n                    </div>\n                </div>\n\n                <div class=\"field\">\n                    <input type=\"number\" inputmode=\"numeric\" class=\"input big\" v-model=\"amount\" placeholder=\"0.00\" @input=\"validateAmount($event)\">\n\n                    <button type=\"button\" class=\"max_btn\" @click.prevent=\"setMaxAmount\">\n                        {{ $t('message.btn_MAX') }}\n                    </button>\n                </div>\n            </div>\n\n\n            <div class=\"memo_field\">\n                <div class=\"label\">\n                    {{ $t('message.memo_label') }}\n                </div>\n\n                <div class=\"field\">\n                    <input type=\"text\" class=\"input big\" v-model=\"memo\">\n                </div>\n            </div>\n\n\n            <!-- Tx fee -->\n            <TxFee v-if=\"isFormValid\" :msgAny />\n\n\n            <div class=\"btns\">\n                <button v-if=\"!store.networks[store.currentNetwork].currentTxHash\" class=\"btn\" @click.prevent=\"showSignTxModal = true\" :class=\"{ disabled: !store.TxFee.isEnough }\">\n                    <span>{{ $t('message.btn_send') }}</span>\n                </button>\n\n                <button v-else class=\"btn waiting_btn\" @click.prevent=\"emitter.emit('show_pending_notification')\">\n                    <span>{{ $t('message.btn_waiting_tx') }}</span>\n                </button>\n            </div>\n        </div>\n    </section>\n\n\n    <!-- Sign transaction -->\n    <SignTx v-if=\"showSignTxModal\"/>\n</template>\n\n\n<script setup>\n    import { ref, inject, watch, computed } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { useRouter, useRoute } from 'vue-router'\n    import { useNotification } from '@kyvg/vue3-notification'\n    import { calcTokenCost, formatTokenCost, formatTokenAmount } from '@/utils'\n\n    // Components\n    import Loader from '@/components/Loader.vue'\n    import TxFee from '@/components/TxFee.vue'\n    import SignTx from '@/components/modal/SignTx.vue'\n    import QRCode from '@/components/account/QRCode.vue'\n\n\n    const store = useGlobalStore(),\n        router = useRouter(),\n        route = useRoute(),\n        emitter = inject('emitter'),\n        i18n = inject('i18n'),\n        notification = useNotification(),\n        balance = store.balances.find(balance => balance.denom === route.params.denom),\n        address = ref(''),\n        amount = ref(''),\n        memo = ref(''),\n        showSignTxModal = ref(false),\n        msgAny = ref([]),\n        isProcess = ref(false),\n        isAmountReady = ref(false),\n        isFormValid = ref(computed(() => isAmountReady.value && address.value.length))\n\n\n    watch(computed(() => isFormValid.value), () => {\n        if (isFormValid.value) {\n            // Set messeges\n            msgAny.value = [{\n                typeUrl: '/cosmos.bank.v1beta1.MsgSend',\n                value: {\n                    fromAddress: store.currentAddress,\n                    toAddress: address.value,\n                    amount: [{\n                        denom: balance.denom,\n                        amount: `${parseFloat(amount.value.toString().replace(',', '.')).toFixed(balance.exponent) * Math.pow(10, balance.exponent)}`\n                    }]\n                }\n            }]\n\n            console.log(msgAny.value)\n        }\n    })\n\n\n    // Validate address\n    function validateAddress(e) {\n        let isStartsWith = address.value.startsWith(balance.chain_info.bech32_prefix)\n\n        isStartsWith\n            ? e.target.classList.remove('error')\n            : e.target.classList.add('error')\n    }\n\n\n    // Set MAX amount\n    function setMaxAmount() {\n        // Set amount status\n        isAmountReady.value = false\n\n        setTimeout(() => {\n            // Set amount\n            amount.value = formatTokenAmount(balance.amount, balance.exponent)\n\n            // Set amount status\n            isAmountReady.value = true\n        })\n    }\n\n\n    // Validate amount\n    function validateAmount(e) {\n        // Set amount status\n        isAmountReady.value = false\n\n        setTimeout(() => {\n            // Negative value\n            if (e.target.value.length && e.target.value <= 0) {\n                // Set empty\n                amount.value = ''\n            }\n\n            // Acceptable value\n            if (e.target.value.length && e.target.value > 0 && e.target.value < formatTokenAmount(balance.amount, balance.exponent)){\n                // Set amount status\n                isAmountReady.value = true\n            }\n\n            // More than available balance\n            if (e.target.value > formatTokenAmount(balance.amount, balance.exponent)) {\n                // Set MAX amount\n                setMaxAmount()\n            }\n        })\n    }\n\n\n    // Send tokens\n    async function send() {\n        // Set process status\n        isProcess.value = true\n\n        try {\n            // Update TxFee info\n            if (store.TxFee.isRemember) {\n                await store.updateTxFeeInfo()\n            }\n\n            // Sign Tx\n            let txBytes = await signTx(msgAny.value, memo.value)\n\n            // Clean notifications\n            notification.notify({\n                group: 'default',\n                clean: true\n            })\n\n            // Show notification\n            notification.notify({\n                group: 'default',\n                speed: 200,\n                duration: -100,\n                title: i18n.global.t('message.notification_tx_pending_title'),\n                type: 'pending',\n                data: {\n                    explorer_link: getExplorerLink(store.currentNetwork)\n                }\n            })\n\n            // Send Tx\n            sendTx(txBytes)\n\n            // Redirect\n            router.push('/account')\n        } catch (error) {\n            console.log(error)\n\n            // Show error\n            showError(error)\n        }\n    }\n\n\n    // Show error message\n    function showError(error) {\n        // Get error code\n        let errorText = ''\n\n        // Get error title\n        error.code\n            ? errorText = i18n.global.t(`message.notification_tx_error_${error.code}`)\n            : errorText = i18n.global.t('message.notification_tx_error_rejected')\n\n        // Show notification\n        notification.notify({\n            group: 'default',\n            speed: 200,\n            duration: 6000,\n            title: 'Tx error',\n            text: errorText,\n            type: 'error'\n        })\n    }\n\n\n    // Event \"auth\"\n    emitter.on('auth', () => {\n        // Hide SignTx modal\n        showSignTxModal.value = false\n\n        // Claim tokens\n        claim()\n    })\n\n\n    // Event \"close_sign_tx_modal\"\n    emitter.on('close_sign_tx_modal', () => {\n        // Hide SignTx modal\n        showSignTxModal.value = false\n    })\n</script>\n\n\n<style scoped>\n    .send\n    {\n        padding-top: 8px;\n    }\n\n\n    .head\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: space-between;\n\n        margin-bottom: 10px;\n    }\n\n\n    .back_btn\n    {\n        position: relative;\n        top: 0;\n        left: 0;\n\n        margin-left: -12px;\n    }\n\n\n    .page_title\n    {\n        width: calc(100% - 48px);\n        margin-left: auto;\n        padding: 0;\n    }\n\n\n\n    .token_wrap\n    {\n        display: block;\n\n        margin-bottom: 20px;\n        padding: 1px;\n\n        text-decoration: none;\n\n        color: currentColor;\n        border-radius: 12px;\n        background: linear-gradient(to bottom,  #5e33cf 0%,#210750 100%);\n    }\n\n\n    .token\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: flex-start;\n\n        padding-right: 9px;\n\n        border-radius: 11px;\n        background: radial-gradient(130.57% 114.69% at 50% 0%, rgba(148, 56, 248, .70) 0%, rgba(89, 21, 167, .70) 50.94%, rgba(53, 12, 107, .70) 85.09%);\n    }\n\n\n    .token .logo\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 55px;\n        height: 55px;\n        margin-right: 8px;\n        padding: 8px;\n\n        border-radius: 11px;\n    }\n\n\n    .token .logo img\n    {\n        display: block;\n\n        max-width: 100%;\n        max-height: 100%;\n    }\n\n\n    .token .denom\n    {\n        font-size: 16px;\n        font-weight: 500;\n\n        text-transform: uppercase;\n    }\n\n\n    .token .amount\n    {\n        font-size: 18px;\n        font-weight: 500;\n\n        margin-left: auto;\n\n        text-align: right;\n        white-space: nowrap;\n    }\n\n\n    .token .amount .cost\n    {\n        font-size: 16px;\n        font-weight: 400;\n\n        color: #836b9e;\n    }\n\n\n\n    .address .input.big\n    {\n        padding-right: 55px;\n    }\n\n\n\n    .amount_field\n    {\n        margin-top: 10px;\n    }\n\n\n    .amount_field .cost\n    {\n        margin-left: auto;\n\n        color: rgba(255, 255, 255, .70);\n    }\n\n\n\n    .memo_field\n    {\n        margin-top: 10px;\n        margin-bottom: auto;\n    }\n\n\n    .label\n    {\n        font-size: 14px;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: flex-start;\n\n        margin-bottom: 2px;\n        padding: 0 10px;\n    }\n\n\n    .field\n    {\n        position: relative;\n\n        padding: 1px;\n\n        border-radius: 10px;\n        background: linear-gradient(to bottom,  #5d33ce 0%,#200750 100%);\n    }\n\n\n    .input\n    {\n        border-radius: 9px;\n        background: #170232;\n    }\n\n\n    .btns\n    {\n        margin-top: 0;\n        padding: 0;\n    }\n</style>","import script from \"./Send.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Send.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Send.vue?vue&type=style&index=0&id=3cb9fcd1&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-3cb9fcd1\"]])\n\nexport default __exports__"],"names":["openScaner","Telegram","WebApp","showScanQrPopup","text","__exports__","store","useGlobalStore","route","useRouter","useRoute","emitter","inject","balance","useNotification","balances","find","denom","params","address","ref","amount","memo","showSignTxModal","msgAny","isProcess","isAmountReady","isFormValid","computed","value","length","validateAddress","e","isStartsWith","startsWith","chain_info","bech32_prefix","target","classList","remove","add","setMaxAmount","setTimeout","formatTokenAmount","exponent","validateAmount","watch","typeUrl","fromAddress","currentAddress","toAddress","parseFloat","toString","replace","toFixed","Math","pow","console","log","on","claim"],"sourceRoot":""}