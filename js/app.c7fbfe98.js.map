{"version":3,"file":"js/app.c7fbfe98.js","mappings":"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","sources":["webpack://cosmos-telegram-signer/./src/locale/messages.js","webpack://cosmos-telegram-signer/./src/locale/index.js","webpack://cosmos-telegram-signer/./src/App.vue","webpack://cosmos-telegram-signer/./src/App.vue?7ccd","webpack://cosmos-telegram-signer/./src/layouts/Default.vue","webpack://cosmos-telegram-signer/./src/layouts/Default.vue?3951","webpack://cosmos-telegram-signer/./src/layouts/Account.vue","webpack://cosmos-telegram-signer/./src/layouts/Account.vue?f612","webpack://cosmos-telegram-signer/./src/router/index.js","webpack://cosmos-telegram-signer/./src/directives/v-focus.js","webpack://cosmos-telegram-signer/./src/directives/v-parallax.js","webpack://cosmos-telegram-signer/./src/directives/v-odometer.js","webpack://cosmos-telegram-signer/./src/main.js","webpack://cosmos-telegram-signer/./src/store/networks/cosmoshub.js","webpack://cosmos-telegram-signer/./src/store/networks/bostrom.js","webpack://cosmos-telegram-signer/./src/store/networks/localbostrom.js","webpack://cosmos-telegram-signer/./src/store/index.js","webpack://cosmos-telegram-signer/./src/utils/db.js","webpack://cosmos-telegram-signer/./src/utils/index.js","webpack://cosmos-telegram-signer/webpack/bootstrap","webpack://cosmos-telegram-signer/webpack/runtime/chunk loaded","webpack://cosmos-telegram-signer/webpack/runtime/compat get default export","webpack://cosmos-telegram-signer/webpack/runtime/define property getters","webpack://cosmos-telegram-signer/webpack/runtime/ensure chunk","webpack://cosmos-telegram-signer/webpack/runtime/get javascript chunk filename","webpack://cosmos-telegram-signer/webpack/runtime/get mini-css chunk filename","webpack://cosmos-telegram-signer/webpack/runtime/global","webpack://cosmos-telegram-signer/webpack/runtime/hasOwnProperty shorthand","webpack://cosmos-telegram-signer/webpack/runtime/load script","webpack://cosmos-telegram-signer/webpack/runtime/make namespace object","webpack://cosmos-telegram-signer/webpack/runtime/node module decorator","webpack://cosmos-telegram-signer/webpack/runtime/publicPath","webpack://cosmos-telegram-signer/webpack/runtime/css loading","webpack://cosmos-telegram-signer/webpack/runtime/jsonp chunk loading","webpack://cosmos-telegram-signer/webpack/startup"],"sourcesContent":["export default {\n    // English\n    en: {\n        message: {\n            // Page title\n            'page_title': 'Bro wallet',\n            'create_wallet_title': 'New Recovery Phrase',\n            'create_wallet_confirm_title': 'Verify Your Recovery Phrase',\n            'create_pin_title': 'Name your wallet',\n            'wallet_created_title': 'Wallet created!',\n            'wallet_title': 'Wallet page',\n            'import_wallet_title': 'Import Existing Wallet',\n\n\n            // Create page\n            'create_wallet_agree_label1': 'Do not share your recovery phrase with ANYONE.',\n            'create_wallet_agree_label2': 'Back up the phrase safely.',\n\n            'create_wallet_agree_checkbox1': \"I understand that I have access to my wallet solely because I possess the recovery phrase. If this phrase falls into someone else's hands, I will lose my funds.\",\n            'create_wallet_agree_checkbox2': 'I also understand that if I lose my recovery phrase, I will lose all the funds in this wallet.',\n\n\n            // Confirm page\n            'confirm_label': 'Word',\n            'confirm_exp': 'Fill out the words according to their numbers to verify that you have stored your phrase safely.',\n\n\n            // Create pin page\n            'create_pin_wallet_name_label': 'Wallet name:',\n            'create_pin_create_pin_label': 'Create pin:',\n            'create_pin_confirm_pin_label': 'Repeat pin:',\n\n            'create_pin_wallet_name_placeholder': 'Name',\n\n\n            // Auth\n            'auth_title': 'Welcome!',\n            'auth_enter_pin_label': 'Enter pin:',\n            'auth_error_warning': 'You have {count} attempts left',\n\n            'auth_error_title': 'Incorrect pin!',\n            'auth_error_desc': 'The PIN code was entered incorrectly the maximum number of times. For security reasons, the current wallet will be deleted. You can restore it the next time you log into the app using your saved seed phrase or private key',\n\n\n            // Mnemonic\n            'mnemonic_tab1': '12 words',\n            'mnemonic_tab2': '24 words',\n            'mnemonic_tab3': 'Private Key',\n\n\n            // Import page\n            'import_wallet_exp': 'Enter your recovery phrase here to restore your wallet.<br> Or click on any blank and paste the entire phrase.',\n            'import_wallet_exp2': 'Enter your private key here to restore your wallet.<br> Or click on any blank and paste the entire phrase.',\n\n\n            // Account page\n            'current_balance_title': 'Current balance',\n            'stacked_balance_title': 'Total Staked',\n\n            'available_tokens_title': 'Available Balance',\n            'staked_tokens_title': 'Staked Balance',\n\n            'staked_tokens_validator_label': 'By:',\n\n\n            // Claim rewards\n            'claim_rewards_page_title': 'Claimable Staking Reward',\n            'claim_rewards_title': 'Claim Rewards',\n            'claim_rewards_not_enought': 'You don’t have enough {denom} to pay Fee',\n\n\n            // Claim confirm\n            'calim_confirm_title': 'Confirm transction',\n\n\n            // Stake\n            'stake_page_title': 'Stake',\n            'stake_confirm_page_title': 'Confirm',\n\n            'stake_current_staked_label': 'Token:',\n            'stake_APR_label': 'APR',\n            'stake_validator_label': 'Select validator:',\n            'stake_amount_label': 'Amount:',\n            'stake_unbonding_period_label': 'Unbonding Period:',\n            'stake_available_label': 'Available',\n            'stake_staked_label': 'Total Staked',\n\n            'stake_unbonding_time_unit': 'days',\n\n            'stake_validator_placeholder': 'Choose your validator',\n\n            'stake_confirm_voting_power': 'of voting power',\n            'stake_confirm_token_label': 'Token:',\n            'stake_confirm_amount_label': 'Amount:',\n            'stake_confirm_daily_profit_label': 'Daily profit:',\n            'stake_confirm_commission_label': 'Commission:',\n            'stake_confirm_unbonding_period_label': 'Unbonding Period:',\n            'stake_confirm_fee_label': 'Fee:',\n\n\n            // Unstake\n            'unstake_page_title': 'Unstake',\n            'unstake_confirm_page_title': 'Confirm',\n\n\n            // Unstaking tokens\n            'unstaking_tokens_title': 'Unstaking process',\n            'unstaking_tokens_label': 'Unstaking in progress:',\n            'unstaking_tokens_count_label': 'Unstakings:',\n            'unstaking_tokens_finish_label': 'Available in:',\n\n            'unstaking_tokens_finish_days': 'Days',\n            'unstaking_tokens_finish_day': 'Day',\n\n\n            // Send\n            'send_page_title': 'Send',\n            'send_amount_label': 'Amount:',\n            'send_address_label': 'Address:',\n\n\n            // Receive\n            'receive_page_title': 'Receive',\n            'receive_amount_title': 'Choose your amount',\n            'receive_amount_label': 'Amount:',\n\n\n            // Redelegate\n            'redelegate_page_title': 'Switch validator',\n            'redelegate_confirm_page_title': 'Confirm',\n            'redelegate_validator_from_label': 'From:',\n            'redelegate_validator_to_label': 'To:',\n            'redelegate_confirm_token_label': 'Token:',\n            'redelegate_confirm_amount_label': 'Amount:',\n\n\n            // Tx warning\n            'tx_warning_title': 'Warning',\n            'tx_warning_desc': \"You can still try to make the transaction, but since you don't have enough tokens for gas, it may fail, or it might still go through\",\n\n\n            // Validators\n            'validators_page_title': 'Validators:',\n            'validatoes_staked_label': 'Staked:',\n            'validatoes_availabel_label': 'Availabel:',\n\n\n            // Stats\n            'stats_title': 'Stats',\n            'stats_token_label': 'Token:',\n            'stats_availabel_label': 'Availabel:',\n            'stats_staked_label': 'Staked:',\n            'stats_personal_apr_label': 'Personal APR:',\n            'stats_daily_profit_label': 'Est. daily profit:',\n\n\n            // Redelegations\n            'redelegations_title': 'Active redelegations',\n\n            'redelegations_finish_days': 'Days',\n            'redelegations_finish_day': 'Day',\n\n\n            // Tokens\n            'tokens_page_title': 'Tokens:',\n\n\n            // Tx fee\n            'tx_fee_label': 'Tx Fee:',\n\n\n            // Tx fee modal\n            'tx_fee_modal_title': 'Fee Options',\n\n            'tx_fee_fee_tier_label': 'Fee tier',\n            'tx_fee_fee_token_label': 'Fee Token:',\n            'tx_fee_gas_adjustment_label': 'Gas Adjustment:',\n            'tx_fee_gas_amount_label': 'Gas Amount',\n\n            'tx_fee_remember_label': 'Remember my choise',\n            'tx_fee_auto_label': 'Auto',\n\n            'tx_fee_low_label': 'Low',\n            'tx_fee_average_label': 'Average',\n            'tx_fee_high_label': 'High',\n\n\n            // Transaction info\n            'details_label': 'Details:',\n            'memo_label': 'Memo:',\n\n\n            // Sign transaction fee\n            'sign_tx_title': 'Sign transaction',\n\n            'sign_tx_error_title': 'Incorrect pin!',\n            'sign_tx_error_desc': 'Idi nahuj user, ti zablokirovan v blockchaine, prishli sms 4toby razblokirovat Idi nahuj user, ti zablokirovan v blockchaine, prishli sms 4toby razblokirovat Idi nahuj user, ti zablokirovan v blockchaine, prishli sms 4toby razblokirovat',\n\n\n            // Search\n            'search_placeholder': 'Search...',\n            'search_empty': 'Token not found...',\n            'search_empty_validator': 'Validator not found...',\n\n\n            // Notifications\n            'notification_copied_title': 'Copied to clipboard',\n            'notification_tx_pending_title': 'Transaction is pending',\n            'notification_tx_success_title': 'Success',\n            'notification_tx_error_title': 'Error:',\n            'notification_error_title': 'Something went wrong, try again later',\n\n            'notification_explorer_link': 'Explorer',\n\n\n            // Buttons\n            'btn_create_wallet': 'Create new wallet',\n            'btn_import_wallet': 'Import wallet',\n            'btn_import_existing_wallet': 'Import an existing wallet',\n            'btn_show': 'Show',\n            'btn_next': 'Next',\n            'btn_copy': 'Copy to clipboard',\n            'btn_copy_small': 'Copy',\n            'btn_join': 'Join',\n            'btn_biometric': 'Turn on biometric security',\n            'btn_biometric2': 'Use biometric',\n            'btn_login': 'Log in',\n            'btn_send': 'Send',\n            'btn_receive': 'Receive',\n            'btn_stake': 'Earn',\n            'btn_confirm_stake': 'Confirm Staking',\n            'btn_confirm_unstake': 'Confirm Unstake',\n            'btn_confirm_redelegate': 'Confirm',\n            'btn_unstake': 'Unstake',\n            'btn_redelegate': 'Switch validator',\n            'btn_claim': 'Claim',\n            'btn_approve': 'Approve',\n            'btn_json': 'View JSON',\n            'btn_close': 'Close',\n            'btn_sign': 'Sign',\n            'btn_understood': 'Understood',\n            'btn_waiting_tx': 'Waiting tx',\n            'btn_MAX': 'MAX',\n            'btn_cancel': 'Cancel',\n            'btn_amount': 'Amount',\n            'btn_share': 'Share',\n            'btn_accept': 'Accept',\n\n\n            'notification_tx_error_2': \"tx parse error\",\n            'notification_tx_error_3': \"invalid sequence\",\n            'notification_tx_error_4': \"unauthorized\",\n            'notification_tx_error_5': \"insufficient funds\",\n            'notification_tx_error_6': \"unknown request\",\n            'notification_tx_error_7': \"invalid address\",\n            'notification_tx_error_8': \"invalid pubkey\",\n            'notification_tx_error_9': \"unknown address\",\n            'notification_tx_error_10': \"invalid coins\",\n            'notification_tx_error_11': \"Broadcasting transaction failed: out of gas try again and increase gas amount\",\n            'notification_tx_error_12': \"memo too large\",\n            'notification_tx_error_13': \"insufficient fee\",\n            'notification_tx_error_14': \"maximum number of signatures exceeded\",\n            'notification_tx_error_15': \"no signatures supplied\",\n            'notification_tx_error_16': \"failed to marshal JSON bytes\",\n            'notification_tx_error_17': \"failed to unmarshal JSON bytes\",\n            'notification_tx_error_18': \"invalid request\",\n            'notification_tx_error_19': \"tx already in mempool\",\n            'notification_tx_error_20': \"mempool is full\",\n            'notification_tx_error_21': \"tx too large\",\n            'notification_tx_error_22': \"key not found\",\n            'notification_tx_error_23': \"invalid account password\",\n            'notification_tx_error_24': \"tx intended signer does not match the given signer\",\n            'notification_tx_error_25': \"invalid gas adjustment\",\n            'notification_tx_error_26': \"invalid height\",\n            'notification_tx_error_27': \"invalid version\",\n            'notification_tx_error_28': \"invalid chain-id\",\n            'notification_tx_error_29': \"invalid type\",\n            'notification_tx_error_30': \"tx timeout height\",\n            'notification_tx_error_31': \"unknown extension options\",\n            'notification_tx_error_32': \"incorrect account sequence\",\n            'notification_tx_error_33': \"failed packing protobuf message to Any\",\n            'notification_tx_error_34': \"failed unpacking protobuf message from Any\",\n            'notification_tx_error_35': \"internal logic error\",\n            'notification_tx_error_36': \"conflict\",\n            'notification_tx_error_37': \"feature not supported\",\n            'notification_tx_error_38': \"not found\",\n            'notification_tx_error_39': \"Internal IO error\",\n            'notification_tx_error_40': \"error in app.toml\",\n            'notification_tx_error_41': \"invalid gas limit\",\n\n            'notification_tx_error_rejected': \"The transaction has been rejected\",\n        }\n    }\n}","import { createI18n } from 'vue-i18n'\nimport VueI18nMessages from '../locale/messages'\n\n\nconst i18n = createI18n({\n    locale: 'en',\n    fallbackLocale: 'en',\n    messages: VueI18nMessages\n})\n\n\nexport default i18n","<template>\n    <!-- Main component -->\n    <component :is=\"layout\" />\n\n    <!-- Virtual keybord overlay -->\n    <div class=\"virtual_keybord_overlay\" @click.prevent=\"emitter.emit('hide_keyboard')\"></div>\n\n    <!-- Notifications -->\n    <notifications position=\"top left\" group=\"default\" width=\"100%\" animation-type=\"velocity\" :animation=\"notificationAnimation\"\n        @start=\"notificationsOnStart($event)\"\n        @destroy=\"notificationsOnDestroy()\"\n    >\n        <template #body=\"props\">\n            <div class=\"notification\" :class=\"{\n                pending: props.item.type == 'pending',\n                success: props.item.type == 'success',\n                error: props.item.type == 'error',\n                collapsible: props.item.data.isCollapsible\n            }\">\n                <!-- Notifications icon -->\n                <div class=\"icon\" v-if=\"props.item.type == 'copied'\">\n                    <svg><use xlink:href=\"@/assets/sprite.svg#ic_notification_copied\"></use></svg>\n                </div>\n\n                <!-- Notifications icon -->\n                <div class=\"icon\" v-if=\"props.item.type == 'pending'\">\n                    <div class=\"loader\"></div>\n                </div>\n\n                <!-- Notifications icon -->\n                <div class=\"icon\" v-if=\"props.item.type == 'success'\">\n                    <svg><use xlink:href=\"@/assets/sprite.svg#ic_notification_success\"></use></svg>\n                </div>\n\n                <!-- Notifications icon -->\n                <div class=\"icon\" v-if=\"props.item.type == 'error'\">\n                    <svg><use xlink:href=\"@/assets/sprite.svg#ic_notification_error\"></use></svg>\n                </div>\n\n                <div>\n                    <!-- Notifications title -->\n                    <div class=\"title\">\n                        {{ props.item.title }} {{ props.item.text }}\n                    </div>\n\n                    <!-- Notifications explorer link -->\n                    <div class=\"explorer\" v-if=\"props.item.data.explorer_link\">\n                        <a :href=\"props.item.data.explorer_link\" target=\"_blank\" rel=\"noopener nofollow\">\n                            {{ $t('message.notification_explorer_link') }}\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </template>\n    </notifications>\n</template>\n\n\n<script setup>\n    import { ref, onBeforeMount, inject, watch, computed, onMounted } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { useRoute, useRouter } from 'vue-router'\n    import { useTitle } from '@vueuse/core'\n\n\n    const store = useGlobalStore(),\n        i18n = inject('i18n'),\n        router = useRouter(),\n        route = useRoute(),\n        emitter = inject('emitter'),\n        title = useTitle(),\n        layout = computed(() => route.meta.layout || 'default-layout'),\n        notificationTimeout = ref(null),\n        notificationAnimation = {\n            enter: { translateY: '0%' },\n            leave: { translateY: '-100%' }\n        }\n\n\n    onBeforeMount(() => {\n        // Set page title\n        title.value = i18n.global.t('message.page_title')\n    })\n\n\n    onMounted(async () => {\n        if (window.Telegram && window.Telegram.WebApp) {\n            // Initialize the mini-application\n            await Telegram.WebApp.ready()\n\n            // Call the expand method to open to full height\n            Telegram.WebApp.expand()\n\n            // Set header color\n            Telegram.WebApp.setHeaderColor('#5b3895')\n\n            // Show progress\n            Telegram.WebApp.MainButton.showProgress(true)\n\n            // Disable vertical swipes\n            Telegram.WebApp.disableVerticalSwipes()\n\n            // Init biometric\n            Telegram.WebApp.BiometricManager.init()\n\n            // Qr code received\n            Telegram.WebApp.onEvent('qrTextReceived', data => {\n                // Close QR popup\n                Telegram.WebApp.closeScanQrPopup()\n\n                // Parse data\n                let parsedData = data.data.split('|')\n\n                // Redirect to send\n                redirectToSend(parsedData)\n            })\n        }\n    })\n\n\n    // Redirect to send\n    function redirectToSend(parsedData) {\n        // Change network\n        if (store.currentNetwork !== parsedData[1]) {\n            // Set new current network\n            store.setCurrentNetwork(parsedData[1])\n\n            // Redirect\n            watch(computed(() => store.isInitialized), () => {\n                if (store.isInitialized && parsedData[0] == 'send') {\n                    router.push({\n                        path: '/account/send',\n                        query: {\n                            denom: store.networks[store.currentNetwork].denom,\n                            address: parsedData[2],\n                            amount: parsedData[3]\n                        }\n                    })\n                }\n            })\n        } else {\n            // Redirect\n            if (parsedData[0] == 'send') {\n                router.push({\n                    path: '/account/send',\n                    query: {\n                        denom: store.networks[store.currentNetwork].denom,\n                        address: parsedData[2],\n                        amount: parsedData[3]\n                    }\n                })\n            }\n        }\n    }\n\n\n    // Notifications start event\n    function notificationsOnStart(params) {\n        // Is collapsible\n        if (params.data.isCollapsible) {\n            notificationTimeout.value = setTimeout(() => {\n                // Show collapsible notification\n                let notification = document.querySelector('.notification.collapsible')\n\n                if (notification) {\n                    // Add notification class\n                    notification.classList.add('small')\n                }\n\n                // Clear timeout\n                notificationTimeout.value = null\n            }, store.notificationsCollapsingDelay)\n        }\n    }\n\n\n    // Notifications destroy event\n    function notificationsOnDestroy() {\n        // Clear timeout\n        notificationTimeout.value = null\n    }\n\n\n    // Event \"show_keyboard\"\n    emitter.on('show_keyboard', (field = null) => {\n        setTimeout(() => {\n            if (field) {\n                // Scroll to field\n                field.scrollIntoView({ behavior: 'smooth' })\n            }\n\n            // Overlay\n            let overlay = document.querySelector('.virtual_keybord_overlay')\n\n            if (overlay) {\n                // Show overlay\n                overlay.style.display = 'block'\n            }\n        }, 50)\n    })\n\n\n    // Event \"hide_keyboard\"\n    emitter.on('hide_keyboard', () => {\n        setTimeout(() => {\n            // Overlay\n            let overlay = document.querySelector('.virtual_keybord_overlay')\n\n            if (overlay) {\n                // Hide overlay\n                overlay.style.display = 'none'\n            }\n        }, 10)\n    })\n\n\n    // Event \"show_collapsible_notification\"\n    emitter.on('show_collapsible_notification', () => {\n        if (!notificationTimeout.value) {\n            let notification = document.querySelector('.notification.collapsible')\n\n            if (notification) {\n                // Show collapsible notification\n                notification.classList.remove('small')\n\n                // Hide collapsible notification\n                notificationTimeout.value = setTimeout(() => {\n                    if (notification) {\n                        // Add notification class\n                        notification.classList.add('small')\n                    }\n\n                    // Clear timeout\n                    notificationTimeout.value = null\n                }, store.notificationsCollapsingDelay)\n            }\n        }\n    })\n</script>","import script from \"./App.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./App.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <div class=\"main\">\n        <router-view v-slot=\"{ Component }\">\n            <component :is=\"Component\" />\n        </router-view>\n    </div>\n</template>\n","import { render } from \"./Default.vue?vue&type=template&id=66ab4ff8\"\nconst script = {}\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n    <div class=\"main\">\n        <router-view v-slot=\"{ Component }\">\n            <component :is=\"Component\" />\n        </router-view>\n    </div>\n</template>\n\n\n<script setup>\n    import { ref, inject, onMounted, onUnmounted } from 'vue'\n    import { useGlobalStore } from '@/store'\n\n\n    const store = useGlobalStore(),\n        emitter = inject('emitter'),\n        startY = ref(0),\n        isPulling = ref(false),\n        threshold = 70,\n        hasUpdated = ref(false)\n\n\n    onMounted(() => {\n        // Overscroll\n        window.addEventListener('touchstart', handleTouchStart, { passive: false })\n        window.addEventListener('touchmove', handleTouchMove, { passive: false })\n        window.addEventListener('touchend', handleTouchEnd, { passive: false })\n    })\n\n\n    onUnmounted(() => {\n        window.removeEventListener('touchstart', handleTouchStart, { passive: false })\n        window.removeEventListener('touchmove', handleTouchMove, { passive: false })\n        window.removeEventListener('touchend', handleTouchEnd, { passive: false })\n    })\n\n\n    // Handle touch start\n    function handleTouchStart(e) {\n        if (window.scrollY === 0) {\n            startY.value = e.touches[0].pageY\n            isPulling.value = true\n            hasUpdated.value = false\n        }\n    }\n\n\n    // Handle touch move\n    function handleTouchMove(e) {\n        if (isPulling.value && (store.networks[store.currentNetwork].currentTxHash || store.forcedUnlock)) {\n            // Event \"show_collapsible_notification\"\n            emitter.emit('show_collapsible_notification')\n\n            return\n        }\n\n        if (!isPulling.value || hasUpdated.value) return\n\n        let currentY = e.touches[0].pageY,\n            distance = currentY - startY.value\n\n\n        if (distance > 0 && distance >= threshold) {\n            e.preventDefault()\n            e.stopPropagation()\n\n            // Close any modal\n            if (store.isAnyModalOpen) {\n                // Set event \"close_any_modal\"\n                emitter.emit('close_any_modal')\n\n                isPulling.value = false\n\n                return\n            }\n\n            // Updating flag\n            hasUpdated.value = true\n\n            // Top loader\n            let account = document.querySelector('.account_page')\n\n            if (account) {\n                account.classList.add('updating')\n\n                setTimeout(() => account.classList.remove('updating'), 500)\n\n                // Update all balances\n                store.updateAllBalances()\n            }\n        }\n    }\n\n\n    // Handle touch end\n    function handleTouchEnd(e) {\n        isPulling.value = false\n    }\n</script>\n","import script from \"./Account.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Account.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { createRouter, createWebHistory } from 'vue-router'\nimport { DBgetData } from '@/utils/db'\nimport { useGlobalStore } from '@/store'\n\nimport defaultLayout from '@/layouts/Default.vue'\nimport accountLayout from '@/layouts/Account.vue'\n\n\nconst routes = [\n    {\n\t\tpath: '/',\n\t\tname: 'MainPage',\n\t\tcomponent: () => import('../views/IndexPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['register']\n\t\t}\n\t},\n\t{\n\t\tpath: '/create_wallet',\n\t\tname: 'CreateWallet',\n\t\tcomponent: () => import('../views/CreateWalletPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['register']\n\t\t}\n\t},\n\t{\n\t\tpath: '/confirm_wallet',\n\t\tname: 'CreateWalletConfirm',\n\t\tcomponent: () => import('../views/ConfirmWalletPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['register']\n\t\t}\n\t},\n\t{\n\t\tpath: '/create_pin',\n\t\tname: 'CreatePin',\n\t\tcomponent: () => import('../views/CreatePinPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['register']\n\t\t}\n\t},\n\t{\n\t\tpath: '/wallet_created',\n\t\tname: 'WalletCreated',\n\t\tcomponent: () => import('../views/WalletCreatedPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['not_register']\n\t\t}\n\t},\n\t{\n\t\tpath: '/import_wallet',\n\t\tname: 'ImportWallet',\n\t\tcomponent: () => import('../views/ImportWalletPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['register']\n\t\t}\n\t},\n\t{\n\t\tpath: '/auth',\n\t\tname: 'Auth',\n\t\tcomponent: () => import('../views/AuthPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['not_register', 'authorized']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account',\n\t\tname: 'Account',\n\t\tcomponent: () => import('../views/AccountPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/claim_confirm',\n\t\tname: 'ClaimConfirm',\n\t\tcomponent: () => import('../views/ClaimConfirmPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/stake',\n\t\tname: 'Stake',\n\t\tcomponent: () => import('../views/Stake.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/unstake',\n\t\tname: 'Unstake',\n\t\tcomponent: () => import('../views/Unstake.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/redelegate',\n\t\tname: 'Redelegate',\n\t\tcomponent: () => import('../views/Redelegate.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/receive',\n\t\tname: 'Receive',\n\t\tcomponent: () => import('../views/Receive.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/send',\n\t\tname: 'Send',\n\t\tcomponent: () => import('../views/Send.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized']\n\t\t}\n\t},\n]\n\n\nconst router = createRouter({\n    history: createWebHistory(),\n    routes\n})\n\n\nrouter.beforeResolve(async (to, from, next) => {\n\tlet store = useGlobalStore(),\n\t\tisRegister = await DBgetData('wallet', 'isRegister')\n\n\t// Check access\n\tto.matched.some(record => {\n\t\tlet access = record.meta.accessDenied\n\n\t\tif(access.length) {\n\t\t\t// Not register\n\t\t\tif(access.includes('not_register') && !isRegister) {\n\t\t\t\tnext({ name: 'MainPage' })\n\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\t// Register\n\t\t\telse if(access.includes('register') && isRegister) {\n\t\t\t\tnext({ name: 'Auth' })\n\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\t// Not authorized\n\t\t\telse if(access.includes('not_authorized') && !store.isAuthorized) {\n\t\t\t\tnext({ name: 'Auth' })\n\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\t// Authorized\n\t\t\telse if(access.includes('authorized') && store.isAuthorized) {\n\t\t\t\tnext({ name: 'Account' })\n\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tnext()\n\t\t\t}\n\t\t}\n\t})\n})\n\n\nexport default router\n","export const vFocus = {\n    mounted(el) {\n        el.focus()\n    }\n}","export const vParallax = {\n    mounted(el) {\n        window.addEventListener('scroll', function () {\n            if (window.scrollY <= el.offsetHeight) {\n                el.style.opacity = (1 - window.scrollY / (el.offsetHeight * 0.6))\n\n                el.style.transform = `translateY(-${(window.scrollY / el.offsetHeight) * 0.6 * 100}%)`\n            }\n        })\n    }\n}","export const vOdometer = {\n    mounted(el, number) {\n        if (number) {\n            // Get array\n            let numberArr = number.value.toFixed(10).split('')\n\n            // Generate base html\n            el.innerHTML = numberArr.map(char => `\n                <div class=\"digit\">\n                    <span class=\"old\">${char}</span>\n                </div>\n            `).join('')\n        }\n    },\n\n    updated(el, number) {\n        // Get array\n        let numberArr = number.value.toFixed(10).split(''),\n            oldNumberArr = number.oldValue?.toFixed(10).split('') || [],\n            maxLength = Math.max(numberArr.length, oldNumberArr.length),\n            html = '',\n            mismatchIndex = null,\n            mismatchCount = 0,\n            animationDuration = 1500,\n            animationDelay = 50\n\n\n        // Pad arrays with empty strings to maximum length\n        numberArr = numberArr.concat(Array(maxLength - numberArr.length).fill(''))\n        oldNumberArr = oldNumberArr.concat(Array(maxLength - oldNumberArr.length).fill(''))\n\n\n        // Generate html\n        el.innerHTML = numberArr.map((char, i) => {\n            // Get mismatch\n            if (mismatchIndex === null && char !== oldNumberArr[i]) {\n                mismatchIndex = i\n                mismatchCount = maxLength - i\n                animationDuration = animationDuration - animationDelay * mismatchCount\n            }\n\n            // Calc animation\n            let duration = 0\n\n            if (mismatchIndex !== null) {\n                duration = animationDuration / mismatchCount / 1000\n            }\n\n            html += `<div class=\"digit ${mismatchIndex !== null && i >= mismatchIndex ? 'animate' : ''}\">\n                        <span class=\"new\" style=\"animation-duration: ${parseFloat(duration.toFixed(2))}s; animation-delay: ${animationDelay * (i - mismatchIndex) / 1000}s;\">\n                            ${char}\n                        </span>\n\n                        <span class=\"old\" style=\"animation-duration: ${parseFloat(duration.toFixed(2))}s; animation-delay: ${animationDelay * (i - mismatchIndex) / 1000}s;\">\n                            ${oldNumberArr[i]}\n                        </span>\n                    </div>`\n        })\n\n\n        // Inner html\n        el.innerHTML = html\n    }\n}","import { createApp } from 'vue'\nimport { createPinia } from 'pinia'\n\nimport App from './App.vue'\nimport router from './router'\nimport i18n from './locale'\nimport mitt from 'mitt'\nimport Notifications from '@kyvg/vue3-notification'\nimport velocity from 'velocity-animate'\nimport { register } from 'swiper/element/bundle'\nimport VueCountdown from '@chenfengyuan/vue-countdown'\n\nimport { vFocus } from './directives/v-focus'\nimport { vParallax } from './directives/v-parallax'\nimport { vOdometer } from './directives/v-odometer'\n\n\n// Events\nconst emitter = mitt()\n\n\n// Create App\nconst app = createApp(App)\n\n\n// Pinia\nconst pinia = createPinia()\n\n\n// Vue use\napp.use(pinia)\napp.use(router)\napp.use(i18n)\napp.use(Notifications, { velocity })\n\n\n// Vue provide\napp.provide('i18n', i18n)\napp.provide('emitter', emitter)\n\n\n// Directives\napp.directive('focus', vFocus)\napp.directive('parallax', vParallax)\napp.directive('odometer', vOdometer)\n\n\n// Swiper - register\nregister()\n\n\n// VueCountdown\napp.component(VueCountdown.name, VueCountdown)\n\n\n// Mount\napp.mount('#app')\n","const network = {\n    name: 'Cosmos Hub',\n    lcd_api: 'https://lcd.cosmoshub-4.bronbro.io',\n    rpc_api: 'https://rpc.cosmoshub-4.bronbro.io',\n    websocket_url: 'wss://rpc.cosmoshub-4.bronbro.io:443/websocket',\n\n    denom: 'uatom',\n    token_name: 'ATOM',\n    chain_id: 'cosmoshub-4',\n    prefix: 'cosmos',\n    explorer_link: 'https://www.mintscan.io/cosmos/tx/{tx_hash}',\n    alias: 'cosmoshub',\n    exponent: 6,\n    gas_adjustment: 1.6,\n    address_length: 20,\n    gas_amount_send: 100000,\n    gas_amount_claim: 1000000,\n    gas_amount_stake: 500000,\n    gas_amount_unstake: 500000,\n    gas_amount_redelegate: 1000000\n}\n\nexport default network","const network = {\n    name: 'Bostrom',\n    lcd_api: 'https://lcd.bostrom.bronbro.io',\n    rpc_api: 'https://rpc.bostrom.bronbro.io',\n    websocket_url: 'wss://rpc.bostrom.bronbro.io:443/websocket',\n\n    denom: 'boot',\n    token_name: 'BOOT',\n    chain_id: 'bostrom',\n    prefix: 'bostrom',\n    explorer_link: 'https://ping.pub/bostrom/tx/{tx_hash}',\n    alias: 'bostrom',\n    exponent: 0,\n    gas_adjustment: 1.3,\n    address_length: 20,\n    gas_amount_send: 300000,\n    gas_amount_claim: 300000,\n    gas_amount_stake: 250000,\n    gas_amount_unstake: 250000,\n    gas_amount_redelegate: 300000\n}\n\nexport default network","const network = {\n    name: 'LocalBostrom',\n    lcd_api: 'https://lcd.uni-3.cybernode.ai',\n    rpc_api: 'https://rpc.uni-3.cybernode.ai',\n    websocket_url: 'wss://rpc.uni-3.cybernode.ai:443/websocket',\n\n    denom: 'boot',\n    token_name: 'BOOT',\n    chain_id: 'bostrom',\n    prefix: 'bostrom',\n    explorer_link: 'https://ping.pub/bostrom/tx/{tx_hash}',\n    alias: 'localbostrom',\n    exponent: 0,\n    gas_adjustment: 1.3,\n    address_length: 20,\n    gas_amount_send: 300000,\n    gas_amount_claim: 300000,\n    gas_amount_stake: 250000,\n    gas_amount_unstake: 250000,\n    gas_amount_redelegate: 300000\n}\n\nexport default network","import { defineStore } from 'pinia'\nimport { createSinger, denomTraces, hashDataWithKey, generateHMACKey, getPriceByDenom, getExplorerLink } from '@/utils'\nimport { chains, assets } from 'chain-registry'\nimport { DBaddData, DBgetData, DBclearData, DBgetMultipleData } from '@/utils/db'\nimport { useNotification } from '@kyvg/vue3-notification'\nimport i18n from '@/locale'\n\n\n// Networks\nimport cosmoshub from '@/store/networks/cosmoshub'\nimport bostrom from '@/store/networks/bostrom'\nimport localbostrom from '@/store/networks/localbostrom'\n\n\n// Networks additional options\nconst networksAdditionalOptions = {\n    signingClient: {},\n    websocket: null,\n    currentTxHash: null,\n    unbondingTime: 0,\n    totalBondedTokens: 0,\n    totalUnstakingTokens: 0,\n    isUnstakingCancelSupport: false\n}\n\n\n// Notifications\nconst notification = useNotification()\n\n\nexport const useGlobalStore = defineStore('global', {\n    state: () => ({\n        isInitialized: false,\n        isBalancesGot: false,\n        isStakedBalancesGot: false,\n        isRewardsGot: false,\n        isUnstakingBalancesGot: false,\n        isAuthorized: false,\n        isAnyModalOpen: false,\n\n        forcedUnlock: false,\n        authErrorLimit: 4,\n\n        currentNetwork: '',\n        currentAddress: '',\n        currentCurrency: '',\n        currentCurrencySymbol: '',\n        stakeCurrentValidator: null,\n        unstakeCurrentValidator: null,\n        redelegateValidatorFrom: null,\n        redelegateValidatorTo: null,\n\n        prices: [],\n        balances: [],\n        stakedBalances: [],\n        rewardsBalances: [],\n        unstakingBalances: [],\n        redelegations: [],\n\n        secret: null,\n        privateKey: null,\n        notificationsCollapsingDelay: 2000,\n\n        TxFee: {\n            balance: {},\n            currentLevel: 'average',\n            userGasAmount: 0,\n            gasAmount: 0,\n            isRemember: false,\n            isGasAdjustmentAuto: true,\n            isEnough: false\n        },\n\n        networks: {\n            cosmoshub: Object.assign(cosmoshub, networksAdditionalOptions),\n            bostrom: Object.assign(bostrom, networksAdditionalOptions),\n            localbostrom: Object.assign(localbostrom, networksAdditionalOptions)\n        },\n\n        formatableTokens: [\n            {\n                token_name: 'USD',\n                format_token_name: 'USDT',\n                exponent: 0\n            },\n            {\n                token_name: 'BTC',\n                format_token_name: 'WBTC',\n                exponent: 0\n            }\n        ]\n    }),\n\n\n    actions: {\n        // Init APP\n        async initApp() {\n            // Init status\n            this.isInitialized = false\n\n            // Forced unlock\n            this.forcedUnlock = false\n\n            // Reset data\n            this.currentAddress = ''\n\n            // Get DB data\n            let DBData = await this.getMultipleData(['secret', 'privateKey', 'currentCurrency', 'currentNetwork', 'TxFeeCurrentLevel', 'TxFeeIsRemember'])\n\n            // Set data from DB\n            this.secret = DBData.secret\n            this.privateKey = DBData.privateKey\n            this.currentCurrency = DBData.currentCurrency\n            this.currentNetwork = DBData.currentNetwork\n            this.TxFee.currentLevel = DBData.TxFeeCurrentLevel || 'average'\n            this.TxFee.isRemember = DBData.TxFeeIsRemember || false\n\n            try {\n                // Create singer\n                let signer = await createSinger()\n\n                this.currentAddress = signer.address\n                this.networks[this.currentNetwork].signingClient = signer.signingClient\n\n                // Set current currency symbol\n                switch (this.currentCurrency) {\n                    case 'BTC':\n                        // Set current currency symbol\n                        this.currentCurrencySymbol = 'BTC'\n                        break\n\n                    case 'ETH':\n                        // Set current currency symbol\n                        this.currentCurrencySymbol = 'ETH'\n                        break\n\n                    default:\n                        // Set current currency symbol\n                        this.currentCurrencySymbol = '$'\n                        break\n                }\n\n                // Get currencies price\n                await this.getCurrenciesPrice()\n\n                // Get APR for current network\n                this.getCurrentNetworkAPR()\n\n                // Connect to websocket\n                this.connectWebsocket()\n\n                // Is cosmos SDK version support unstaking cancel\n                this.networks[this.currentNetwork].isUnstakingCancelSupport = await this.isUnstakingCancelSupport()\n\n                // Wait balances\n                Promise.all([await this.getBalances(), await this.getStakedBalances()]).then(() => {\n                    // Init status\n                    this.isInitialized = true\n                })\n            } catch(error) {\n                console.log(error)\n\n                // Clean notifications\n                notification.notify({\n                    group: 'default',\n                    clean: true\n                })\n\n                // Show notification\n                notification.notify({\n                    group: 'default',\n                    speed: 200,\n                    duration: -100,\n                    title: i18n.global.t('message.notification_error_title'),\n                    type: 'error',\n                    data: {\n                        isCollapsible: true\n                    }\n                })\n\n                // Forced unlock\n                this.forcedUnlock = true\n            }\n        },\n\n\n        // Currencies price\n        async getCurrenciesPrice() {\n            try {\n                await fetch('https://rpc.bronbro.io/price_feed_api/tokens/')\n                    .then(response => response.json())\n                    .then(data => this.prices = data)\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Get APR for current network\n        async getCurrentNetworkAPR() {\n            try {\n                await fetch('https://rpc.bronbro.io/networks/')\n                    .then(response => response.json())\n                    .then(data => {\n                        data.infos.find(chain => {\n                            if (chain.denom == (this.networks[this.currentNetwork].token_name).toLowerCase()) {\n                                // Set network APR\n                                this.networks[this.currentNetwork].APR = chain.apr\n                            }\n                        })\n                    })\n            } catch (err) {\n                console.log(err)\n            }\n        },\n\n\n        // Get balances\n        async getBalances() {\n            // Balances status\n            this.isBalancesGot = false\n\n            // Request\n            this.balances = await this.networks[this.currentNetwork].signingClient.getAllBalances(this.currentAddress)\n\n            if (this.balances.length) {\n                // Get balance info\n                for (let balance of this.balances) {\n                    await this.getBalanceInfo(balance)\n                }\n\n                // Clear balances\n                this.balances = this.balances.filter(obj => obj.hasOwnProperty('exponent'))\n            }\n\n            // Balances status\n            this.isBalancesGot = true\n        },\n\n\n        // Get staked balances\n        async getStakedBalances() {\n            // Balances status\n            this.isStakedBalancesGot = false\n\n            // Request\n            try {\n                await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/delegations/${this.currentAddress}`)\n                    .then(response => response.json())\n                    .then(async data => {\n                        if (data.delegation_responses) {\n                            // Set data\n                            this.stakedBalances = data.delegation_responses\n\n                            for (let item of this.stakedBalances) {\n                                // Get balance info\n                                await this.getBalanceInfo(item.balance)\n\n                                // Get validator info\n                                await this.getValidatorInfo(item, item.delegation.validator_address)\n                            }\n\n                            // Clear balances\n                            this.stakedBalances = this.stakedBalances.filter(item => item.balance.hasOwnProperty('exponent'))\n                        }\n                    })\n\n                // Staked balances status\n                this.isStakedBalancesGot = true\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Get rewards\n        async getRewards() {\n            // Rewards status\n            this.isRewardsGot = false\n\n            // Request\n            try {\n                await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/distribution/v1beta1/delegators/${this.currentAddress}/rewards`)\n                    .then(response => response.json())\n                    .then(async data => {\n                        if (data.total.length) {\n                            // Set data\n                            this.rewardsBalances = data.total\n\n                            for (let balance of this.rewardsBalances) {\n                                // Get balance info\n                                await this.getBalanceInfo(balance)\n                            }\n\n                            // Clear rewards\n                            this.rewardsBalances = this.rewardsBalances.filter(balance => balance.hasOwnProperty('exponent'))\n\n                            // Filter rewards\n                            this.rewardsBalances = this.rewardsBalances.filter(balance => balance.chain_info.chain_id == this.networks[this.currentNetwork].chain_id)\n                        } else {\n                            // Clear data\n                            this.rewardsBalances = []\n                        }\n                    })\n\n                // Rewards status\n                this.isRewardsGot = true\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Get unstaking balances\n        async getUnstakingBalances () {\n            // Unstaking balances status\n            this.isUnstakingBalancesGot = false\n\n            // Reset data\n            this.unstakingBalances = []\n            this.networks[this.currentNetwork].totalUnstakingTokens = 0\n\n            // Request\n            try {\n                await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/delegators/${this.currentAddress}/unbonding_delegations`)\n                    .then(response => response.json())\n                    .then(async data => {\n                        // Set data\n                        this.unstakingBalances = data.unbonding_responses\n\n                        for (let item of this.unstakingBalances) {\n                            // Calc total unstaking tokens\n                            item.entries.forEach(entry => this.networks[this.currentNetwork].totalUnstakingTokens += parseInt(entry.balance))\n\n                            // Get validator info\n                            await this.getValidatorInfo(item, item.validator_address)\n                        }\n                    })\n\n                // Unstaking balances status\n                this.isUnstakingBalancesGot = true\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Get redelegations\n        async getRedelegations() {\n            // Request\n            try {\n                await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/delegators/${this.currentAddress}/redelegations`)\n                    .then(response => response.json())\n                    .then(async data => {\n                        // Set data\n                        this.redelegations = data.redelegation_responses\n                    })\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Get balance info\n        async getBalanceInfo(balance) {\n            // Denom traces\n            let { base_denom } = await denomTraces(balance.denom, this.currentNetwork)\n\n            // Get (token info/chain name) from assets\n            for (let asset of assets) {\n                // Exceptions\n                switch (base_denom) {\n                    case 'uusdc':\n                        var currentAsset = assets.find(el => el.chain_name === 'noble')\n                        break;\n\n                    default:\n                        var currentAsset = asset\n                        break;\n                }\n\n                // Token info\n                let tokenInfo = currentAsset.assets.find(token => token.base === base_denom)\n\n                if (tokenInfo) {\n                    // Set data\n                    balance.token_info = tokenInfo\n                    balance.chain_name = currentAsset.chain_name\n\n                    break\n                }\n            }\n\n            // Format denom exponent\n            let formatableToken = this.formatableTokens.find(el => el.token_name === balance.token_info.base.toUpperCase())\n\n            // Set exponent for denom\n            formatableToken\n                ? balance.exponent = formatableToken.exponent\n                : balance.exponent = balance.token_info.denom_units[1]?.exponent || 0\n\n            // Get chain info\n            balance.chain_info = chains.find(el => el.chain_name === balance.chain_name)\n\n            // Get price\n            balance.price = getPriceByDenom(balance.token_info.symbol)\n        },\n\n\n        // Has native token\n        hasNativeToken() {\n            return this.balances.some(balance => balance.denom == this.networks[this.currentNetwork].denom)\n        },\n\n\n        // Get validator info\n        async getValidatorInfo(item, validator_address) {\n            try {\n                await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/validators/${validator_address}`)\n                    .then(res => res.json())\n                    .then(response => {\n                        // Set data\n                        item.validator_info = response.validator\n                    })\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Get secret from DB\n        async getSecret() {\n            // Get from DB and save in store\n            this.secret = await DBgetData('wallet', 'secret')\n        },\n\n\n        // Set secret\n        async setSecret(secret) {\n            // Save in store\n            this.secret = secret\n\n            // Save in DB\n            await DBaddData('wallet', [\n                ['secret', secret]\n            ])\n        },\n\n\n        // Set private key\n        async setPrivateKey(privateKey) {\n            // Save in store\n            this.privateKey = privateKey\n\n            // Save in DB\n            await DBaddData('wallet', [\n                ['privateKey', privateKey]\n            ])\n        },\n\n\n        // Set current network\n        setCurrentNetwork(chain) {\n            // Save in DB\n            DBaddData('wallet', [\n                ['currentNetwork', chain]\n            ])\n\n            // Update current network\n            this.currentNetwork = chain\n        },\n\n\n        // Create wallet\n        async createWallet({ pinCode, walletName, isBiometricEnabled }) {\n            // Generate HMAC key\n            let hmacKey = await generateHMACKey()\n\n            // Save in DB\n            await DBaddData('wallet', [\n                ['hmacKey', hmacKey],\n                ['pin', await hashDataWithKey(pinCode.join(''), hmacKey)],\n                ['name', walletName],\n                ['isRegister', true],\n                ['isBiometric', isBiometricEnabled],\n                ['authErrorLimit', this.authErrorLimit],\n                ['currentNetwork', 'cosmoshub'],\n                ['currentCurrency', 'USD']\n            ])\n\n            // Set authorized status\n            this.isAuthorized = true\n        },\n\n\n        // Get data from DB\n        async getMultipleData(requestingData) {\n            return await DBgetMultipleData('wallet', requestingData)\n        },\n\n\n        // Update auth error limit\n        async updateUserAuthErrorLimit(limit) {\n            await DBaddData('wallet', [['authErrorLimit', limit]])\n        },\n\n\n        // Update TxFee info\n        async updateTxFeeInfo() {\n            await DBaddData('wallet', [\n                ['TxFeeCurrentLevel', this.TxFee.currentLevel],\n                ['TxFeeIsRemember', this.TxFee.isRemember]\n            ])\n        },\n\n\n        // Update current currency\n        async updateCurrentCurrency() {\n            switch (this.currentCurrency) {\n                case 'BTC':\n                    // Set current currency\n                    this.currentCurrency = 'ETH'\n\n                    // Set current currency symbol\n                    this.currentCurrencySymbol = 'ETH'\n\n                    // Update in DB\n                    DBaddData('wallet', [['currentCurrency', 'ETH']])\n\n                    break;\n\n                case 'ETH':\n                    // Set current currency\n                    this.currentCurrency = 'USD'\n\n                    // Set current currency symbol\n                    this.currentCurrencySymbol = '$'\n\n                    // Update in DB\n                    DBaddData('wallet', [['currentCurrency', 'USD']])\n\n                    break;\n\n                default:\n                    // Set current currency\n                    this.currentCurrency = 'BTC'\n\n                    // Set current currency symbol\n                    this.currentCurrencySymbol = 'BTC'\n\n                    // Update in DB\n                    DBaddData('wallet', [['currentCurrency', 'BTC']])\n\n                    break;\n            }\n        },\n\n\n        // Connect to websocket\n        connectWebsocket() {\n            // Close previous connections\n            Object.values(this.networks).forEach(network => {\n                if (network.websocket) {\n                    // Remove onmessage listener\n                    network.websocket.onmessage = null\n\n                    // Close connection\n                    network.websocket.close()\n                }\n            })\n\n            // Connect\n            this.networks[this.currentNetwork].websocket = new WebSocket(this.networks[this.currentNetwork].websocket_url)\n\n            // Listening events\n            this.networks[this.currentNetwork].websocket.onopen = () => {\n                // Event Tx with recipient\n                this.networks[this.currentNetwork].websocket.send(JSON.stringify({\n                    jsonrpc: '2.0',\n                    method: 'subscribe',\n                    id: '1',\n                    params: {\n                        query: `tm.event='Tx' AND transfer.recipient='${this.currentAddress}'`\n                    }\n                }))\n            }\n\n\n            // WSS message event\n            this.networks[this.currentNetwork].websocket.onmessage = async msg => {\n                let parsedMsg = JSON.parse(msg.data)\n\n                // If the result object is not empty\n                if (Object.keys(parsedMsg.result).length) {\n                    // User recipient\n                    if (parsedMsg.id == '1') {\n                        // Update all balances\n                        this.updateAllBalances()\n\n                        // Reset Tx Fee\n                        this.resetTxFee()\n                    }\n\n                    // Transaction\n                    if (parsedMsg.id == '2') {\n                        // Check Tx result\n                        this.checkTxResult()\n                    }\n                }\n            }\n        },\n\n\n        // Set current balance\n        TxFeeGetCurrentBalance(baseDenom) {\n            // Set data\n            this.TxFee.balance = this.balances.find(balance => balance.denom === baseDenom) || { amount: 0 }\n        },\n\n\n        // Get minimum gas price\n        TxFeeSetGasPrices() {\n            // Get chain info\n            let chain = chains.find(el => el.chain_id === this.networks[this.currentNetwork].chain_id)\n\n            // Set data\n            this.TxFee.lowPrice = chain.fees.fee_tokens[0].fixed_min_gas_price ? chain.fees.fee_tokens[0].fixed_min_gas_price * 1.1 : chain.fees.fee_tokens[0].low_gas_price\n            this.TxFee.averagePrice = this.TxFee.lowPrice * 1.15\n            this.TxFee.highPrice = this.TxFee.lowPrice * 1.30\n        },\n\n\n        // Enough status\n        TxFeeIsEnough() {\n            // Set status\n            if (this.isBalancesGot) {\n                this.TxFee.isEnough = this.TxFee.balance.amount > this.TxFee.userGasAmount * this.TxFee[`${this.TxFee.currentLevel}Price`]\n            }\n        },\n\n\n        // Set listener current tx\n        setListenerCurrentTx() {\n            // Event Tx with hash\n            this.networks[this.currentNetwork].websocket.send(JSON.stringify({\n                jsonrpc: '2.0',\n                method: 'subscribe',\n                id: '2',\n                params: {\n                    query: `tm.event='Tx' AND tx.hash='${(this.networks[this.currentNetwork].currentTxHash).toUpperCase()}'`\n                }\n            }))\n        },\n\n\n        // Get Tx info\n        async getTxInfo(txHash) {\n            try {\n                // Request\n                return await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/tx/v1beta1/txs/${txHash.toUpperCase()}`).then(res => res.json())\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Check Tx result\n        async checkTxResult() {\n            let txResult = await this.getTxInfo(this.networks[this.currentNetwork].currentTxHash)\n\n            if (txResult.code != 5) {\n                // Clean notifications\n                notification.notify({\n                    group: 'default',\n                    clean: true\n                })\n\n                if (txResult.tx_response.code == '0') {\n                    // Show notification\n                    notification.notify({\n                        group: 'default',\n                        speed: 200,\n                        duration: 4000,\n                        title: i18n.global.t('message.notification_tx_success_title'),\n                        type: 'success',\n                        data: {\n                            explorer_link: getExplorerLink(this.currentNetwork)\n                        }\n                    })\n                } else {\n                    // Get error code\n                    let errorText = ''\n\n                    // Get error title\n                    txResult.tx_response.code\n                        ? errorText = i18n.global.t(`message.notification_tx_error_${txResult.tx_response.code}`)\n                        : errorText = i18n.global.t('message.notification_tx_error_rejected')\n\n                    // Show notification\n                    notification.notify({\n                        group: 'default',\n                        speed: 200,\n                        duration: 6000,\n                        title: i18n.global.t('message.notification_tx_error_title'),\n                        text: errorText,\n                        type: 'error'\n                    })\n                }\n\n                // Clear tx hash\n                this.networks[this.currentNetwork].currentTxHash = null\n\n                // Update all balances\n                this.updateAllBalances()\n\n                // Reset Tx Fee\n                this.resetTxFee()\n            }\n        },\n\n\n        // Update all balances\n        async updateAllBalances() {\n            // Update balances\n            if (this.isBalancesGot) {\n                var getBalances = await this.getBalances()\n            }\n\n            // Update staked balances\n            if (this.isStakedBalancesGot) {\n                var getStakedBalances = await this.getStakedBalances()\n            }\n\n            // Wait balances\n            Promise.all([getBalances, getStakedBalances]).then(() => {\n                // Update rewards\n                if (this.isRewardsGot) {\n                    this.getRewards()\n                }\n\n                // Update unstaking balances\n                if (this.isUnstakingBalancesGot) {\n                    this.getUnstakingBalances()\n                }\n            })\n        },\n\n\n        // Reset Tx Fee\n        async resetTxFee() {\n            // Get DB data\n            let DBData = await this.getMultipleData(['TxFeeCurrentLevel', 'TxFeeIsRemember'])\n\n            // Reset data\n            this.TxFee = {\n                balance: {},\n                currentLevel: DBData.TxFeeCurrentLevel || 'average',\n                userGasAmount: 0,\n                gasAmount: 0,\n                isRemember: DBData.TxFeeIsRemember || false,\n                isGasAdjustmentAuto: true,\n                isEnough: false\n            }\n        },\n\n\n        // Get network unbonding period\n        async getNetworkUnbondingTime() {\n            try {\n                await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/params`)\n                    .then(res => res.json())\n                    .then(response => {\n                        // Set data\n                        this.networks[this.currentNetwork].unbondingTime = parseInt(response.params.unbonding_time) / 86400\n                    })\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Get all validators\n        async getAllValidators() {\n            try {\n                return await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/validators?status=BOND_STATUS_BONDED&pagination.limit=200`).then(res => res.json())\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Get user validators\n        async getUserValidators() {\n            try {\n                return await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/delegators/${this.currentAddress}/validators?status=BOND_STATUS_BONDED&pagination.limit=200`).then(res => res.json())\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Get total bonded tokens\n        async getTotalBondedTokens() {\n            try {\n                await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/pool`)\n                    .then(res => res.json())\n                    .then(response => {\n                        // Set data\n                        this.networks[this.currentNetwork].totalBondedTokens = parseInt(response.pool.bonded_tokens)\n                    })\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Is unstaking cancel support\n        async isUnstakingCancelSupport() {\n            try {\n                let response = await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/base/tendermint/v1beta1/node_info`),\n                    data = await response.json(),\n                    cosmos_sdk_version = data.application_version.cosmos_sdk_version,\n                    min_version = 'v0.46'\n\n                // Parsing versions\n                let cosmos_sdk_version_parsed = cosmos_sdk_version.replace('v', '').split('-')[0].split('.').map(Number),\n                    min_version_parsed = min_version.replace('v', '').split('-')[0].split('.').map(Number)\n\n                // Fill in the missing with zeros\n                while (cosmos_sdk_version_parsed.length < 3) cosmos_sdk_version_parsed.push(0)\n                while (min_version_parsed.length < 3) min_version_parsed.push(0)\n\n                // Compare versions\n                for (let i = 0; i < 3; i++) {\n                    if (cosmos_sdk_version_parsed[i] > min_version_parsed[i]) return true // Version above minimum\n                    if (cosmos_sdk_version_parsed[i] < min_version_parsed[i]) return false // Version is less than minimum\n                }\n\n                return true\n            } catch (error) {\n                console.error(error)\n\n                return false\n            }\n        },\n\n\n        // Clear BD\n        async clearAllData() {\n            await DBclearData('wallet')\n        }\n    }\n})","import { openDB } from 'idb'\n\n\nconst dbPromise = openDB('bro_db', 1, {\n    upgrade(db) {\n        if (!db.objectStoreNames.contains('wallet')) {\n            db.createObjectStore('wallet')\n        }\n    }\n})\n\n\nexport async function DBgetAllData(storeName) {\n    let db = await dbPromise\n\n    return db.getAll(storeName)\n}\n\n\nexport async function DBgetData(storeName, key) {\n    let db = await dbPromise\n\n    return db.get(storeName, key)\n}\n\n\nexport async function DBgetMultipleData(storeName, keys) {\n    const db = await dbPromise,\n        results = await Promise.all(keys.map(key => db.get(storeName, key)))\n\n    // Create an object that maps keys and values\n    let keyValueMap = {}\n\n    keys.forEach((key, index) => keyValueMap[key] = results[index])\n\n    return keyValueMap\n}\n\n\nexport async function DBaddData(storeName, data) {\n    let db = await dbPromise,\n        tx = db.transaction(storeName, 'readwrite'),\n        store = tx.objectStore(storeName)\n\n    for (let [key, value] of data) {\n        await store.put(value, key)\n    }\n\n    await tx.done\n}\n\n\nexport async function DBdeleteData(storeName, id) {\n    let db = await dbPromise\n\n    return db.delete(storeName, id)\n}\n\n\nexport async function DBclearData(storeName) {\n    const db = await dbPromise\n    const tx = db.transaction(storeName, 'readwrite')\n    const store = tx.objectStore(storeName)\n    await store.clear()\n    await tx.done\n}","import { useGlobalStore } from '@/store'\nimport { DirectSecp256k1HdWallet, DirectSecp256k1Wallet } from '@cosmjs/proto-signing'\nimport { fromHex } from '@cosmjs/encoding'\nimport { SigningStargateClient } from '@cosmjs/stargate'\nimport { TxRaw } from 'cosmjs-types/cosmos/tx/v1beta1/tx'\nimport { sha256 } from '@cosmjs/crypto'\nimport { chains } from 'chain-registry'\n\n\n// Generate wallet\nexport const generateWallet = async count => {\n    return await DirectSecp256k1HdWallet.generate(count)\n}\n\n\n// Import wallet from mnemonic\nexport const importWalletFromMnemonic = async (mnemonic, prefix = null) => {\n    return await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, { prefix })\n}\n\n\n// Import wallet from private key\nexport const importWalletFromPrivateKey = async (privateKey, prefix = null) => {\n    return await DirectSecp256k1Wallet.fromKey(fromHex(privateKey), prefix)\n}\n\n\n// Hash data with key\nexport const hashDataWithKey = async (data, key) => {\n    let encoder = new TextEncoder(),\n        encodedData = encoder.encode(data)\n\n    let cryptoKey = await crypto.subtle.importKey(\n        'jwk',\n        key,\n        {\n            name: 'HMAC',\n            hash: { name: 'SHA-256' }\n        },\n        false,\n        ['sign']\n    )\n\n    let signature = await crypto.subtle.sign('HMAC', cryptoKey, encodedData),\n        hashArray = Array.from(new Uint8Array(signature)),\n        hashHex = hashArray.map(byte => ('00' + byte.toString(16)).slice(-2)).join('')\n\n    return hashHex\n}\n\n\n// Generate HMAC key\nexport const generateHMACKey = async () => {\n    // Key params\n    let key = await crypto.subtle.generateKey(\n        {\n            name: 'HMAC',\n            hash: { name: 'SHA-256' },\n            length: 256\n        },\n        true,\n        ['sign']\n    )\n\n    // Export key in JWK (JSON Web Key) format\n    let exportedKey = await crypto.subtle.exportKey('jwk', key)\n\n    return exportedKey\n}\n\n\n// Create singer\nexport const createSinger = async () => {\n    let store = useGlobalStore(),\n        wallet = null\n\n    // Wallet\n    if (store.secret) {\n        wallet = await importWalletFromMnemonic(store.secret, store.networks[store.currentNetwork].prefix)\n    }\n\n    if (store.privateKey) {\n        wallet = await importWalletFromPrivateKey(store.privateKey, store.networks[store.currentNetwork].prefix)\n    }\n\n    // Current address\n    let address = (await wallet.getAccounts())[0].address\n\n    // Stargate client\n    let signingClient = await SigningStargateClient.connectWithSigner(store.networks[store.currentNetwork].rpc_api, wallet)\n\n    return { address, signingClient }\n}\n\n\n// Denom traces\nexport const denomTraces = async (string) => {\n    let store = useGlobalStore(),\n        result = {\n            path: null,\n            base_denom: string\n        },\n        hash = string.split('/')\n\n    if (hash[0] == 'ibc') {\n        try {\n            // Request\n            await fetch(`${store.networks[store.currentNetwork].lcd_api}/ibc/apps/transfer/v1/denom_traces/${hash[1]}`)\n                .then(response => response.json())\n                .then(response => result = response.denom_trace)\n        } catch (error) {\n            console.error(error)\n        }\n    } else if (hash[0] == 'factory') {\n        result.ingnoreTraces = true\n        result.base_denom = hash[hash.length - 1]\n    }\n\n    return result\n}\n\n\n// Formating token amount\nexport const formatTokenAmount = (amount, exponent) => amount / Math.pow(10, exponent)\n\n\n// Format token cost\nexport const formatTokenCost = (cost, currency = null) => {\n    let store = useGlobalStore(),\n    currentCurrency = currency || store.currentCurrency\n\n    // Rounding\n    switch (currentCurrency) {\n        case 'BTC':\n            return cost > 0.0000000001 || cost == 0 ? cost.toLocaleString('ru-RU', { maximumFractionDigits: 10, minimumFractionDigits: 2 }).replace(',', '.') : '<0.0000000001'\n\n        case 'ETH':\n            return cost > 0.0000001 || cost == 0 ? cost.toLocaleString('ru-RU', { maximumFractionDigits: 7, minimumFractionDigits: 2 }).replace(',', '.') : '<0.0000001'\n\n        default:\n            return cost > 0.01 || cost == 0 ? cost.toLocaleString('ru-RU', { maximumFractionDigits: 2, minimumFractionDigits: 2 }).replace(',', '.') : '<0.01'\n    }\n}\n\n\n// Formating token name\nexport const formatTokenName = tokenName => {\n    let store = useGlobalStore(),\n        formatableToken = store.formatableTokens.find(el => el.token_name == tokenName),\n        formatTokenName = formatableToken ? formatableToken.format_token_name : tokenName\n\n    return formatTokenName\n}\n\n\n// Get price by denom\nexport const getPriceByDenom = denom => {\n    let store = useGlobalStore(),\n        price = store.prices.find(el => el.symbol === denom)?.price || 0,\n        formatableToken = store.formatableTokens.find(el => el.token_name == denom),\n        formatPrice = formatableToken ? price * Math.pow(10, formatableToken.exponent) : price\n\n    return formatPrice\n}\n\n\n// Currency conversion\nexport const currencyConversion = (amount, denom, currency) => {\n    let store = useGlobalStore(),\n        currentCurrencyPrice = 0\n\n    currency\n        ? currentCurrencyPrice = store.prices.find(el => el.symbol == formatTokenName(currency)).price\n        : currentCurrencyPrice = store.prices.find(el => el.symbol == formatTokenName(store.currentCurrency)).price\n\n    return amount * (getPriceByDenom(denom) / currentCurrencyPrice)\n}\n\n\n// Calc token cost in current cucrrency\nexport const calcTokenCost = (denom, amount, exponent, currency = null) => {\n    let formatAmount = formatTokenAmount(amount, exponent)\n\n    return currencyConversion(formatAmount, denom, currency)\n}\n\n\n// Calc balances cost in current cucrrency\nexport const calcBalancesCost = (currency = null) => {\n    let store = useGlobalStore(),\n        totalPrice = 0\n\n    // Calc total cost\n    if (store.balances.length) {\n        store.balances.forEach(balance => totalPrice += calcTokenCost(balance.token_info.symbol, balance.amount, balance.exponent, currency))\n    }\n\n    return parseFloat(totalPrice)\n}\n\n\n// Calc Staked balances cost in current cucrrency\nexport const calcStakedBalancesCost = (currency = null) => {\n    let store = useGlobalStore(),\n        totalPrice = 0\n\n    // Calc total cost\n    if (store.stakedBalances.length) {\n        store.stakedBalances.forEach(el => totalPrice += calcTokenCost(el.balance.token_info.symbol, el.balance.amount, el.balance.exponent, currency))\n    }\n\n    return parseFloat(totalPrice)\n}\n\n\n// Calc rewards balances cost in current cucrrency\nexport const calcRewardsBalancesCost = (currency = null) => {\n    let store = useGlobalStore(),\n        totalPrice = 0\n\n    // Calc total cost\n    if (store.rewardsBalances.length) {\n        store.rewardsBalances.forEach(balance => totalPrice += calcTokenCost(balance.token_info.symbol, balance.amount, balance.exponent, currency))\n    }\n\n    return parseFloat(totalPrice)\n}\n\n\n// Calc stake availabel amount\nexport const calcAvailabelAmount = () => {\n    let store = useGlobalStore(),\n        balance = store.balances.find(balance => balance.denom === store.networks[store.currentNetwork].denom)\n\n    return balance ? balance.amount : 0\n}\n\n\n// Calc staked amount\nexport const calcStakedAmount = () => {\n    let store = useGlobalStore(),\n        totalAmount = 0\n\n    // Calc total amount\n    if (store.stakedBalances.length) {\n        store.stakedBalances.forEach(item => totalAmount += parseFloat(item.balance.amount))\n    }\n\n    return totalAmount\n}\n\n\n// Get metwork logo\nexport const getNetworkLogo = chainId => {\n    let logos = null\n\n    if (chainId) {\n        let chain = chains.find(el => el.chain_id === chainId)\n\n        if (chain) {\n            logos = chain.images[chain.images.length - 1].svg || chain.images[chain.images.length - 1].png\n        }\n    }\n\n    return logos\n}\n\n\n// Simulate Tx\nexport const simulateTx = async (msg, memo = '') => {\n    let store = useGlobalStore()\n\n    // Simulate gas\n    let gasUsed = await store.networks[store.currentNetwork].signingClient.simulate(store.currentAddress, msg, memo)\n\n    // Set gas amount\n    store.TxFee.gasAmount = parseInt(gasUsed * store.networks[store.currentNetwork].gas_adjustment)\n\n    // Set user gas amount\n    store.TxFee.userGasAmount = store.TxFee.gasAmount\n}\n\n\n// Sign Tx\nexport const signTx = async (msg, memo) => {\n    let store = useGlobalStore()\n\n    // Fee\n    let fee = {\n        amount: [{\n            denom: store.networks[store.currentNetwork].denom,\n            amount: parseInt(store.TxFee.userGasAmount * store.TxFee[`${store.TxFee.currentLevel}Price`]).toString()\n        }],\n        gas: store.TxFee.userGasAmount.toString()\n    }\n\n    // Sign\n    let txRaw = await store.networks[store.currentNetwork].signingClient.sign(store.currentAddress, msg, fee, memo)\n\n    // Encode TxRaw\n    let txBytes = TxRaw.encode(txRaw).finish()\n\n    // Hash transaction bytes\n    let txHash = sha256(txBytes)\n\n    // Convert hash bytes to hex string\n    store.networks[store.currentNetwork].currentTxHash = Buffer.from(txHash).toString('hex')\n\n    // Set listener current tx\n    store.setListenerCurrentTx()\n\n    return txBytes\n}\n\n\n// Send Tx\nexport const sendTx = async txBytes => {\n    let store = useGlobalStore()\n\n    // Broadcast\n    await store.networks[store.currentNetwork].signingClient.broadcastTx(txBytes, store.networks[store.currentNetwork].signingClient.broadcastTimeoutMs, store.networks[store.currentNetwork].signingClient.broadcastPollIntervalMs)\n}\n\n\n// Get explorer link\nexport const getExplorerLink = (network) => {\n    let store = useGlobalStore()\n\n    return (store.networks[network].explorer_link).replace('{tx_hash}', store.networks[network].currentTxHash)\n}\n\n\n// Image load error\nexport const imageLoadError = e => e.target.classList.add('hide')\n\n\n// Date calc\nexport const dateCalc = date => {\n    let currentDate = new Date(date),\n        userTimeZone = new Date().getTimezoneOffset() / 60 * -1\n\n    return new Date(currentDate.setHours(currentDate.getHours() + userTimeZone))\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"js/\" + chunkId + \".\" + {\"17\":\"ddc73e9f\",\"89\":\"c3dd0e33\",\"135\":\"355055c8\",\"254\":\"c49dc293\",\"298\":\"ed2176e5\",\"332\":\"7eb1f1ed\",\"472\":\"07e6d28f\",\"638\":\"42f02f86\",\"693\":\"2ece25a4\",\"698\":\"657b50ae\",\"757\":\"799df6e7\",\"818\":\"1b5d07e0\",\"916\":\"deee215b\",\"964\":\"e90c91df\",\"997\":\"aba13003\"}[chunkId] + \".js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"css/\" + chunkId + \".\" + {\"17\":\"19fc441e\",\"89\":\"4f3754cb\",\"135\":\"c964660e\",\"298\":\"415ccacf\",\"332\":\"f1979d7a\",\"472\":\"4f8903bd\",\"638\":\"5c0acb5e\",\"693\":\"a0fada80\",\"698\":\"8a27e5ee\",\"757\":\"2df49b62\",\"818\":\"e39ee1f1\",\"916\":\"b62e5017\",\"964\":\"f28f6cca\",\"997\":\"622dbd59\"}[chunkId] + \".css\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var inProgress = {};\nvar dataWebpackPrefix = \"cosmos-telegram-signer:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = function(url, done, key, chunkId) {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = function(prev, event) {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach(function(fn) { return fn(event); });\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/\";","if (typeof document === \"undefined\") return;\nvar createStylesheet = function(chunkId, fullhref, oldTag, resolve, reject) {\n\tvar linkTag = document.createElement(\"link\");\n\n\tlinkTag.rel = \"stylesheet\";\n\tlinkTag.type = \"text/css\";\n\tif (__webpack_require__.nc) {\n\t\tlinkTag.nonce = __webpack_require__.nc;\n\t}\n\tvar onLinkComplete = function(event) {\n\t\t// avoid mem leaks.\n\t\tlinkTag.onerror = linkTag.onload = null;\n\t\tif (event.type === 'load') {\n\t\t\tresolve();\n\t\t} else {\n\t\t\tvar errorType = event && event.type;\n\t\t\tvar realHref = event && event.target && event.target.href || fullhref;\n\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + errorType + \": \" + realHref + \")\");\n\t\t\terr.name = \"ChunkLoadError\";\n\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n\t\t\terr.type = errorType;\n\t\t\terr.request = realHref;\n\t\t\tif (linkTag.parentNode) linkTag.parentNode.removeChild(linkTag)\n\t\t\treject(err);\n\t\t}\n\t}\n\tlinkTag.onerror = linkTag.onload = onLinkComplete;\n\tlinkTag.href = fullhref;\n\n\n\tif (oldTag) {\n\t\toldTag.parentNode.insertBefore(linkTag, oldTag.nextSibling);\n\t} else {\n\t\tdocument.head.appendChild(linkTag);\n\t}\n\treturn linkTag;\n};\nvar findStylesheet = function(href, fullhref) {\n\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n\tfor(var i = 0; i < existingLinkTags.length; i++) {\n\t\tvar tag = existingLinkTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return tag;\n\t}\n\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n\tfor(var i = 0; i < existingStyleTags.length; i++) {\n\t\tvar tag = existingStyleTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\");\n\t\tif(dataHref === href || dataHref === fullhref) return tag;\n\t}\n};\nvar loadStylesheet = function(chunkId) {\n\treturn new Promise(function(resolve, reject) {\n\t\tvar href = __webpack_require__.miniCssF(chunkId);\n\t\tvar fullhref = __webpack_require__.p + href;\n\t\tif(findStylesheet(href, fullhref)) return resolve();\n\t\tcreateStylesheet(chunkId, fullhref, null, resolve, reject);\n\t});\n}\n// object to store loaded CSS chunks\nvar installedCssChunks = {\n\t524: 0\n};\n\n__webpack_require__.f.miniCss = function(chunkId, promises) {\n\tvar cssChunks = {\"17\":1,\"89\":1,\"135\":1,\"298\":1,\"332\":1,\"472\":1,\"638\":1,\"693\":1,\"698\":1,\"757\":1,\"818\":1,\"916\":1,\"964\":1,\"997\":1};\n\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n\t\tpromises.push(installedCssChunks[chunkId] = loadStylesheet(chunkId).then(function() {\n\t\t\tinstalledCssChunks[chunkId] = 0;\n\t\t}, function(e) {\n\t\t\tdelete installedCssChunks[chunkId];\n\t\t\tthrow e;\n\t\t}));\n\t}\n};\n\n// no hmr\n\n// no prefetching\n\n// no preloaded","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n__webpack_require__.f.j = function(chunkId, promises) {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise(function(resolve, reject) { installedChunkData = installedChunks[chunkId] = [resolve, reject]; });\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = function(event) {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkcosmos_telegram_signer\"] = self[\"webpackChunkcosmos_telegram_signer\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(95578); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["en","message","i18n","createI18n","locale","fallbackLocale","messages","VueI18nMessages","store","useGlobalStore","inject","router","useRouter","route","useRoute","emitter","title","useTitle","layout","computed","meta","notificationTimeout","ref","notificationAnimation","enter","translateY","leave","redirectToSend","parsedData","currentNetwork","setCurrentNetwork","watch","isInitialized","push","path","query","denom","networks","address","amount","notificationsOnStart","params","data","isCollapsible","value","setTimeout","notification","document","querySelector","classList","add","notificationsCollapsingDelay","notificationsOnDestroy","onBeforeMount","global","t","onMounted","async","window","Telegram","WebApp","ready","expand","setHeaderColor","MainButton","showProgress","disableVerticalSwipes","BiometricManager","init","onEvent","closeScanQrPopup","split","on","field","scrollIntoView","behavior","overlay","style","display","remove","__exports__","class","_createElementBlock","_hoisted_1","_createVNode","_component_router_view","default","_withCtx","Component","_createBlock","_resolveDynamicComponent","_","script","render","startY","isPulling","threshold","hasUpdated","handleTouchStart","e","scrollY","touches","pageY","handleTouchMove","currentTxHash","forcedUnlock","emit","currentY","distance","preventDefault","stopPropagation","isAnyModalOpen","account","updateAllBalances","handleTouchEnd","addEventListener","passive","onUnmounted","removeEventListener","routes","name","component","defaultLayout","accessDenied","accountLayout","createRouter","history","createWebHistory","beforeResolve","to","from","next","isRegister","DBgetData","matched","some","record","access","length","includes","isAuthorized","vFocus","mounted","el","focus","vParallax","offsetHeight","opacity","transform","vOdometer","number","numberArr","toFixed","innerHTML","map","char","join","updated","oldNumberArr","oldValue","maxLength","Math","max","html","mismatchIndex","mismatchCount","animationDuration","animationDelay","concat","Array","fill","i","duration","parseFloat","mitt","app","createApp","App","pinia","createPinia","use","Notifications","velocity","provide","directive","register","VueCountdown","mount","network","lcd_api","rpc_api","websocket_url","token_name","chain_id","prefix","explorer_link","alias","exponent","gas_adjustment","address_length","gas_amount_send","gas_amount_claim","gas_amount_stake","gas_amount_unstake","gas_amount_redelegate","networksAdditionalOptions","signingClient","websocket","unbondingTime","totalBondedTokens","totalUnstakingTokens","isUnstakingCancelSupport","useNotification","defineStore","state","isBalancesGot","isStakedBalancesGot","isRewardsGot","isUnstakingBalancesGot","authErrorLimit","currentAddress","currentCurrency","currentCurrencySymbol","stakeCurrentValidator","unstakeCurrentValidator","redelegateValidatorFrom","redelegateValidatorTo","prices","balances","stakedBalances","rewardsBalances","unstakingBalances","redelegations","secret","privateKey","TxFee","balance","currentLevel","userGasAmount","gasAmount","isRemember","isGasAdjustmentAuto","isEnough","cosmoshub","Object","assign","bostrom","localbostrom","formatableTokens","format_token_name","actions","initApp","this","DBData","getMultipleData","TxFeeCurrentLevel","TxFeeIsRemember","signer","createSinger","getCurrenciesPrice","getCurrentNetworkAPR","connectWebsocket","Promise","all","getBalances","getStakedBalances","then","error","console","log","notify","group","clean","speed","type","fetch","response","json","infos","find","chain","toLowerCase","APR","apr","err","getAllBalances","getBalanceInfo","filter","obj","hasOwnProperty","delegation_responses","item","getValidatorInfo","delegation","validator_address","getRewards","total","chain_info","getUnstakingBalances","unbonding_responses","entries","forEach","entry","parseInt","getRedelegations","redelegation_responses","base_denom","denomTraces","asset","assets","currentAsset","chain_name","tokenInfo","token","base","token_info","formatableToken","toUpperCase","denom_units","chains","price","getPriceByDenom","symbol","hasNativeToken","res","validator_info","validator","getSecret","setSecret","DBaddData","setPrivateKey","createWallet","pinCode","walletName","isBiometricEnabled","hmacKey","generateHMACKey","hashDataWithKey","requestingData","DBgetMultipleData","updateUserAuthErrorLimit","limit","updateTxFeeInfo","updateCurrentCurrency","values","onmessage","close","WebSocket","onopen","send","JSON","stringify","jsonrpc","method","id","parsedMsg","parse","msg","keys","result","resetTxFee","checkTxResult","TxFeeGetCurrentBalance","baseDenom","TxFeeSetGasPrices","lowPrice","fees","fee_tokens","fixed_min_gas_price","low_gas_price","averagePrice","highPrice","TxFeeIsEnough","setListenerCurrentTx","getTxInfo","txHash","txResult","code","tx_response","getExplorerLink","errorText","text","getNetworkUnbondingTime","unbonding_time","getAllValidators","getUserValidators","getTotalBondedTokens","pool","bonded_tokens","cosmos_sdk_version","application_version","min_version","cosmos_sdk_version_parsed","replace","Number","min_version_parsed","clearAllData","DBclearData","dbPromise","openDB","upgrade","db","objectStoreNames","contains","createObjectStore","storeName","key","get","results","keyValueMap","index","tx","transaction","objectStore","put","done","clear","generateWallet","DirectSecp256k1HdWallet","generate","count","importWalletFromMnemonic","mnemonic","fromMnemonic","importWalletFromPrivateKey","DirectSecp256k1Wallet","fromKey","fromHex","encoder","TextEncoder","encodedData","encode","cryptoKey","crypto","subtle","importKey","hash","signature","sign","hashArray","Uint8Array","hashHex","byte","toString","slice","generateKey","exportedKey","exportKey","wallet","getAccounts","SigningStargateClient","connectWithSigner","string","denom_trace","ingnoreTraces","formatTokenAmount","pow","formatTokenCost","cost","currency","toLocaleString","maximumFractionDigits","minimumFractionDigits","formatTokenName","tokenName","formatPrice","currencyConversion","currentCurrencyPrice","calcTokenCost","formatAmount","calcBalancesCost","totalPrice","calcStakedBalancesCost","calcRewardsBalancesCost","calcAvailabelAmount","calcStakedAmount","totalAmount","getNetworkLogo","chainId","logos","images","svg","png","simulateTx","memo","gasUsed","simulate","signTx","fee","gas","txRaw","txBytes","TxRaw","finish","sha256","Buffer","sendTx","broadcastTx","broadcastTimeoutMs","broadcastPollIntervalMs","imageLoadError","target","dateCalc","date","currentDate","Date","userTimeZone","getTimezoneOffset","setHours","getHours","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","loaded","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","f","chunkId","reduce","promises","u","miniCssF","g","globalThis","Function","prop","prototype","inProgress","dataWebpackPrefix","l","url","needAttach","scripts","getElementsByTagName","s","getAttribute","createElement","charset","timeout","nc","setAttribute","src","onScriptComplete","prev","event","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","bind","head","appendChild","Symbol","toStringTag","nmd","paths","children","p","createStylesheet","fullhref","oldTag","resolve","reject","linkTag","rel","nonce","onLinkComplete","errorType","realHref","href","Error","request","insertBefore","nextSibling","findStylesheet","existingLinkTags","tag","dataHref","existingStyleTags","loadStylesheet","installedCssChunks","miniCss","cssChunks","installedChunks","installedChunkData","promise","loadingEnded","realSrc","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","self","__webpack_exports__"],"sourceRoot":""}