{"version":3,"file":"js/508.c60fb540.js","mappings":"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","sources":["webpack://cosmos-telegram-signer/./src/views/ImportWalletPage.vue","webpack://cosmos-telegram-signer/./src/views/ImportWalletPage.vue?8fc1"],"sourcesContent":["<template>\n    <!-- Import wallet page -->\n    <section class=\"page_container import_wallet_page\">\n        <div class=\"cont\">\n            <!-- Import wallet page title -->\n            <div class=\"page_title\">\n                {{ $t('message.import_wallet_title') }}\n            </div>\n\n            <!-- Import wallet page data -->\n            <div class=\"page_data_wrap\">\n                <div class=\"page_data\">\n                    <!-- Loader -->\n                    <Loader v-if=\"loading\" />\n\n                    <template v-else>\n                    <!-- Back button -->\n                    <router-link class=\"back_btn\" to=\"/\">\n                        <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_arrow_hor\"></use></svg>\n                    </router-link>\n\n                    <!-- Tabs -->\n                    <div class=\"tabs_wrap\">\n                        <div class=\"tabs\">\n                            <!-- Tab 12 words -->\n                            <button class=\"btn\" ref=\"tab1\" @click.prevent=\"activeTab = 1\" :class=\"{ active: activeTab === 1 }\">\n                                {{ $t('message.mnemonic_tab1') }}\n                            </button>\n\n                            <!-- Tab 24 words -->\n                            <button class=\"btn\" ref=\"tab2\" @click.prevent=\"activeTab = 2\" :class=\"{ active: activeTab === 2 }\">\n                                {{ $t('message.mnemonic_tab2') }}\n                            </button>\n\n                            <!-- Tab Private Key -->\n                            <button class=\"btn\" ref=\"tab3\" @click.prevent=\"activeTab = 3\" :class=\"{ active: activeTab === 3 }\">\n                                {{ $t('message.mnemonic_tab3') }}\n                            </button>\n\n                            <!-- Tabs roller -->\n                            <div class=\"roller\" :style=\"`width: ${rollerWidth}px; left: ${rollerOffsetLeft}px;`\">\n                                <span></span>\n                            </div>\n                        </div>\n                    </div>\n\n                    <!-- Mnemonic -->\n                    <div class=\"mnemonic\" v-if=\"activeTab != 3\">\n                        <div class=\"row\">\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[0]\"\n                                    @input=\"validateWord($event.target.value, 0)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(0)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[1]\"\n                                    @input=\"validateWord($event.target.value, 1)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(1)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[2]\"\n                                    @input=\"validateWord($event.target.value, 2)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(2)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[3]\"\n                                    @input=\"validateWord($event.target.value, 3)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(3)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[4]\"\n                                    @input=\"validateWord($event.target.value, 4)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(4)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[5]\"\n                                    @input=\"validateWord($event.target.value, 5)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(5)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[6]\"\n                                    @input=\"validateWord($event.target.value, 6)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(6)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[7]\"\n                                    @input=\"validateWord($event.target.value, 7)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(7)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[8]\"\n                                    @input=\"validateWord($event.target.value, 8)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(8)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[9]\"\n                                    @input=\"validateWord($event.target.value, 9)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(9)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[10]\"\n                                    @input=\"validateWord($event.target.value, 10)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(10)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[11]\"\n                                    @input=\"validateWord($event.target.value, 11)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(11)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[12]\"\n                                    @input=\"validateWord($event.target.value, 12)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(12)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[13]\"\n                                    @input=\"validateWord($event.target.value, 13)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(13)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[14]\"\n                                    @input=\"validateWord($event.target.value, 14)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(14)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[15]\"\n                                    @input=\"validateWord($event.target.value, 15)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(15)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[16]\"\n                                    @input=\"validateWord($event.target.value, 16)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(16)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[17]\"\n                                    @input=\"validateWord($event.target.value, 17)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(17)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[18]\"\n                                    @input=\"validateWord($event.target.value, 18)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(18)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[19]\"\n                                    @input=\"validateWord($event.target.value, 19)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(19)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[20]\"\n                                    @input=\"validateWord($event.target.value, 20)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(20)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[21]\"\n                                    @input=\"validateWord($event.target.value, 21)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(21)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[22]\"\n                                    @input=\"validateWord($event.target.value, 22)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(22)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[23]\"\n                                    @input=\"validateWord($event.target.value, 23)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(23)\">\n                            </div>\n                        </div>\n\n                        <!-- Import wallet page exp -->\n                        <div class=\"exp\" v-html=\"$t('message.import_wallet_exp')\"></div>\n                    </div>\n\n\n                    <!-- Import private key -->\n                    <div class=\"private_key\" v-else>\n                        <div class=\"field\">\n                            <!-- Import private key field -->\n                            <input type=\"text\" class=\"input big\" v-model=\"privateKey\"\n                                :class=\"{\n                                    error: !idValidPrivateKey && isTouchedPrivateKey,\n                                    success: idValidPrivateKey && isTouchedPrivateKey\n                                }\"\n                                @input=\"validatePrivateKey()\"\n                                @paste=\"validatePrivateKey()\"\n                            >\n                        </div>\n\n                        <!-- Import private key exp -->\n                        <div class=\"exp\" v-html=\"$t('message.import_wallet_exp2')\"></div>\n                    </div>\n\n\n                    <!-- Import wallet page button -->\n                    <div class=\"btns\">\n                        <!-- Next button -->\n                        <div class=\"btn\" :class=\"{ disabled: !isFormValid }\" @click.prevent=\"save()\">\n                            <span>{{ $t('message.btn_next') }}</span>\n                        </div>\n                    </div>\n                    </template>\n                </div>\n            </div>\n        </div>\n    </section>\n</template>\n\n\n<script setup>\n    import { ref, onBeforeMount, onMounted, watch, computed } from 'vue'\n    import { useRouter } from 'vue-router'\n    import { useGlobalStore } from '@/store'\n    import { importWalletFromMnemonic, importWalletFromPrivateKey } from '@/utils'\n    import { fromHex } from '@cosmjs/encoding'\n    import { Secp256k1 } from '@cosmjs/crypto'\n\n    // Components\n    import Loader from '@/components/Loader.vue'\n\n\n    const store = useGlobalStore(),\n        router = useRouter(),\n        loading = ref(true),\n        activeTab = ref(1),\n        tab1 = ref(null),\n        tab2 = ref(null),\n        tab3 = ref(null),\n        tabs = [tab1, tab2, tab3],\n        rollerWidth = ref(null),\n        rollerOffsetLeft = ref(null),\n        wallet = ref(null),\n        secret = ref([]),\n        validateAllWordsResult = ref([]),\n        privateKey = ref(''),\n        idValidPrivateKey = ref(false),\n        isTouchedPrivateKey = ref(false)\n\n\n    onBeforeMount(() => {\n        // Hide loader\n        loading.value = false\n    })\n\n\n    onMounted(() => {\n        // Set roller params\n        rollerWidth.value = tabs[activeTab.value - 1].value.offsetWidth\n        rollerOffsetLeft.value = tabs[activeTab.value - 1].value.offsetLeft\n    })\n\n\n    watch(activeTab, () => {\n        // Reset data\n        secret.value = []\n        validateAllWordsResult.value = []\n        privateKey.value = ''\n        isTouchedPrivateKey.value = false\n\n        // Update roller params\n        rollerWidth.value = tabs[activeTab.value - 1].value.offsetWidth\n        rollerOffsetLeft.value = tabs[activeTab.value - 1].value.offsetLeft\n    })\n\n\n    // Event handler for pasting text from clipboard\n    function handlePaste(e) {\n        // Get data from the clipboard\n        let clipboardData = e.clipboardData || window.clipboardData,\n            pastedText = clipboardData.getData('text'),\n            pastedTextArr = pastedText.split(' ')\n\n        if (pastedTextArr.length == 12) {\n            // Set active tab\n            activeTab.value = 1\n\n            // Set secret\n            setTimeout(() => secret.value = pastedTextArr)\n\n            // Validate\n            setTimeout(() => validateAllWords())\n        }\n\n        if (pastedTextArr.length == 24) {\n            // Set active tab\n            activeTab.value = 2\n\n            // Set secret\n            setTimeout(() => secret.value = pastedTextArr)\n\n            // Validate\n            setTimeout(() => validateAllWords())\n        }\n    }\n\n\n    // Validate all words\n    function validateAllWords() {\n        secret.value.map((value, i) => validateWord(value, i))\n    }\n\n\n    // Validate word\n    function validateWord(str, i) {\n        let result = true\n\n        // Validate length\n        if (!str.trim().length) {\n            result = false\n        }\n\n        // Validate symbols\n        let regex = /^[a-z]+$/i\n\n        if (!regex.test(str.trim())) {\n            result = false\n        }\n\n        validateAllWordsResult.value[i] = result\n    }\n\n\n    // Get validate class\n    function getValidationClass(i) {\n        let result = validateAllWordsResult.value[i]\n\n        if (result === null || result === undefined) {\n            return ''\n        }\n\n        return result ? 'success' : 'error'\n    }\n\n\n    // Validate private key\n    async function validatePrivateKey() {\n        let result = true\n\n        try {\n            // Validate length\n            if (!privateKey.value.trim().length) {\n                result = result ? result = false : result\n            }\n\n            // Validate bytes length\n            let privateKeyParsed = fromHex(privateKey.value.trim())\n\n            if (privateKeyParsed.length !== 32) {\n                result = result ? result = false : result\n            }\n\n            // Try generate public key\n            let publicKey = await Secp256k1.makeKeypair(privateKeyParsed)\n\n            if (!publicKey) {\n                result = result ? result = false : result\n            }\n\n            // Valid status\n            idValidPrivateKey.value = result\n\n            // Touched status\n            isTouchedPrivateKey.value = true\n\n            return result\n        } catch (error) {\n            // Valid status\n            idValidPrivateKey.value = false\n\n            // Touched status\n            isTouchedPrivateKey.value = true\n\n            return false\n        }\n    }\n\n\n    // Validate form\n    const isFormValid = computed(() => {\n        let result = false\n\n        switch (activeTab.value) {\n            case 1:\n                result = secret.value.length === 12 && secret.value.every(el => el !== '')\n                break;\n\n            case 2:\n                result = secret.value.length === 24 && secret.value.every(el => el !== '')\n                break;\n\n            default:\n                result = idValidPrivateKey.value\n                break;\n        }\n\n        return result\n    })\n\n\n    // Save data\n    async function save() {\n        // Import wallet\n        if (activeTab.value != 3) {\n            // Import\n            wallet.value = await importWalletFromMnemonic(secret.value.join(' ').toLocaleLowerCase())\n\n            // Save in DB\n            await store.setSecret(wallet.value.secret.data)\n        } else {\n            // Import\n            wallet.value = await importWalletFromPrivateKey(privateKey.value)\n\n            // Save in DB\n            await store.setPrivateKey(privateKey.value)\n        }\n\n        // Redirect\n        router.push('/create_pin')\n    }\n</script>\n\n\n<style scoped>\n    .tabs_wrap\n    {\n        margin-top: 54px;\n    }\n\n\n\n    .input\n    {\n        text-transform: lowercase;\n    }\n\n\n\n    .exp\n    {\n        font-size: 12px;\n\n        margin-top: 8px;\n    }\n</style>","import script from \"./ImportWalletPage.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ImportWalletPage.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./ImportWalletPage.vue?vue&type=style&index=0&id=453a01fb&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-453a01fb\"]])\n\nexport default __exports__"],"names":["store","useGlobalStore","router","useRouter","loading","ref","activeTab","tab1","tab2","tab3","tabs","rollerWidth","rollerOffsetLeft","wallet","secret","validateAllWordsResult","privateKey","idValidPrivateKey","isTouchedPrivateKey","handlePaste","e","clipboardData","window","pastedText","getData","pastedTextArr","split","length","value","setTimeout","validateAllWords","map","i","validateWord","str","result","trim","regex","test","getValidationClass","undefined","async","validatePrivateKey","privateKeyParsed","fromHex","publicKey","Secp256k1","makeKeypair","error","onBeforeMount","onMounted","offsetWidth","offsetLeft","watch","isFormValid","computed","every","el","save","importWalletFromMnemonic","join","toLocaleLowerCase","setSecret","data","importWalletFromPrivateKey","setPrivateKey","push","__exports__"],"sourceRoot":""}