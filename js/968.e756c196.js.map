{"version":3,"file":"js/968.e756c196.js","mappings":"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","sources":["webpack://cosmos-telegram-signer/./src/components/Auth.vue","webpack://cosmos-telegram-signer/./src/components/Auth.vue?4730","webpack://cosmos-telegram-signer/./src/views/AuthPage.vue","webpack://cosmos-telegram-signer/./src/views/AuthPage.vue?a80b"],"sourcesContent":["<template>\n    <!-- Pin code -->\n    <div class=\"pin\">\n        <!-- Pin code label -->\n        <div class=\"field_label\">\n            {{ $t('message.auth_enter_pin_label') }}\n        </div>\n\n        <div class=\"row\" :class=\"{ error: wrongPin }\">\n            <!-- Pin code field -->\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[0]\" maxlength=\"1\" inputmode=\"numeric\" ref=\"inputRef\"\n                    :class=\"{ active: pinCode[0].length }\"\n                    @input=\"moveFocus($event, 1)\"\n                    @keydown.backspace=\"moveBack($event, 0)\">\n            </div>\n\n            <!-- Pin code field -->\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[1]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[0].length\"\n                    :class=\"{ active: pinCode[1].length }\"\n                    @input=\"moveFocus($event, 2)\"\n                    @keydown.backspace=\"moveBack($event, 1)\">\n            </div>\n\n            <!-- Pin code field -->\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[2]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[1].length\"\n                    :class=\"{ active: pinCode[2].length }\"\n                    @input=\"moveFocus($event, 3)\"\n                    @keydown.backspace=\"moveBack($event, 2)\">\n            </div>\n\n            <!-- Pin code field -->\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[3]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[2].length\"\n                    :class=\"{ active: pinCode[3].length }\"\n                    @input=\"moveFocus($event, 4)\"\n                    @keydown.backspace=\"moveBack($event, 3)\">\n            </div>\n\n            <!-- Pin code field -->\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[4]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[3].length\"\n                    :class=\"{ active: pinCode[4].length }\"\n                    @input=\"moveFocus($event, 5)\"\n                    @keydown.backspace=\"moveBack($event, 4)\">\n            </div>\n\n            <!-- Pin code field -->\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[5]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[4].length\"\n                    :class=\"{ active: pinCode[5].length }\"\n                    @input=\"moveFocus($event, 6)\"\n                    @keydown.backspace=\"moveBack($event, 5)\">\n            </div>\n        </div>\n\n        <!-- Pin warning text -->\n        <div class=\"warning\" v-if=\"userAuthErrorLimit < store.authErrorLimit\">\n            {{ $t('message.auth_error_warning', { count: userAuthErrorLimit }) }}\n        </div>\n    </div>\n\n    <!-- Biometric button -->\n    <button class=\"biometric_btn\" @click.prevent=\"checkBiometricAccess()\" v-if=\"props.mode === 'all' && (isBiometricAvailable && userAuthErrorLimit == store.authErrorLimit)\">\n        <!-- Biometric button text -->\n        <span>{{ $t('message.btn_biometric2') }}</span>\n\n        <!-- Biometric button icon -->\n        <svg class=\"icon\" v-if=\"biometrictype === 'face'\">\n            <use xlink:href=\"@/assets/sprite.svg#ic_biometric_face\"></use>\n        </svg>\n\n        <!-- Biometric button icon -->\n        <svg class=\"icon\" v-else>\n            <use xlink:href=\"@/assets/sprite.svg#ic_biometric_finger\"></use>\n        </svg>\n    </button>\n\n\n    <!-- Buttons -->\n    <div class=\"btns\">\n        <!-- Login button -->\n        <button class=\"btn\" :class=\"{ disabled: !isFormValid }\" @click.prevent=\"login()\" v-if=\"userAuthErrorLimit < store.authErrorLimit\">\n            <span v-if=\"store.isAuthorized & props.mode === 'pin'\">{{ $t('message.btn_confirm') }}</span>\n            <span v-else-if=\"store.isAuthorized\">{{ $t('message.btn_sign') }}</span>\n            <span v-else>{{ $t('message.btn_login') }}</span>\n        </button>\n    </div>\n</template>\n\n\n<script setup>\n    import { onBeforeMount, ref, watch, computed, inject } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { useRouter } from 'vue-router'\n    import { hashDataWithKey } from '@/utils'\n    import { DBgetMultipleData } from '@/utils/db'\n\n\n    const props = defineProps({\n            mode: {\n                type: String,\n                default: 'all'\n            }\n        }),\n        store = useGlobalStore(),\n        router = useRouter(),\n        emitter = inject('emitter'),\n        pinCode = ref(['', '', '', '', '', '']),\n        pinDB = ref(''),\n        hmacKey = ref(''),\n        wrongPin = ref(false),\n        userAuthErrorLimit = ref(store.authErrorLimit),\n        isBiometric = ref(false),\n        isBiometricAvailable = ref(false),\n        biometricType = ref('finger')\n\n\n    onBeforeMount(async () => {\n        // Get data from DB\n        let DBData = await DBgetMultipleData('global', ['pin', 'authErrorLimit', 'isBiometric', 'hmacKey'])\n\n        // Set pin from DB\n        pinDB.value = DBData.pin\n\n        // Set hmacKey from DB\n        hmacKey.value = DBData.hmacKey\n\n        // Set user auth error limit\n        userAuthErrorLimit.value = DBData.authErrorLimit\n\n        if (props.mode === 'all') {\n            // Set biometric status from DB\n            isBiometric.value = DBData.isBiometric\n\n            // Is biometric available\n            isBiometricAvailable.value = Telegram.WebApp.BiometricManager.isBiometricAvailable\n\n            // Biometric type\n            if (Telegram.WebApp.BiometricManager.biometricType != 'unknown') {\n                biometricType.value = Telegram.WebApp.BiometricManager.biometricType\n            }\n\n            // Check biometric access\n            if (isBiometricAvailable.value && isBiometric.value) {\n                checkBiometricAccess()\n            }\n        }\n    })\n\n\n    watch(pinCode.value, () => {\n        // Reset focus\n        if (pinCode.value[5].length) {\n            document.activeElement.blur()\n        }\n\n        // Login\n        if (pinCode.value[5].length && userAuthErrorLimit.value === store.authErrorLimit) {\n            login()\n        }\n    })\n\n\n    // Move focus\n    function moveFocus(event, nextIndex) {\n        setTimeout(() => {\n            if (event.target.value.length >= 1 && nextIndex < 6) {\n                event.target.closest('.row').querySelector(`.field:nth-child(${nextIndex + 1}) input`).focus()\n            }\n        })\n    }\n\n\n    // Move back\n    function moveBack(event, currentIndex) {\n        setTimeout(() => {\n            if (event.target.value.length === 0 && currentIndex > 0) {\n                event.target.closest('.row').querySelector(`.field:nth-child(${currentIndex}) input`).select()\n            }\n        })\n    }\n\n\n    // Check biometric access\n    function checkBiometricAccess() {\n        !Telegram.WebApp.isAccessGranted\n            ? Telegram.WebApp.BiometricManager.requestAccess({ reason: '' }, () => biometricAuthenticate())\n            : biometricAuthenticate()\n    }\n\n\n    // Biometric authenticate\n    function biometricAuthenticate() {\n        Telegram.WebApp.BiometricManager.authenticate({ reason: '' }, res => {\n            if (res) {\n                // Set event auth\n                emitter.emit('auth')\n            }\n        })\n    }\n\n\n    // Login\n    async function login() {\n        // Compare pins\n        let compareResult = await comparePINCode()\n\n        if (compareResult) {\n            // Update limit\n            userAuthErrorLimit.value = store.authErrorLimit\n\n            // Set event auth\n            emitter.emit('auth')\n        } else {\n            // Set auth error\n            await setAuthError()\n        }\n    }\n\n\n    // Compare pin code\n    async function comparePINCode() {\n        // Encrypt the PIN\n        let pinHash = await hashDataWithKey(pinCode.value.join(''), hmacKey.value)\n\n        return pinHash === pinDB.value\n    }\n\n\n    // Set auth error\n    async function setAuthError() {\n        // Set error\n        wrongPin.value = true\n\n        let newLimit = userAuthErrorLimit.value - 1\n\n        // Update limit\n        userAuthErrorLimit.value = newLimit\n\n        if (!store.isAuthorized) {\n            // Сhange auth limit\n            await store.updateUserAuthErrorLimit(newLimit)\n\n            if (!newLimit) {\n                // Set user lock\n                await store.setUserLock()\n\n                // Redirect\n                router.push('/lock')\n            }\n        } else {\n            if (!newLimit) {\n                // Set event show_error_sign_tx_modal\n                emitter.emit('show_error_sign_tx_modal')\n            }\n        }\n\n        // Clear data\n        pinCode.value = ['', '', '', '', '', '']\n\n        // Reset data\n        wrongPin.value = false\n    }\n\n\n    // Validate form\n    const isFormValid = computed(() => pinCode.value[5].length != '')\n</script>\n\n\n<style scoped>\n    .pin\n    {\n        position: relative;\n\n        margin-top: 8px;\n    }\n\n\n    .pin .row\n    {\n        flex-wrap: nowrap;\n    }\n\n\n    .pin .row > *\n    {\n        width: 100%;\n    }\n\n\n    .pin .row > * + *\n    {\n        margin-left: 10px;\n    }\n\n\n    .pin .input\n    {\n        font-size: 20px;\n\n        text-align: center;\n    }\n\n\n    .pin .error .input\n    {\n        border-color: #f00;\n    }\n\n    .pin .success .input\n    {\n        border-color: #00aa63;\n    }\n\n\n    .pin .warning\n    {\n        font-size: 12px;\n\n        position: absolute;\n        top: 100%;\n        left: 0;\n\n        width: 100%;\n        margin-top: 4px;\n\n        text-align: center;\n\n        color: #ff4b4b;\n    }\n\n\n\n    .biometric_btn\n    {\n        font-size: 18px;\n        font-weight: 500;\n\n        display: block;\n\n        margin: auto;\n    }\n\n\n    .biometric_btn.top\n    {\n        margin-top: 40px;\n    }\n\n\n    .biometric_btn .icon\n    {\n        display: block;\n\n        width: 44px;\n        height: 44px;\n        margin: 0 auto;\n    }\n\n\n    .biometric_btn.disabled\n    {\n        pointer-events: none;\n\n        opacity: .6;\n    }\n</style>","import script from \"./Auth.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Auth.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Auth.vue?vue&type=style&index=0&id=7439e9ec&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-7439e9ec\"]])\n\nexport default __exports__","<template>\n    <!-- Auth page -->\n    <section class=\"page_container auth_page\">\n        <div class=\"cont\">\n            <!-- Auth page title -->\n            <div class=\"page_title\">\n                {{ $t('message.auth_title') }}\n            </div>\n\n            <!-- Auth page data -->\n            <div class=\"page_data_wrap\">\n                <div class=\"page_data\">\n                    <!-- Loader -->\n                    <Loader v-if=\"loading\" />\n\n                    <!-- Auth -->\n                    <Auth />\n\n                    <div class=\"version\">\n                        {{ version }}\n                    </div>\n                </div>\n            </div>\n        </div>\n    </section>\n</template>\n\n\n<script setup>\n    import { ref, inject, onUnmounted, onMounted } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { useRouter } from 'vue-router'\n    import { DBgetData } from '@/utils/db'\n\n    // Components\n    import Auth from '@/components/Auth.vue'\n    import Loader from '@/components/Loader.vue'\n\n\n    const store = useGlobalStore(),\n        router = useRouter(),\n        emitter = inject('emitter'),\n        loading = ref(true),\n        version = process.env.APP_VERSION || 'unknown'\n\n\n    onMounted(async () => {\n        // Get data from DB\n        let DBUserLockTimestamp = await DBgetData('global', 'userLockTimestamp')\n\n        if (new Date(DBUserLockTimestamp) - new Date() < store.userLockTime) {\n            // Set user unlock\n            await store.setUserUnlock()\n        }\n\n        // Hide loader\n        loading.value = false\n    })\n\n\n    onUnmounted(() => {\n        // Unlisten events\n        emitter.off('auth')\n    })\n\n\n    // Event \"auth\"\n    emitter.on('auth', async () => {\n        // Auth\n        await store.auth()\n\n        // Hide loader\n        loading.value = false\n\n        // Redirect\n        router.push('/account')\n    })\n</script>\n\n\n<style scoped>\n    .btns\n    {\n        margin-top: 0;\n    }\n\n\n    .version\n    {\n        font-size: 10px;\n\n        margin-top: 12px;\n\n        text-align: center;\n\n        opacity: .5;\n    }\n</style>","import script from \"./AuthPage.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AuthPage.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./AuthPage.vue?vue&type=style&index=0&id=450f0b45&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-450f0b45\"]])\n\nexport default __exports__"],"names":["props","__props","store","useGlobalStore","router","useRouter","emitter","inject","pinCode","ref","pinDB","hmacKey","wrongPin","userAuthErrorLimit","authErrorLimit","isBiometric","isBiometricAvailable","biometricType","moveFocus","event","nextIndex","setTimeout","target","value","length","closest","querySelector","focus","moveBack","currentIndex","select","checkBiometricAccess","Telegram","WebApp","isAccessGranted","biometricAuthenticate","BiometricManager","requestAccess","reason","authenticate","res","emit","async","login","compareResult","comparePINCode","setAuthError","pinHash","hashDataWithKey","join","newLimit","isAuthorized","updateUserAuthErrorLimit","setUserLock","push","onBeforeMount","DBData","DBgetMultipleData","pin","mode","watch","document","activeElement","blur","isFormValid","computed","__exports__","loading","version","process","onMounted","DBUserLockTimestamp","DBgetData","Date","userLockTime","setUserUnlock","onUnmounted","off","on","auth"],"sourceRoot":""}