{"version":3,"file":"js/app.2fb1739b.js","mappings":"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","sources":["webpack://cosmos-telegram-signer/./src/locale/messages.js","webpack://cosmos-telegram-signer/./src/locale/index.js","webpack://cosmos-telegram-signer/./src/components/modal/RedirectModal.vue","webpack://cosmos-telegram-signer/./src/components/modal/RedirectModal.vue?dd7e","webpack://cosmos-telegram-signer/./src/components/jetPack/ConnectWallet.vue","webpack://cosmos-telegram-signer/./src/components/jetPack/ConnectWallet.vue?fa96","webpack://cosmos-telegram-signer/./src/components/jetPack/SendTx.vue","webpack://cosmos-telegram-signer/./src/components/jetPack/SendTx.vue?d0cf","webpack://cosmos-telegram-signer/./src/App.vue","webpack://cosmos-telegram-signer/./src/App.vue?7ccd","webpack://cosmos-telegram-signer/./src/layouts/Default.vue","webpack://cosmos-telegram-signer/./src/layouts/Default.vue?3951","webpack://cosmos-telegram-signer/./src/layouts/Account.vue","webpack://cosmos-telegram-signer/./src/layouts/Account.vue?f612","webpack://cosmos-telegram-signer/./src/router/index.js","webpack://cosmos-telegram-signer/./src/directives/v-focus.js","webpack://cosmos-telegram-signer/./src/directives/v-parallax.js","webpack://cosmos-telegram-signer/./src/directives/v-odometer.js","webpack://cosmos-telegram-signer/./src/main.js","webpack://cosmos-telegram-signer/./src/store/networks/cosmoshub.js","webpack://cosmos-telegram-signer/./src/store/networks/bostrom.js","webpack://cosmos-telegram-signer/./src/store/networks/neutron.js","webpack://cosmos-telegram-signer/./src/store/networks/pion.js","webpack://cosmos-telegram-signer/./src/store/networks/omniflix.js","webpack://cosmos-telegram-signer/./src/store/networks/dymension.js","webpack://cosmos-telegram-signer/./src/store/networks/stride.js","webpack://cosmos-telegram-signer/./src/store/index.js","webpack://cosmos-telegram-signer/./src/utils/db.js","webpack://cosmos-telegram-signer/./src/utils/generateWallet.js","webpack://cosmos-telegram-signer/./src/utils/importWalletFromMnemonic.js","webpack://cosmos-telegram-signer/./src/utils/importWalletFromPrivateKey.js","webpack://cosmos-telegram-signer/./src/utils/hashDataWithKey.js","webpack://cosmos-telegram-signer/./src/utils/generateAESKey.js","webpack://cosmos-telegram-signer/./src/utils/generateHMACKey.js","webpack://cosmos-telegram-signer/./src/utils/encryptData.js","webpack://cosmos-telegram-signer/./src/utils/decryptData.js","webpack://cosmos-telegram-signer/./src/utils/getAddress.js","webpack://cosmos-telegram-signer/./src/utils/createSinger.js","webpack://cosmos-telegram-signer/./src/utils/denomTraces.js","webpack://cosmos-telegram-signer/./src/utils/formatTokenAmount.js","webpack://cosmos-telegram-signer/./src/utils/formatTokenCost.js","webpack://cosmos-telegram-signer/./src/utils/formatTokenName.js","webpack://cosmos-telegram-signer/./src/utils/getPriceByDenom.js","webpack://cosmos-telegram-signer/./src/utils/currencyConversion.js","webpack://cosmos-telegram-signer/./src/utils/calcTokenCost.js","webpack://cosmos-telegram-signer/./src/utils/calcBalancesCost.js","webpack://cosmos-telegram-signer/./src/utils/calcStakedBalancesCost.js","webpack://cosmos-telegram-signer/./src/utils/calcRewardsBalancesCost.js","webpack://cosmos-telegram-signer/./src/utils/calcAvailableAmount.js","webpack://cosmos-telegram-signer/./src/utils/calcStakedAmount.js","webpack://cosmos-telegram-signer/./src/utils/calcUnstakingAmount.js","webpack://cosmos-telegram-signer/./src/utils/getNetworkLogo.js","webpack://cosmos-telegram-signer/./src/utils/simulateTx.js","webpack://cosmos-telegram-signer/./src/utils/signTx.js","webpack://cosmos-telegram-signer/./src/utils/sendTx.js","webpack://cosmos-telegram-signer/./src/utils/getExplorerLink.js","webpack://cosmos-telegram-signer/./src/utils/imageLoadError.js","webpack://cosmos-telegram-signer/./src/utils/imageLoadSuccess.js","webpack://cosmos-telegram-signer/./src/utils/dateCalc.js","webpack://cosmos-telegram-signer/./src/utils/decodeFromBase64.js","webpack://cosmos-telegram-signer/./src/utils/convertArrayBuffersToUint8Arrays.js","webpack://cosmos-telegram-signer/./src/utils/getTgUserId.js","webpack://cosmos-telegram-signer/./src/components/Auth.vue","webpack://cosmos-telegram-signer/./src/components/Auth.vue?4730","webpack://cosmos-telegram-signer/./src/components/Loader.vue","webpack://cosmos-telegram-signer/./src/components/Loader.vue?b8fd","webpack://cosmos-telegram-signer/./src/components/modal/TxFeeModal.vue","webpack://cosmos-telegram-signer/./src/components/modal/TxFeeModal.vue?d9a7","webpack://cosmos-telegram-signer/./src/components/TxFee.vue","webpack://cosmos-telegram-signer/./src/components/TxFee.vue?c08d","webpack://cosmos-telegram-signer/./src/components/modal/SignTxModal.vue","webpack://cosmos-telegram-signer/./src/components/modal/SignTxModal.vue?9766","webpack://cosmos-telegram-signer/webpack/bootstrap","webpack://cosmos-telegram-signer/webpack/runtime/amd options","webpack://cosmos-telegram-signer/webpack/runtime/chunk loaded","webpack://cosmos-telegram-signer/webpack/runtime/compat get default export","webpack://cosmos-telegram-signer/webpack/runtime/define property getters","webpack://cosmos-telegram-signer/webpack/runtime/ensure chunk","webpack://cosmos-telegram-signer/webpack/runtime/get javascript chunk filename","webpack://cosmos-telegram-signer/webpack/runtime/get mini-css chunk filename","webpack://cosmos-telegram-signer/webpack/runtime/global","webpack://cosmos-telegram-signer/webpack/runtime/hasOwnProperty shorthand","webpack://cosmos-telegram-signer/webpack/runtime/load script","webpack://cosmos-telegram-signer/webpack/runtime/make namespace object","webpack://cosmos-telegram-signer/webpack/runtime/node module decorator","webpack://cosmos-telegram-signer/webpack/runtime/publicPath","webpack://cosmos-telegram-signer/webpack/runtime/css loading","webpack://cosmos-telegram-signer/webpack/runtime/jsonp chunk loading","webpack://cosmos-telegram-signer/webpack/startup"],"sourcesContent":["export default {\n    // English\n    en: {\n        message: {\n            // Page title\n            'page_title': 'Bro wallet',\n            'create_wallet_title': 'New Recovery Phrase',\n            'create_wallet_confirm_title': 'Verify Your Recovery Phrase',\n            'create_pin_title': 'Name your wallet',\n            'wallet_created_title': 'Wallet created!',\n            'wallet_title': 'Wallet page',\n            'import_wallet_title': 'Import Existing Wallet',\n\n\n            // Age modal\n            'age_modal_text': 'Are you 18 years old?',\n\n\n            // Index page\n            'index_page_title': 'Сreation of a new wallet',\n\n\n            // Create page\n            'create_wallet_agree_label1': 'Do not share your recovery phrase with ANYONE.',\n            'create_wallet_agree_label2': 'Back up the phrase safely.',\n\n            'create_wallet_agree_checkbox1': \"I understand that I have access to my wallet solely because I possess the recovery phrase. If this phrase falls into someone else's hands, I will lose my funds.\",\n            'create_wallet_agree_checkbox2': 'I also understand that if I lose my recovery phrase, I will lose all the funds in this wallet.',\n\n\n            // Confirm page\n            'confirm_label': 'Word',\n            'confirm_exp': 'Fill out the words according to their numbers to verify that you have stored your phrase safely.',\n\n\n            // Create pin page\n            'create_pin_wallet_name_label': 'Wallet name:',\n            'create_pin_create_pin_label': 'Create pin:',\n            'create_pin_confirm_pin_label': 'Repeat pin:',\n\n            'create_pin_wallet_name_placeholder': 'Name',\n\n\n            // Auth\n            'auth_title': 'Welcome!',\n            'auth_enter_pin_label': 'Enter pin:',\n            'auth_error_warning': 'You have {count} attempts left',\n\n\n            // User lock\n            'user_lock_title': 'Account blocked!',\n            'user_lock_desc': 'Your account has been blocked for {time} minutes due to multiple authorization errors. Unlocking will occur automatically after a period of time, you do not need to do anything for this.',\n            'user_lock_timer_label': 'Time left:',\n\n\n            // Mnemonic\n            'mnemonic_tab1': '12 words',\n            'mnemonic_tab2': '24 words',\n            'mnemonic_tab3': 'Private Key',\n\n\n            // Import page\n            'import_wallet_exp': 'Enter your recovery phrase here to restore your wallet.<br> Or click on any blank and paste the entire phrase.',\n            'import_wallet_exp2': 'Enter your private key here to restore your wallet.<br> Or click on any blank and paste the entire phrase.',\n\n\n            // Account page\n            'current_balance_title': 'Current balance',\n            'stacked_balance_title': 'Total Staked',\n\n            'available_tokens_title': 'Available Balance',\n            'staked_tokens_title': 'Staked Balance',\n\n            'staked_tokens_validator_label': 'By:',\n\n\n            // Claim rewards\n            'claim_rewards_page_title': 'Claimable Staking Reward',\n            'claim_rewards_title': 'Claim Rewards',\n            'claim_rewards_not_enought': 'You don’t have enough {denom} to pay Fee',\n\n\n            // Claim confirm\n            'calim_confirm_title': 'Confirm transction',\n\n\n            // Stake\n            'stake_page_title': 'Stake',\n            'stake_confirm_page_title': 'Confirm',\n\n            'stake_current_staked_label': 'Token:',\n            'stake_APR_label': 'APR',\n            'stake_validator_label': 'Select validator:',\n            'stake_amount_label': 'Amount:',\n            'stake_unbonding_period_label': 'Unbonding Period:',\n            'stake_available_label': 'Available',\n            'stake_staked_label': 'Total Staked',\n\n            'stake_unbonding_time_unit': 'days',\n\n            'stake_validator_placeholder': 'Choose your validator',\n\n            'stake_confirm_voting_power': 'of voting power',\n            'stake_confirm_token_label': 'Token:',\n            'stake_confirm_amount_label': 'Amount:',\n            'stake_confirm_daily_profit_label': 'Daily profit:',\n            'stake_confirm_commission_label': 'Commission:',\n            'stake_confirm_unbonding_period_label': 'Unbonding Period:',\n            'stake_confirm_fee_label': 'Fee:',\n\n\n            // Unstake\n            'unstake_page_title': 'Unstake',\n            'unstake_confirm_page_title': 'Confirm',\n\n\n            // Unstaking tokens\n            'unstaking_tokens_title': 'Unstaking process',\n            'unstaking_tokens_label': 'Unstaking in progress:',\n            'unstaking_tokens_count_label': 'Unstakings:',\n            'unstaking_tokens_finish_label': 'Available in:',\n\n            'unstaking_tokens_finish_days': 'Days',\n            'unstaking_tokens_finish_day': 'Day',\n\n\n            // Send\n            'send_confirm_page_title': 'Confirm',\n\n            'send_page_tab1': 'Send',\n            'send_page_tab2': 'IBC send',\n\n            'send_destination_chain_label': 'Destination Chain:',\n            'send_address_label': 'Address:',\n            'send_amount_label': 'Amount:',\n\n            'send_destination_chain_placeholder': 'Select Chain',\n\n            'send_confirm_chain_from_label': 'From the network:',\n            'send_confirm_chain_to_label': 'To the network:',\n            'send_confirm_receiver_label': 'Receiver:',\n            'send_confirm_fee_label': 'Fee:',\n\n\n            // Receive\n            'receive_page_title': 'Receive',\n            'receive_amount_title': 'Choose your amount',\n            'receive_amount_label': 'Amount:',\n\n\n            // Redelegate\n            'redelegate_page_title': 'Switch validator',\n            'redelegate_confirm_page_title': 'Confirm',\n            'redelegate_validator_from_label': 'From:',\n            'redelegate_validator_to_label': 'To:',\n            'redelegate_confirm_token_label': 'Token:',\n            'redelegate_confirm_amount_label': 'Amount:',\n\n\n            // Tx warning\n            'tx_warning_title': 'Warning',\n            'tx_warning_desc': \"You can still try to make the transaction, but since you don't have enough tokens for gas, it may fail, or it might still go through\",\n\n\n            // Validators\n            'validators_page_title': 'Validators:',\n            'validatoes_staked_label': 'Staked:',\n            'validatoes_available_label': 'Available:',\n\n\n            // Chains\n            'chains_page_title': 'Select Chain',\n\n\n            // Stats\n            'stats_title': 'Staking Profit',\n            'stats_token_label': 'Token:',\n            'stats_available_label': 'Available:',\n            'stats_staked_label': 'Staked:',\n            'stats_personal_apr_label': 'Personal APR:',\n            'stats_daily_profit_label': 'Est. daily profit:',\n\n\n            // Profile\n            'profile_title': 'My wallets',\n\n\n            // Remove wallet\n            'remove_wallet_title': 'You are deleting wallet:',\n            'remove_wallet_desc': 'Enter the name of the wallet you want to delete. We warn you that you will not be able to return it.',\n\n            'remove_wallet_confirm_title': 'Confirm by pin',\n\n\n            // Redelegations\n            'redelegations_title': 'Active redelegations',\n\n            'redelegations_finish_days': 'Days',\n            'redelegations_finish_day': 'Day',\n\n\n            // Tokens\n            'tokens_page_title': 'Tokens:',\n\n\n            // Tx fee\n            'tx_fee_label': 'Tx Fee:',\n\n\n            // Tx fee modal\n            'tx_fee_modal_title': 'Fee Options',\n\n            'tx_fee_fee_tier_label': 'Fee tier',\n            'tx_fee_fee_token_label': 'Fee Token:',\n            'tx_fee_gas_adjustment_label': 'Gas Adjustment:',\n            'tx_fee_gas_amount_label': 'Gas Amount',\n\n            'tx_fee_remember_label': 'Remember my choise',\n            'tx_fee_auto_label': 'Auto',\n\n            'tx_fee_low_label': 'Low',\n            'tx_fee_average_label': 'Average',\n            'tx_fee_high_label': 'High',\n\n\n            // Transaction info\n            'details_label': 'Details:',\n            'memo_label': 'Memo:',\n\n\n            // Sign transaction fee\n            'sign_tx_title': 'Sign transaction',\n\n            'sign_tx_error_title': 'Incorrect pin!',\n            'sign_tx_error_desc': 'You have entered an incorrect PIN 4 times. For security reasons, you will be returned to the main screen to protect your account and prevent unauthorized access.',\n\n\n            // Redirect modal\n            'redirect_modal_title': 'Return to the application.',\n            'redirect_modal_desc': 'You can now switch back to another application to continue.',\n\n\n            // Add IBC channek modal\n            'add_IBC_channel_title': 'Add IBC Channel',\n\n            'add_IBC_channel_chain_label': 'Destination Channel ID',\n            'add_IBC_channel_id_label': 'Source Channel ID:',\n\n            'add_IBC_channel_error_already_exists': 'Such a pair chain_id and channel_id already exists.',\n\n\n            // Search\n            'search_placeholder': 'Search...',\n            'search_empty': 'Token not found...',\n            'search_empty_validator': 'Validator not found...',\n            'search_empty_chains': 'Chain not found...',\n\n\n            // Jet Pack\n            'jp_connection_title': 'Request for connection',\n            'jp_send_tx_title': 'Request for transaction',\n\n            'jp_connection_desc': \"Some app ask to connect to your wallet. If you don't know who is asking, don't allow it.\",\n\n            'jp_chain_not_found': 'Chain not found.',\n            'jp_message_rejected': 'The user rejected the request.',\n\n\n            // Placeholders\n            'placeholder_address': 'Enter address',\n            'placeholder_amount': '{token} Amount',\n            'placeholder_memo': 'Required for sending to CEX',\n            'placeholder_memo2': 'Your Custom Memo',\n            'placeholder_wallet_name': 'Wallet Name',\n\n            'placeholder_chain_ID': 'Chain ID',\n            'placeholder_source_channel_ID': 'Source Channel ID',\n\n\n            // Notifications\n            'notification_copied_title': 'Copied to clipboard',\n            'notification_offline_title': 'You are offline',\n\n            'notification_wallet_added_success': 'Wallet added successfully.',\n            'notification_wallet_update_success': 'Wallet updated successfully.',\n            'notification_wallet_remove_success': '{name} deleted successfully.',\n\n            'notification_add_user_channel_success': 'IBC channel saved successfully.',\n\n            'notification_tx_pending_title': 'Transaction is pending',\n            'notification_tx_success_title': 'Success',\n            'notification_tx_error_title': 'Error:',\n\n            'notification_error_title': 'Something went wrong, try again later',\n            'notification_error_invalid_paste_title': 'Incorrect address in the clipboard',\n\n            'notification_explorer_link': 'Explorer',\n\n            'notification_jp_chain_id_not_passed': 'Parameter \"chain_id\" not passed.',\n            'notification_jp_chain_not_supported': 'Chain {chain_id} not supported.',\n            'notification_jp_get_address_success': 'You have successfully submitted your address.',\n            'notification_jp_get_address_reject': 'You have rejected the request to provide your address.',\n            'notification_jp_send_reject': 'You have rejected the request to send.',\n\n\n            // Buttons\n            'btn_add_new_wallet': 'Add New Wallet',\n            'btn_from_exist_wallet': 'Create from existing wallet',\n            'btn_create_wallet': 'Create new wallet',\n            'btn_import_wallet': 'Import wallet',\n            'btn_show': 'Ok. Show my phrases',\n            'btn_next': 'Next',\n            'btn_copy': 'Copy to clipboard',\n            'btn_copy_small': 'Copy',\n            'btn_join': 'Join',\n            'btn_biometric': 'Turn on biometric security',\n            'btn_biometric2': 'Use biometric',\n            'btn_login': 'Log in',\n            'btn_send': 'Send',\n            'btn_receive': 'Receive',\n            'btn_stake': 'Earn',\n            'btn_confirm_stake': 'Confirm Staking',\n            'btn_confirm_unstake': 'Confirm Unstake',\n            'btn_confirm_send': 'Confirm Send',\n            'btn_confirm_redelegate': 'Confirm',\n            'btn_unstake': 'Unstake',\n            'btn_redelegate': 'Switch validator',\n            'btn_claim': 'Claim',\n            'btn_approve': 'Approve',\n            'btn_reject': 'Reject',\n            'btn_json': 'View JSON',\n            'btn_close': 'Close',\n            'btn_sign': 'Sign',\n            'btn_understood': 'Understood',\n            'btn_waiting_tx': 'Waiting tx',\n            'btn_MAX': 'MAX',\n            'btn_OK': 'Ok',\n            'btn_cancel': 'Cancel',\n            'btn_amount': 'Amount',\n            'btn_share': 'Share',\n            'btn_accept': 'Accept',\n            'btn_paste': 'Paste',\n            'btn_remove': 'Delete',\n            'btn_add_chain': 'Add Chain',\n            'btn_save': 'Save',\n\n\n            'notification_tx_error_2': \"tx parse error\",\n            'notification_tx_error_3': \"invalid sequence\",\n            'notification_tx_error_4': \"unauthorized\",\n            'notification_tx_error_5': \"insufficient funds\",\n            'notification_tx_error_6': \"unknown request\",\n            'notification_tx_error_7': \"invalid address\",\n            'notification_tx_error_8': \"invalid pubkey\",\n            'notification_tx_error_9': \"unknown address\",\n            'notification_tx_error_10': \"invalid coins\",\n            'notification_tx_error_11': \"Broadcasting transaction failed: out of gas try again and increase gas amount\",\n            'notification_tx_error_12': \"memo too large\",\n            'notification_tx_error_13': \"insufficient fee\",\n            'notification_tx_error_14': \"maximum number of signatures exceeded\",\n            'notification_tx_error_15': \"no signatures supplied\",\n            'notification_tx_error_16': \"failed to marshal JSON bytes\",\n            'notification_tx_error_17': \"failed to unmarshal JSON bytes\",\n            'notification_tx_error_18': \"invalid request\",\n            'notification_tx_error_19': \"tx already in mempool\",\n            'notification_tx_error_20': \"mempool is full\",\n            'notification_tx_error_21': \"tx too large\",\n            'notification_tx_error_22': \"key not found\",\n            'notification_tx_error_23': \"invalid account password\",\n            'notification_tx_error_24': \"tx intended signer does not match the given signer\",\n            'notification_tx_error_25': \"invalid gas adjustment\",\n            'notification_tx_error_26': \"invalid height\",\n            'notification_tx_error_27': \"invalid version\",\n            'notification_tx_error_28': \"invalid chain-id\",\n            'notification_tx_error_29': \"invalid type\",\n            'notification_tx_error_30': \"tx timeout height\",\n            'notification_tx_error_31': \"unknown extension options\",\n            'notification_tx_error_32': \"incorrect account sequence\",\n            'notification_tx_error_33': \"failed packing protobuf message to Any\",\n            'notification_tx_error_34': \"failed unpacking protobuf message from Any\",\n            'notification_tx_error_35': \"internal logic error\",\n            'notification_tx_error_36': \"conflict\",\n            'notification_tx_error_37': \"feature not supported\",\n            'notification_tx_error_38': \"not found\",\n            'notification_tx_error_39': \"Internal IO error\",\n            'notification_tx_error_40': \"error in app.toml\",\n            'notification_tx_error_41': \"invalid gas limit\",\n\n            'notification_tx_error_rejected': \"The transaction has been rejected\",\n        }\n    }\n}","import { createI18n } from 'vue-i18n'\nimport VueI18nMessages from '../locale/messages'\n\n\nconst i18n = createI18n({\n    locale: 'en',\n    fallbackLocale: 'en',\n    messages: VueI18nMessages\n})\n\n\nexport default i18n","<template>\n    <!-- Redirect modal -->\n    <section class=\"modal\">\n        <div class=\"modal_content\">\n            <div class=\"data\">\n                <!-- Modal title -->\n                <div class=\"modal_title\">\n                    {{ $t('message.redirect_modal_title') }}\n                </div>\n\n                <!-- Modal desc -->\n                <div class=\"modal_desc\">\n                    {{ $t('message.redirect_modal_desc') }}\n                </div>\n\n                <!-- Redirect modal buttons -->\n                <div class=\"btns\">\n                    <!-- Ok button -->\n                    <button class=\"btn\" @click.prevent=\"emitter.emit('close_redirect_modal')\">\n                        <span>{{ $t('message.btn_OK') }}</span>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </section>\n</template>\n\n\n<script setup>\n    import { inject } from 'vue'\n\n    const emitter = inject('emitter')\n</script>\n\n\n<style scoped>\n    .modal_content\n    {\n        min-height: 268px;\n    }\n</style>","import script from \"./RedirectModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./RedirectModal.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./RedirectModal.vue?vue&type=style&index=0&id=6672454e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-6672454e\"]])\n\nexport default __exports__","<template>\n    <!-- JetPack - Get address page -->\n    <section class=\"page_container connect_wallet\">\n        <div class=\"cont\">\n            <!-- JetPack - Connection page title -->\n            <div class=\"page_title\">\n                {{ $t('message.jp_connection_title') }}\n            </div>\n\n            <!-- JetPack - Connection page data -->\n            <div class=\"page_data_wrap\">\n                <div class=\"page_data\">\n                    <!-- JetPack - Connection desc -->\n                    <div class=\"desc\">\n                        {{ $t('message.jp_connection_desc') }}\n                    </div>\n\n                    <!-- Buttons -->\n                    <div class=\"btns\">\n                        <!-- Approve button -->\n                        <button class=\"btn\" @click=\"approveRequest()\">\n                            <span>{{ $t('message.btn_approve') }}</span>\n                        </button>\n\n                        <!-- Reject button -->\n                        <button class=\"btn purple_btn\" @click=\"rejectRequest()\">\n                            <span>{{ $t('message.btn_reject') }}</span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </section>\n</template>\n\n\n<script setup>\n    import { inject } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { useNotification } from '@kyvg/vue3-notification'\n\n\n    const store = useGlobalStore(),\n        notification = useNotification(),\n        i18n = inject('i18n'),\n        emitter = inject('emitter')\n\n\n    // Approve request\n    function approveRequest() {\n        // Send response\n        const connection = store.RTCConnections[store.jetPackRequest.data.peer_id]\n\n        if (connection) {\n            connection.send({\n                type: 'address',\n                requestId: store.jetPackRequest.data.request_id,\n                address: store.currentAddress\n            })\n        }\n\n        // Show notification\n        notification.notify({\n            group: 'default',\n            speed: 200,\n            duration: 1000,\n            title: i18n.global.t('message.notification_jp_get_address_success'),\n            type: 'default'\n        })\n\n        // Reset jetPack request\n        store.jetPackRequest = null\n\n        // Event \"close_connect_wallet_modal\"\n        emitter.emit('close_connect_wallet_modal')\n\n        // Event \"show_redirect_modal\"\n        emitter.emit('show_redirect_modal')\n    }\n\n\n    // Reject request\n    function rejectRequest() {\n        // Send response\n        const connection = store.RTCConnections[store.jetPackRequest.data.peer_id]\n\n        if (connection) {\n            connection.send({\n                type: 'error',\n                requestId: store.jetPackRequest.data.request_id,\n                message: i18n.global.t('message.jp_message_rejected')\n            })\n        }\n\n        // Show notification\n        notification.notify({\n            group: 'default',\n            speed: 200,\n            duration: 1000,\n            title: i18n.global.t('message.notification_jp_get_address_reject'),\n            type: 'default'\n        })\n\n        // Reset jetPack request\n        store.jetPackRequest = null\n\n        // Event \"close_connect_wallet_modal\"\n        emitter.emit('close_connect_wallet_modal')\n\n        // Event \"show_redirect_modal\"\n        emitter.emit('show_redirect_modal')\n    }\n</script>\n\n\n<style scoped>\n    .connect_wallet\n    {\n        position: fixed;\n        z-index: 9;\n        top: 0;\n        left: 0;\n\n        width: 100%;\n        height: 100%;\n        background: var(--bg);\n    }\n\n\n    .desc\n    {\n        font-size: 16px;\n        font-weight: 500;\n        line-height: 24px;\n    }\n</style>","import script from \"./ConnectWallet.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ConnectWallet.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./ConnectWallet.vue?vue&type=style&index=0&id=5e933db6&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-5e933db6\"]])\n\nexport default __exports__","<template>\n    <!-- JetPack - Send Tx page -->\n    <section class=\"page_container send_tx\">\n        <!-- Loader -->\n        <Loader v-if=\"isProcess\" />\n\n        <div class=\"cont\">\n            <!-- JetPack - Send Tx page title -->\n            <div class=\"page_title\">\n                {{ $t('message.jp_send_tx_title') }}\n            </div>\n\n            <!-- JetPack - Send Tx page data -->\n            <div class=\"page_data_wrap\">\n                <div class=\"page_data\">\n                    <!-- JetPack - Send Tx messages -->\n                    <pre><code>{{ store.jetPackRequest?.data?.msg }}</code></pre>\n\n\n                    <!-- JetPack - Send Tx page memo -->\n                    <div class=\"memo_field\">\n                        <!-- Send page memo label -->\n                        <div class=\"field_label\">\n                            {{ $t('message.memo_label') }}\n                        </div>\n\n                        <!-- JetPack - Send Tx page memo field -->\n                        <div class=\"field\">\n                            <input type=\"text\" class=\"input big\" v-model=\"memo\">\n                        </div>\n                    </div>\n\n\n                    <!-- Tx fee -->\n                    <TxFee :msgAny=\"store.jetPackRequest?.data?.msg\" txType=\"send\" />\n\n\n                    <!-- JetPack - Send Tx page buttons -->\n                    <div class=\"btns\">\n                        <!-- Send button -->\n                        <button v-if=\"!store.networks[store.currentNetwork].currentTxHash\" class=\"btn\" @click.prevent=\"openSignTxModal()\" :class=\"{ disabled: !store.TxFee.isEnough }\">\n                            <span>{{ $t('message.btn_send') }}</span>\n                        </button>\n\n                        <!-- Waiting button -->\n                        <button v-else class=\"btn waiting_btn\" @click.prevent=\"emitter.emit('show_collapsible_notification')\">\n                            <span>{{ $t('message.btn_waiting_tx') }}</span>\n                        </button>\n\n                        <!-- Reject button -->\n                        <button class=\"btn purple_btn\" @click=\"rejectRequest()\">\n                            <span>{{ $t('message.btn_reject') }}</span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </section>\n\n    <!-- Sign transaction modal -->\n    <transition name=\"modal\">\n    <SignTxModal v-if=\"showSignTxModal\"/>\n    </transition>\n\n    <!-- Overlay -->\n    <transition name=\"fade\">\n    <div class=\"modal_overlay\" @click.prevent=\"emitter.emit('close_any_modal')\" v-if=\"showSignTxModal\"></div>\n    </transition>\n</template>\n\n\n<script setup>\n    import { ref, inject } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { useNotification } from '@kyvg/vue3-notification'\n    import { signTx, sendTx, getExplorerLink } from '@/utils'\n\n    // Components\n    import Loader from '@/components/Loader.vue'\n    import TxFee from '@/components/TxFee.vue'\n    import SignTxModal from '@/components/modal/SignTxModal.vue'\n\n\n    const store = useGlobalStore(),\n        emitter = inject('emitter'),\n        notification = useNotification(),\n        i18n = inject('i18n'),\n        memo = ref(''),\n        isProcess = ref(false),\n        showSignTxModal = ref(false)\n\n\n    // Approve request\n    async function approveRequest() {\n        // Set process status\n        isProcess.value = true\n\n        try {\n            // Update TxFee info\n            if (store.TxFee.isRemember) {\n                await store.updateTxFeeInfo()\n            }\n\n            // Sign Tx\n            let txBytes = await signTx(store.jetPackRequest.data.msg, memo.value)\n\n            // Clean notifications\n            notification.notify({\n                group: 'default',\n                clean: true\n            })\n\n            // Show notification\n            notification.notify({\n                group: 'default',\n                speed: 200,\n                duration: -100,\n                title: i18n.global.t('message.notification_tx_pending_title'),\n                type: 'pending',\n                data: {\n                    isCollapsible: true,\n                    explorer_link: getExplorerLink(store.currentNetwork)\n                }\n            })\n\n            // Send Tx\n            sendTx(txBytes).catch(error => {\n                console.log(error)\n\n                // Show error\n                showError(error)\n            })\n\n            // Event \"close_send_tx_modal\"\n            emitter.emit('close_send_tx_modal')\n        } catch (error) {\n            console.log(error)\n\n            // Show error\n            showError(error)\n\n            // Show redirect modal\n            store.showRedirectModal = true\n        }\n    }\n\n\n    // Reject request\n    function rejectRequest() {\n        // Send response\n        const connection = store.RTCConnections[store.jetPackRequest.data.peer_id]\n\n        if (connection) {\n            connection.send({\n                type: 'error',\n                requestId: store.jetPackRequest.data.request_id,\n                message: i18n.global.t('message.jp_message_rejected')\n            })\n        }\n\n        // Show notification\n        notification.notify({\n            group: 'default',\n            speed: 200,\n            duration: 1000,\n            title: i18n.global.t('message.notification_jp_send_reject'),\n            type: 'default'\n        })\n\n        // Reset Tx Fee\n        store.resetTxFee()\n\n        // Reset jetPack request\n        store.jetPackRequest = null\n\n        // Event \"close_send_tx_modal\"\n        emitter.emit('close_send_tx_modal')\n\n        // Show redirect modal\n        store.showRedirectModal = true\n    }\n\n\n    // Show error message\n    function showError(error) {\n        // Set process status\n        isProcess.value = false\n\n        // Get error code\n        let errorText = ''\n\n        // Get error title\n        error.code\n            ? errorText = i18n.global.t(`message.notification_tx_error_${error.code}`)\n            : errorText = i18n.global.t('message.notification_tx_error_rejected')\n\n        // Clean notifications\n        notification.notify({\n            group: 'default',\n            clean: true\n        })\n\n        // Show notification\n        notification.notify({\n            group: 'default',\n            speed: 200,\n            duration: 6000,\n            title: i18n.global.t('message.notification_tx_error_title'),\n            text: errorText,\n            type: 'error'\n        })\n\n        // Clear tx hash\n        store.networks[store.currentNetwork].currentTxHash = null\n\n        // Send response\n        if (store.jetPackRequest) {\n            const connection = store.RTCConnections[store.jetPackRequest.data.peer_id]\n\n            if (connection) {\n                connection.send({\n                    type: 'tx',\n                    requestId: store.jetPackRequest.data.request_id,\n                    status: 'success',\n                    hash: store.networks[store.currentNetwork].currentTxHash\n                })\n            }\n        }\n\n        // Reset jetPack request\n        store.jetPackRequest = null\n\n        // Event \"close_send_tx_modal\"\n        emitter.emit('close_send_tx_modal')\n\n        // Reset Tx Fee\n        store.resetTxFee()\n    }\n\n\n    // Open SignTx modal\n    function openSignTxModal() {\n        // Show SignTx modal\n        showSignTxModal.value = true\n\n        // Update status\n        store.isAnyModalOpen = true\n    }\n\n\n    // Event \"auth\"\n    emitter.on('auth', () => {\n        // Hide SignTx modal\n        showSignTxModal.value = false\n\n        // Update status\n        store.isAnyModalOpen = false\n\n        // Send tokens\n        approveRequest()\n    })\n\n\n    // Event \"close_sign_tx_modal\"\n    emitter.on('close_sign_tx_modal', () => {\n        // Hide SignTx modal\n        showSignTxModal.value = false\n\n        // Update status\n        store.isAnyModalOpen = false\n    })\n\n\n    // Event \"close_any_modal\"\n    emitter.on('close_any_modal', () => {\n        // Hide SignTx modal\n        showSignTxModal.value = false\n\n        // Update status\n        store.isAnyModalOpen = false\n    })\n</script>\n\n\n<style scoped>\n    .send_tx\n    {\n        position: fixed;\n        z-index: 9;\n        top: 0;\n        left: 0;\n\n        width: 100%;\n        height: 100%;\n        background: var(--bg);\n    }\n\n\n    .memo_field\n    {\n        margin-bottom: auto;\n    }\n\n\n    pre\n    {\n        display: block;\n        overflow: auto;\n\n        width: 100%;\n        margin-bottom: 12px;\n        padding: 15px;\n\n        border: 1px solid #1a0242;\n        border-radius: 10px;\n        background: #170232;\n    }\n\n\n    .btns\n    {\n        margin-top: 0;\n        padding: 0;\n    }\n</style>","import script from \"./SendTx.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SendTx.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./SendTx.vue?vue&type=style&index=0&id=752e1d55&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-752e1d55\"]])\n\nexport default __exports__","<template>\n    <!-- Loader -->\n    <Loader v-if=\"isReseting\" />\n\n    <!-- Main component -->\n    <component :is=\"layout\" v-else />\n\n    <!-- Notifications -->\n    <notifications position=\"top left\" group=\"default\" width=\"100%\" animation-type=\"velocity\" :animation=\"notificationAnimation\"\n        @start=\"notificationsOnStart($event)\"\n        @destroy=\"notificationsOnDestroy()\"\n    >\n        <template #body=\"props\">\n            <div class=\"notification\" :class=\"{\n                pending: props.item.type == 'pending',\n                success: props.item.type == 'success',\n                error: props.item.type == 'error',\n                collapsible: props.item.data.isCollapsible\n            }\">\n                <!-- Notifications icon -->\n                <div class=\"icon\" v-if=\"props.item.type == 'copied'\">\n                    <svg><use xlink:href=\"@/assets/sprite.svg#ic_notification_copied\"></use></svg>\n                </div>\n\n                <!-- Notifications icon -->\n                <div class=\"icon\" v-if=\"props.item.type == 'pending'\">\n                    <div class=\"loader\"></div>\n                </div>\n\n                <!-- Notifications icon -->\n                <div class=\"icon\" v-if=\"props.item.type == 'success'\">\n                    <svg><use xlink:href=\"@/assets/sprite.svg#ic_notification_success\"></use></svg>\n                </div>\n\n                <!-- Notifications icon -->\n                <div class=\"icon\" v-if=\"props.item.type == 'error'\">\n                    <svg><use xlink:href=\"@/assets/sprite.svg#ic_notification_error\"></use></svg>\n                </div>\n\n                <div>\n                    <!-- Notifications title -->\n                    <div class=\"title\">\n                        {{ props.item.title }} {{ props.item.text }}\n                    </div>\n\n                    <!-- Notifications explorer link -->\n                    <div class=\"explorer\" v-if=\"props.item.data.explorer_link\">\n                        <a :href=\"props.item.data.explorer_link\" target=\"_blank\" rel=\"noopener nofollow\">\n                            {{ $t('message.notification_explorer_link') }}\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </template>\n    </notifications>\n\n\n    <!-- Validators modal -->\n    <transition name=\"from_right\">\n    <ConnectWalletModal v-if=\"showConnectWalletModal\" />\n    </transition>\n\n    <!-- Validators modal -->\n    <transition name=\"from_right\">\n    <SendTxModal v-if=\"showSendTxModal\" />\n    </transition>\n\n    <!-- Sign transaction modal -->\n    <transition name=\"modal\">\n    <RedirectModal v-if=\"store.showRedirectModal\"/>\n    </transition>\n\n    <!-- Overlay -->\n    <transition name=\"fade\">\n    <div class=\"modal_overlay\" @click.prevent=\"emitter.emit('close_redirect_modal')\" v-if=\"store.showRedirectModal\"></div>\n    </transition>\n</template>\n\n\n<script setup>\n    import { ref, reactive, onBeforeMount, onMounted, inject, watch, computed } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { useNotification } from '@kyvg/vue3-notification'\n    import { useRoute, useRouter } from 'vue-router'\n    import { useTitle, useNetwork } from '@vueuse/core'\n    import { convertArrayBuffersToUint8Arrays, getTgUserId } from '@/utils'\n    import { DBgetData } from '@/utils/db'\n\n    // Components\n    import Loader from '@/components/Loader.vue'\n    import RedirectModal from '@/components/modal/RedirectModal.vue'\n    import ConnectWalletModal from '@/components/jetPack/ConnectWallet.vue'\n    import SendTxModal from '@/components/jetPack/SendTx.vue'\n\n\n    const store = useGlobalStore(),\n        i18n = inject('i18n'),\n        router = useRouter(),\n        route = useRoute(),\n        emitter = inject('emitter'),\n        title = useTitle(),\n        isReseting = ref(false),\n        layout = computed(() => route.meta.layout || 'default-layout'),\n        notification = useNotification(),\n        notificationTimeout = ref(null),\n        notificationAnimation = {\n            enter: { translateY: '0%' },\n            leave: { translateY: '-100%' }\n        },\n        network = reactive(useNetwork()),\n        showConnectWalletModal = ref(false),\n        showSendTxModal = ref(false)\n\n\n    onBeforeMount(async () => {\n        // Set page title\n        title.value = i18n.global.t('message.page_title')\n\n        // Set analytics\n        if (process.env.VUE_APP_IS_PRODUCTION === 'true') {\n            var _paq = window._paq = window._paq || [];\n\t\t\t/* tracker methods like \"setCustomDimension\" should be called before \"trackPageView\" */\n\t\t\t_paq.push(['trackPageView']);\n\t\t\t_paq.push(['enableLinkTracking']);\n\t\t\t(function() {\n\t\t\tvar u=\"//metrics.jetwallet.app/\";\n\t\t\t_paq.push(['setTrackerUrl', u+'matomo.php']);\n\t\t\t_paq.push(['setSiteId', '1']);\n\t\t\tvar d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n\t\t\tg.async=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);\n\t\t\t})();\n        }\n\n        // Get telegram user ID\n        if (window.Telegram && window.Telegram.WebApp) {\n            getTgUserId(Telegram.WebApp.initData)\n        }\n\n        // Create RTCPeer\n        store.RTCPeer = new Peer(`jw-${store.tgBotId}-${store.tgUserId}`)\n\n        // New connection\n        store.RTCPeer.on('connection', conn => {\n            console.log(conn.peer)\n            // Save connection\n            store.RTCConnections[conn.peer] = conn\n\n            // Save connection status\n            store.isRTCConnected = true\n\n            // Processing data receipt\n            conn.on('data', data => {\n                // Save request\n                store.jetPackRequest = convertArrayBuffersToUint8Arrays(data)\n\n                // Connect wallet\n                if (store.jetPackRequest.method === 'connectWallet') {\n                    if (store.currentAddress) {\n                        // Show connect wallet modal\n                        showConnectWalletModal.value = true\n                    } else {\n                        // Watch for changes in the current address\n                        let stopWatch = watch(computed(() => store.currentAddress), () => {\n                            if (store.currentAddress) {\n                                // Stop watch\n                                stopWatch()\n\n                                // Show connect wallet modal\n                                showConnectWalletModal.value = true\n                            }\n                        })\n                    }\n                }\n\n                // Switch network\n                if (store.jetPackRequest.method === 'switchChain') {\n                    // Get connection\n                    let connection = store.RTCConnections[store.jetPackRequest.data.peer_id]\n\n                    // Switch\n                    store.jetPackSwitchNetwork()\n                        .then(() => {\n                            // Watch for changes in the current address\n                            let stopWatch = watch(computed(() => store.currentAddress), () => {\n                                if (store.currentAddress.length) {\n                                    // Stop watch\n                                    stopWatch()\n\n                                    // Send response\n                                    if (connection) {\n                                        connection.send({\n                                            type: 'switchChain',\n                                            requestId: store.jetPackRequest.data.request_id,\n                                            chain_id: store.jetPackRequest.data.chain_id,\n                                            address: store.currentAddress,\n                                        })\n                                    }\n                                }\n                            })\n                        }).catch(() => {\n                            // Send response\n                            if (connection) {\n                                connection.send({\n                                    type: 'error',\n                                    requestId: store.jetPackRequest.data.request_id,\n                                    message: i18n.global.t('message.jp_chain_not_found')\n                                })\n                            }\n                        })\n                }\n\n                // Get balances\n                if (store.jetPackRequest.method === 'loadBalances') {\n                    // Get connection\n                    let connection = store.RTCConnections[store.jetPackRequest.data.peer_id]\n\n                    if (store.isBalancesGot) {\n                        // Send response\n                        if (connection) {\n                            connection.send({\n                                type: 'balances',\n                                requestId: store.jetPackRequest.data.request_id,\n                                balances: store.balances\n                            })\n                        }\n                    } else {\n                        // Watch for changes in the balance receipt status\n                        let stopWatch = watch(computed(() => store.isBalancesGot), () => {\n                            if (store.isBalancesGot) {\n                                // Stop watch\n                                stopWatch()\n\n                                // Send response\n                                if (connection) {\n                                    connection.send({\n                                        type: 'balances',\n                                        requestId: store.jetPackRequest.data.request_id,\n                                        balances: store.balances\n                                    })\n                                }\n                            }\n                        })\n                    }\n                }\n\n                // Send Tx\n                if (store.jetPackRequest.method === 'sendTx') {\n                    // Show send Tx modal\n                    showSendTxModal.value = true\n                }\n            })\n\n\n            // Handle disconnection event\n            store.RTCPeer.on('close', () => {\n                // Delete connection\n                delete store.RTCConnections[conn.peer]\n\n                // Update connection status\n                if (!Object.keys(store.RTCConnections.length)) {\n                    store.isRTCConnected = false\n                }\n            })\n\n            store.RTCPeer.on('disconnected', () => {\n                // Delete connection\n                delete store.RTCConnections[conn.peer]\n\n                // Update connection status\n                if (!Object.keys(store.RTCConnections.length)) {\n                    store.isRTCConnected = false\n                }\n            })\n        })\n\n\n        // Clear Peer on close\n        window.addEventListener('beforeunload', () => {\n            // Close all connections on close\n            store.RTCConnections.forEach(el => el.close())\n\n            // Close Peer\n            if (store.RTCPeer) {\n                store.RTCPeer.destroy()\n            }\n        })\n\n\n        // Telegram WebApp settings\n        if (window.Telegram && window.Telegram.WebApp) {\n            // Initialize the mini-application\n            await Telegram.WebApp.ready()\n\n            // Call the expand method to open to full height\n            Telegram.WebApp.expand()\n\n            // Set header color\n            Telegram.WebApp.setHeaderColor('#5b3895')\n\n            // Show progress\n            Telegram.WebApp.MainButton.showProgress(true)\n\n            // Disable vertical swipes\n            Telegram.WebApp.disableVerticalSwipes()\n\n            // Init biometric\n            Telegram.WebApp.BiometricManager.init()\n\n            // Age modal\n            await store.getAgeConfirmed()\n\n            if (!store.isAgeConfirmed) {\n                Telegram.WebApp.showConfirm(i18n.global.t('message.age_modal_text'), async result => {\n                    result\n                        ? await store.setAgeConfirmed() // Approve age\n                        : Telegram.WebApp.close() // Reject age\n                })\n            }\n\n            // Qr code received\n            Telegram.WebApp.onEvent('qrTextReceived', data => {\n                // Close QR popup\n                Telegram.WebApp.closeScanQrPopup()\n\n                // Parse data\n                let parsedData = data.data.split('|')\n\n                // Redirect to send\n                redirectToSend(parsedData)\n            })\n        }\n    })\n\n\n    onMounted(() => {\n        // window.onerror = function (message, source, lineno, colno, error) {\n\t\t// \tconsole.log(`Error: ${message}\\nSource: ${source}\\nLine: ${lineno}\\nColumn: ${colno}\\n${error ? 'Stack: ' + error.stack : ''}`)\n\n        //     // Clean notifications\n        //     notification.notify({\n        //         group: 'default',\n        //         clean: true\n        //     })\n\n        //     // Show notification\n        //     notification.notify({\n        //         group: 'default',\n        //         speed: 200,\n        //         duration: -100,\n        //         title: i18n.global.t('message.notification_error_title'),\n        //         type: 'error'\n        //     })\n\n\t\t// \treturn true\n\t\t// }\n\n\t\t// window.addEventListener('unhandledrejection', function (event) {\n\t\t// \tconsole.log(`Unhandled Promise Rejection:\\n${event.reason}`)\n\n        //     // Clean notifications\n        //     notification.notify({\n        //         group: 'default',\n        //         clean: true\n        //     })\n\n        //     // Show notification\n        //     notification.notify({\n        //         group: 'default',\n        //         speed: 200,\n        //         duration: -100,\n        //         title: i18n.global.t('message.notification_error_title'),\n        //         type: 'error'\n        //     })\n\n\t\t// \tevent.preventDefault()\n\t\t// })\n\n\n        setTimeout(() => {\n            // Call the expand method to open to full height\n            Telegram.WebApp.expand()\n        }, 5000)\n    })\n\n\n    watch(computed(() => store.isInitialized), () => {\n        // Connect wallet\n        if (store.jetPackRequest && store.jetPackRequest.method === 'connectWallet') {\n            if (store.currentAddress) {\n                // Show connect wallet modal\n                showConnectWalletModal.value = true\n            } else {\n                // Watch for changes in the current address\n                let stopWatch = watch(computed(() => store.currentAddress), () => {\n                    if (store.currentAddress) {\n                        // Stop watch\n                        stopWatch()\n\n                        // Show connect wallet modal\n                        showConnectWalletModal.value = true\n                    }\n                })\n            }\n        }\n    })\n\n\n    // Wallet change\n    watch(computed(() => store.currentWalletID), async (newValue, oldValue) => {\n        if (oldValue) {\n            // Get wallets\n            let DBWallets = await DBgetData('global', 'wallets')\n\n            if (DBWallets !== undefined) {\n                // Clean notifications\n                notification.notify({\n                    group: 'default',\n                    clean: true\n                })\n\n                // Reinit APP\n                await store.initApp()\n            }\n        }\n    })\n\n\n    // Network change\n    watch(computed(() => store.currentNetwork), async () => {\n        if (store.isInitialized || store.forcedUnlock) {\n            // Clean notifications\n            notification.notify({\n                group: 'default',\n                clean: true\n            })\n\n            // Reinit APP\n            await store.initApp()\n        }\n    })\n\n\n    // Offline mode\n    watch(computed(() => network.isOnline), async () => {\n        // Clean notifications\n        notification.notify({\n            group: 'default',\n            clean: true\n        })\n\n        // Offline\n        if (!network.isOnline) {\n            // Show notification\n            notification.notify({\n                group: 'default',\n                speed: 200,\n                duration: -100,\n                title: i18n.global.t('message.notification_offline_title'),\n                type: 'error'\n            })\n        }\n    })\n\n\n    // Redirect to send\n    function redirectToSend(parsedData) {\n        // Change network\n        if (store.currentNetwork !== parsedData[1]) {\n            // Redirect\n            router.push({ path: '/account' })\n\n            // Set new current network\n            store.setCurrentNetwork(parsedData[1])\n\n            // Wait isInitialized\n            let stopWatch = watch(computed(() => store.isInitialized), () => {\n                if (store.isInitialized && parsedData[0] === 'send') {\n                    // Stop watch\n                    stopWatch()\n\n                    // Redirect to send page\n                    router.push({\n                        path: '/account/send',\n                        query: {\n                            denom: store.networks[store.currentNetwork].denom,\n                            address: parsedData[2],\n                            amount: parsedData[3]\n                        }\n                    })\n                }\n            })\n        } else {\n            // Redirect to send\n            if (parsedData[0] === 'send') {\n                router.push({\n                    path: '/account/send',\n                    query: {\n                        denom: store.networks[store.currentNetwork].denom,\n                        address: parsedData[2],\n                        amount: parsedData[3]\n                    }\n                })\n            }\n        }\n    }\n\n\n    // Notifications start event\n    function notificationsOnStart(params) {\n        // Is collapsible\n        if (params.data.isCollapsible) {\n            notificationTimeout.value = setTimeout(() => {\n                // Show collapsible notification\n                let notification = document.querySelector('.notification.collapsible')\n\n                if (notification) {\n                    // Add notification class\n                    notification.classList.add('small')\n                }\n\n                // Clear timeout\n                notificationTimeout.value = null\n            }, store.notificationsCollapsingDelay)\n        }\n    }\n\n\n    // Notifications destroy event\n    function notificationsOnDestroy() {\n        // Clear timeout\n        notificationTimeout.value = null\n    }\n\n\n    // Event \"show_collapsible_notification\"\n    emitter.on('show_collapsible_notification', () => {\n        if (!notificationTimeout.value) {\n            let notification = document.querySelector('.notification.collapsible')\n\n            if (notification) {\n                // Show collapsible notification\n                notification.classList.remove('small')\n\n                // Hide collapsible notification\n                notificationTimeout.value = setTimeout(() => {\n                    if (notification) {\n                        // Add notification class\n                        notification.classList.add('small')\n                    }\n\n                    // Clear timeout\n                    notificationTimeout.value = null\n                }, store.notificationsCollapsingDelay)\n            }\n        }\n    })\n\n\n    // Event \"close_connect_wallet_modal\"\n    emitter.on('close_connect_wallet_modal', () => {\n        // Hide connect wallet modal\n        showConnectWalletModal.value = false\n    })\n\n\n    // Event \"close_send_tx_modal\"\n    emitter.on('close_send_tx_modal', async () => {\n        // Hide send Tx modal\n        showSendTxModal.value = false\n\n        // Check Tx result\n        if (store.networks[store.currentNetwork].currentTxHash) {\n            // Check Tx\n            await store.checkTxResult()\n\n            if (store.networks[store.currentNetwork].currentTxHash) {\n                // Set listener current tx\n                store.setListenerCurrentTx()\n            }\n        }\n    })\n\n\n    // Event \"show_redirect_modal\"\n    emitter.on('show_redirect_modal', () => {\n        // Hide redirect modal\n        store.showRedirectModal = true\n    })\n\n\n    // Event \"close_redirect_modal\"\n    emitter.on('close_redirect_modal', () => {\n        // Hide redirect modal\n        store.showRedirectModal = false\n    })\n\n\n    // Event \"start_reseting\"\n    emitter.on('start_reseting', () => {\n        // Show loader\n        isReseting.value = true\n\n        // Hide loader\n        setTimeout(() => isReseting.value = false, 300)\n    })\n</script>","import script from \"./App.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./App.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <div class=\"main\">\n        <router-view v-slot=\"{ Component }\">\n            <component :is=\"Component\" />\n        </router-view>\n    </div>\n</template>\n","import { render } from \"./Default.vue?vue&type=template&id=66ab4ff8\"\nconst script = {}\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n    <div class=\"main\">\n        <router-view v-slot=\"{ Component }\">\n            <component :is=\"Component\" />\n        </router-view>\n    </div>\n</template>\n\n\n<script setup>\n    import { ref, inject, onMounted, onUnmounted } from 'vue'\n    import { useGlobalStore } from '@/store'\n\n\n    const store = useGlobalStore(),\n        emitter = inject('emitter'),\n        startY = ref(0),\n        isPulling = ref(false),\n        threshold = 70,\n        hasUpdated = ref(false)\n\n\n    onMounted(() => {\n        // Overscroll\n        window.addEventListener('touchstart', handleTouchStart, { passive: false })\n        window.addEventListener('touchmove', handleTouchMove, { passive: false })\n        window.addEventListener('touchend', handleTouchEnd, { passive: false })\n    })\n\n\n    onUnmounted(() => {\n        window.removeEventListener('touchstart', handleTouchStart, { passive: false })\n        window.removeEventListener('touchmove', handleTouchMove, { passive: false })\n        window.removeEventListener('touchend', handleTouchEnd, { passive: false })\n    })\n\n\n    // Handle touch start\n    function handleTouchStart(e) {\n        if (window.scrollY === 0) {\n            startY.value = e.touches[0].pageY\n            isPulling.value = true\n            hasUpdated.value = false\n        }\n    }\n\n\n    // Handle touch move\n    function handleTouchMove(e) {\n        if (isPulling.value && (store.networks[store.currentNetwork].currentTxHash || store.forcedUnlock)) {\n            // Event \"show_collapsible_notification\"\n            emitter.emit('show_collapsible_notification')\n\n            return\n        }\n\n        if (!isPulling.value || hasUpdated.value) return\n\n        let currentY = e.touches[0].pageY,\n            distance = currentY - startY.value\n\n\n        if (distance > 0 && distance >= threshold) {\n            e.preventDefault()\n            e.stopPropagation()\n\n            // Close any modal\n            if (store.isAnyModalOpen) {\n                // Set event \"close_any_modal\"\n                emitter.emit('close_any_modal')\n\n                isPulling.value = false\n\n                return\n            }\n\n            // Updating flag\n            hasUpdated.value = true\n\n            // Top loader\n            let account = document.querySelector('.account_page')\n\n            if (account) {\n                account.classList.add('updating')\n\n                setTimeout(() => account.classList.remove('updating'), 500)\n\n                // Update all balances\n                store.updateAllBalances()\n            }\n        }\n    }\n\n\n    // Handle touch end\n    function handleTouchEnd(e) {\n        isPulling.value = false\n    }\n</script>\n","import script from \"./Account.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Account.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { createRouter, createWebHistory } from 'vue-router'\nimport { DBgetMultipleData, showDatabaseStructure } from '@/utils/db'\nimport { decodeFromBase64 } from '@/utils'\nimport { useGlobalStore } from '@/store'\n\nimport defaultLayout from '@/layouts/Default.vue'\nimport accountLayout from '@/layouts/Account.vue'\n\n\nconst routes = [\n    {\n\t\tpath: '/',\n\t\tname: 'MainPage',\n\t\tcomponent: () => import('../views/IndexPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['register', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/create_wallet',\n\t\tname: 'CreateWallet',\n\t\tcomponent: () => import('../views/CreateWallet/IndexPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['register', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/confirm_wallet',\n\t\tname: 'CreateWalletConfirm',\n\t\tcomponent: () => import('../views/CreateWallet/ConfirmPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['register', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/create_pin',\n\t\tname: 'CreatePin',\n\t\tcomponent: () => import('../views/CreateWallet/PinPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['register', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/wallet_created',\n\t\tname: 'CreatedWallet',\n\t\tcomponent: () => import('../views/CreateWallet/CreatedPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['not_register', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/import_wallet',\n\t\tname: 'ImportWallet',\n\t\tcomponent: () => import('../views/CreateWallet/ImportPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['register', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/auth',\n\t\tname: 'Auth',\n\t\tcomponent: () => import('../views/AuthPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['not_register', 'authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/lock',\n\t\tname: 'Lock',\n\t\tcomponent: () => import('../views/UserLockPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['not_register']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account',\n\t\tname: 'Account',\n\t\tcomponent: () => import('../views/Account/IndexPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/claim_confirm',\n\t\tname: 'ClaimConfirm',\n\t\tcomponent: () => import('../views/Account/ClaimConfirmPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/stake',\n\t\tname: 'Stake',\n\t\tcomponent: () => import('../views/Account/StakePage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/unstake',\n\t\tname: 'Unstake',\n\t\tcomponent: () => import('../views/Account/UnstakePage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/redelegate',\n\t\tname: 'Redelegate',\n\t\tcomponent: () => import('../views/Account/RedelegatePage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/receive',\n\t\tname: 'Receive',\n\t\tcomponent: () => import('../views/Account/ReceivePage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/send',\n\t\tname: 'Send',\n\t\tcomponent: () => import('../views/Account/SendPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/add_wallet',\n\t\tname: 'AddWallet',\n\t\tcomponent: () => import('../views/AddWallet/IndexPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/add_wallet/create',\n\t\tname: 'AddWalletCreate',\n\t\tcomponent: () => import('../views/AddWallet/CreatePage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/add_wallet/confirm',\n\t\tname: 'AddWalletConfirm',\n\t\tcomponent: () => import('../views/AddWallet/ConfirmPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/add_wallet/import',\n\t\tname: 'AddWalletImport',\n\t\tcomponent: () => import('../views/AddWallet/ImportPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n]\n\n\nconst router = createRouter({\n    history: createWebHistory(),\n    routes\n})\n\n\nrouter.beforeResolve(async (to, from, next) => {\n\tlet store = useGlobalStore(),\n\t\tDBData = await DBgetMultipleData('global', ['isRegister', 'isUserLock', 'userLockTimestamp'])\n\n\t// Parse jetPack request\n\tif (to.query.tgWebAppStartParam) {\n\t\tstore.jetPackRequest = decodeFromBase64(to.query.tgWebAppStartParam)\n\t}\n\n\t// Check access\n\tto.matched.some(record => {\n\t\tlet access = record.meta.accessDenied\n\n\t\tif(access.length) {\n\t\t\t// Not register\n\t\t\tif(access.includes('not_register') && DBData.isRegister == undefined) {\n\t\t\t\tnext({ name: 'MainPage' })\n\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\t// Lock\n\t\t\telse if(access.includes('locked') && DBData.isUserLock && (new Date() - new Date(DBData.userLockTimestamp) < store.userLockTime)) {\n\t\t\t\tnext({ name: 'Lock' })\n\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\t// Register\n\t\t\telse if(access.includes('register') && DBData.isRegister) {\n\t\t\t\tnext({ name: 'Auth' })\n\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\t// Not authorized\n\t\t\telse if(access.includes('not_authorized') && !store.isAuthorized) {\n\t\t\t\tnext({ name: 'Auth' })\n\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\t// Authorized\n\t\t\telse if(access.includes('authorized') && store.isAuthorized) {\n\t\t\t\tnext({ name: 'Account' })\n\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tnext()\n\t\t\t}\n\t\t}\n\t})\n})\n\n\nexport default router\n","export const vFocus = {\n    mounted(el) {\n        el.focus()\n    }\n}","export const vParallax = {\n    mounted(el) {\n        window.addEventListener('scroll', function () {\n            if (window.scrollY <= el.offsetHeight) {\n                el.style.opacity = (1 - window.scrollY / (el.offsetHeight * 0.6))\n\n                el.style.transform = `translateY(-${(window.scrollY / el.offsetHeight) * 0.6 * 100}%)`\n            }\n        })\n    }\n}","export const vOdometer = {\n    mounted(el, number) {\n        if (number) {\n            // Get array\n            let numberArr = number.value.toFixed(10).split('')\n\n            // Generate base html\n            el.innerHTML = numberArr.map(char => `\n                <div class=\"digit\">\n                    <span class=\"old\">${char}</span>\n                </div>\n            `).join('')\n        }\n    },\n\n    updated(el, number) {\n        // Get array\n        let numberArr = number.value.toFixed(10).split(''),\n            oldNumberArr = number.oldValue?.toFixed(10).split('') || [],\n            maxLength = Math.max(numberArr.length, oldNumberArr.length),\n            html = '',\n            mismatchIndex = null,\n            mismatchCount = 0,\n            animationDuration = 1500,\n            animationDelay = 50\n\n\n        // Pad arrays with empty strings to maximum length\n        numberArr = numberArr.concat(Array(maxLength - numberArr.length).fill(''))\n        oldNumberArr = oldNumberArr.concat(Array(maxLength - oldNumberArr.length).fill(''))\n\n\n        // Generate html\n        el.innerHTML = numberArr.map((char, i) => {\n            // Get mismatch\n            if (mismatchIndex === null && char !== oldNumberArr[i]) {\n                mismatchIndex = i\n                mismatchCount = maxLength - i\n                animationDuration = animationDuration - animationDelay * mismatchCount\n            }\n\n            // Calc animation\n            let duration = 0\n\n            if (mismatchIndex !== null) {\n                duration = animationDuration / mismatchCount / 1000\n            }\n\n            html += `<div class=\"digit ${mismatchIndex !== null && i >= mismatchIndex ? 'animate' : ''}\">\n                        <span class=\"new\" style=\"animation-duration: ${parseFloat(duration.toFixed(2))}s; animation-delay: ${animationDelay * (i - mismatchIndex) / 1000}s;\">\n                            ${char}\n                        </span>\n\n                        <span class=\"old\" style=\"animation-duration: ${parseFloat(duration.toFixed(2))}s; animation-delay: ${animationDelay * (i - mismatchIndex) / 1000}s;\">\n                            ${oldNumberArr[i]}\n                        </span>\n                    </div>`\n        })\n\n\n        // Inner html\n        el.innerHTML = html\n    }\n}","import { createApp } from 'vue'\nimport { createPinia } from 'pinia'\n\nimport App from './App.vue'\nimport router from './router'\nimport i18n from './locale'\nimport mitt from 'mitt'\nimport Notifications from '@kyvg/vue3-notification'\nimport velocity from 'velocity-animate'\nimport { register } from 'swiper/element/bundle'\nimport VueCountdown from '@chenfengyuan/vue-countdown'\n\nimport { vFocus } from './directives/v-focus'\nimport { vParallax } from './directives/v-parallax'\nimport { vOdometer } from './directives/v-odometer'\n\n\n// Events\nconst emitter = mitt()\n\n\n// Create App\nconst app = createApp(App)\n\n\n// Pinia\nconst pinia = createPinia()\n\n\n// Vue use\napp.use(pinia)\napp.use(router)\napp.use(i18n)\napp.use(Notifications, { velocity })\n\n\n// Vue provide\napp.provide('i18n', i18n)\napp.provide('emitter', emitter)\n\n\n// Directives\napp.directive('focus', vFocus)\napp.directive('parallax', vParallax)\napp.directive('odometer', vOdometer)\n\n\n// Swiper - register\nregister()\n\n\n// VueCountdown\napp.component(VueCountdown.name, VueCountdown)\n\n\n// Mount\napp.mount('#app')\n","const network = {\n    name: 'Cosmos Hub',\n    lcd_api: 'https://lcd.cosmoshub-4.bronbro.io',\n    rpc_api: 'https://rpc.cosmoshub-4.bronbro.io',\n    websocket_url: 'wss://rpc.cosmoshub-4.bronbro.io:443/websocket',\n\n    denom: 'uatom',\n    token_name: 'ATOM',\n    chain_id: 'cosmoshub-4',\n    prefix: 'cosmos',\n    explorer_link: 'https://www.mintscan.io/cosmos/tx/{tx_hash}',\n    alias: 'cosmoshub',\n    exponent: 6,\n    gas_adjustment: 1.6,\n    address_length: 20,\n    gas_amount_send: 100000,\n    gas_amount_claim: 1000000,\n    gas_amount_stake: 500000,\n    gas_amount_unstake: 500000,\n    gas_amount_redelegate: 1000000,\n    is_staking_available: true\n}\n\nexport default network","const network = {\n    name: 'Bostrom',\n    lcd_api: 'https://lcd.bostrom.bronbro.io',\n    rpc_api: 'https://rpc.bostrom.bronbro.io',\n    websocket_url: 'wss://rpc.bostrom.bronbro.io:443/websocket',\n\n    denom: 'boot',\n    token_name: 'BOOT',\n    chain_id: 'bostrom',\n    prefix: 'bostrom',\n    explorer_link: 'https://ping.pub/bostrom/tx/{tx_hash}',\n    alias: 'bostrom',\n    exponent: 0,\n    gas_adjustment: 1.3,\n    address_length: 20,\n    gas_amount_send: 300000,\n    gas_amount_claim: 300000,\n    gas_amount_stake: 250000,\n    gas_amount_unstake: 250000,\n    gas_amount_redelegate: 300000,\n    is_staking_available: true\n}\n\nexport default network","const network = {\n    name: 'Neutron',\n    lcd_api: 'https://lcd.neutron-1.bronbro.io',\n    rpc_api: 'https://rpc.neutron-1.bronbro.io',\n    websocket_url: 'wss://rpc.neutron-1.bronbro.io:443/websocket',\n\n    denom: 'untrn',\n    token_name: 'NTRN',\n    chain_id: 'neutron-1',\n    prefix: 'neutron',\n    explorer_link: 'https://www.mintscan.io/neutron/tx/{tx_hash}',\n    alias: 'neutron',\n    exponent: 6,\n    gas_adjustment: 1.6,\n    address_length: 20,\n    gas_amount_send: 300000,\n    gas_amount_claim: 300000,\n    gas_amount_stake: 250000,\n    gas_amount_unstake: 250000,\n    gas_amount_redelegate: 300000,\n    is_staking_available: false\n}\n\nexport default network","const network = {\n    name: 'Pion',\n    lcd_api: 'https://lcd.pion-1.bronbro.io',\n    rpc_api: 'https://rpc.pion-1.bronbro.io',\n    websocket_url: 'wss://rpc.pion-1.bronbro.io:443/websocket',\n\n    logo: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/neutron/images/neutron-raw.svg',\n    denom: 'untrn',\n    token_name: 'NTRN',\n    chain_id: 'pion-1',\n    prefix: 'neutron',\n    explorer_link: 'https://neutron.celat.one/pion-1/txs/{tx_hash}',\n    alias: 'pion',\n    exponent: 6,\n    gas_adjustment: 1.6,\n    address_length: 20,\n    gas_amount_send: 300000,\n    gas_amount_claim: 300000,\n    gas_amount_stake: 250000,\n    gas_amount_unstake: 250000,\n    gas_amount_redelegate: 300000,\n    is_staking_available: false\n}\n\nexport default network","const network = {\n    name: 'OmniFlix',\n    lcd_api: 'https://lcd.omniflix.bronbro.io',\n    rpc_api: 'https://rpc.omniflix.bronbro.io',\n    websocket_url: 'wss://rpc.omniflix.bronbro.io:443/websocket',\n\n    denom: 'uflix',\n    token_name: 'FLIX',\n    chain_id: 'omniflixhub-1',\n    prefix: 'omniflix',\n    explorer_link: 'https://www.mintscan.io/omniflix/tx/{tx_hash}',\n    alias: 'omniflix',\n    exponent: 6,\n    gas_adjustment: 1.3,\n    address_length: 20,\n    gas_amount_send: 300000,\n    gas_amount_claim: 300000,\n    gas_amount_stake: 250000,\n    gas_amount_unstake: 250000,\n    gas_amount_redelegate: 300000,\n    is_staking_available: true\n}\n\nexport default network","const network = {\n    name: 'Dymension Hub',\n    lcd_api: 'https://lcd.dymension.bronbro.io',\n    rpc_api: 'https://rpc.dymension.bronbro.io',\n    websocket_url: 'wss://rpc.dymension.bronbro.io:443/websocket',\n\n    denom: 'adym',\n    token_name: 'DYM',\n    chain_id: 'dymension_1100-1',\n    prefix: 'dym',\n    explorer_link: 'https://www.mintscan.io/dymension/tx/{tx_hash}',\n    alias: 'dymension',\n    exponent: 6,\n    gas_adjustment: 1.3,\n    address_length: 20,\n    gas_amount_send: 300000,\n    gas_amount_claim: 300000,\n    gas_amount_stake: 250000,\n    gas_amount_unstake: 250000,\n    gas_amount_redelegate: 300000,\n    is_staking_available: true\n}\n\nexport default network","const network = {\n    name: 'Stride',\n    lcd_api: 'https://lcd.stride.bronbro.io',\n    rpc_api: 'https://rpc.stride.bronbro.io',\n    websocket_url: 'wss://rpc.stride.bronbro.io:443/websocket',\n\n    denom: 'ustrd',\n    token_name: 'STRD',\n    chain_id: 'stride-1',\n    prefix: 'stride',\n    explorer_link: 'https://www.mintscan.io/stride/tx/{tx_hash}',\n    alias: 'stride',\n    exponent: 6,\n    gas_adjustment: 1.3,\n    address_length: 20,\n    gas_amount_send: 300000,\n    gas_amount_claim: 300000,\n    gas_amount_stake: 250000,\n    gas_amount_unstake: 250000,\n    gas_amount_redelegate: 300000,\n    is_staking_available: true\n}\n\nexport default network","import { defineStore } from 'pinia'\nimport { getAddress, denomTraces, hashDataWithKey, generateHMACKey, generateAESKey, getPriceByDenom, getExplorerLink, encryptData, decryptData } from '@/utils'\nimport { chains, assets } from 'chain-registry'\nimport { DBaddData, DBgetMultipleData, DBgetData, DBclearAllData, DBclearStore, DBcheckStoreName, DBdeleteData } from '@/utils/db'\nimport { useNotification } from '@kyvg/vue3-notification'\nimport sss from 'shamirs-secret-sharing'\nimport i18n from '@/locale'\n\n\n// Networks\nimport cosmoshub from '@/store/networks/cosmoshub'\nimport bostrom from '@/store/networks/bostrom'\nimport neutron from '@/store/networks/neutron'\nimport pion from '@/store/networks/pion'\n// import mocha from '@/store/networks/mocha'\nimport omniflix from '@/store/networks/omniflix'\nimport dymension from '@/store/networks/dymension'\nimport stride from '@/store/networks/stride'\n// import localbostrom from '@/store/networks/localbostrom'\n\n\n// Networks additional optionsupdateUserAuthErrorLimit\nconst networksAdditionalOptions = {\n    websocket: null,\n    currentTxHash: null,\n    unbondingTime: 0,\n    totalBondedTokens: 0,\n    totalUnstakingTokens: 0,\n    isUnstakingCancelSupport: false\n}\n\n\n// Notifications\nconst notification = useNotification()\n\n\nexport const useGlobalStore = defineStore('global', {\n    state: () => ({\n        isInitializing: false,\n        isInitialized: false,\n        isBalancesGot: false,\n        isStakedBalancesGot: false,\n        isRewardsGot: false,\n        isUnstakingBalancesGot: false,\n        isAuthorized: false,\n        isAnyModalOpen: false,\n        isAgeConfirmed: false,\n        isRTCConnected: false,\n\n        defaultDerivationPath: \"m/44'/118'/0'/0/0\",\n        showRedirectModal: false,\n        forcedUnlock: false,\n        authErrorLimit: 4,\n        DBVersion: 1,\n\n        currentWalletID: null,\n        currentWalletDerivationPath: null,\n        currentWalletName: '',\n        currentNetwork: '',\n        currentAddress: '',\n        currentCurrency: '',\n        currentCurrencySymbol: '',\n\n        IBCSendCurrentChain: null,\n        stakeCurrentValidator: null,\n        unstakeCurrentValidator: null,\n\n        redelegateValidatorFrom: null,\n        redelegateValidatorTo: null,\n\n        wallets: [],\n        prices: [],\n        balances: [],\n        stakedBalances: [],\n        rewardsBalances: [],\n        unstakingBalances: [],\n        redelegations: [],\n\n        tgBotId: 7437812149,\n        // tgUserId: 808958531,\n        tgUserId: '',\n        jetPackRequest: null,\n\n        RTCPeer: null,\n        RTCConnections: [],\n\n        defaultWalletName: 'MyJetWallet',\n\n        authTime: 60 * 60 * 1000,\n        cacheTime: 15 * 60 * 1000,\n        userLockTime: 15 * 60 * 1000,\n        notificationsCollapsingDelay: 2000,\n\n        TxFee: {\n            balance: {},\n            currentLevel: 'average',\n            userGasAmount: 0,\n            gasAmount: 0,\n            isRemember: false,\n            isGasAdjustmentAuto: true,\n            isEnough: false\n        },\n\n        networks: {\n            cosmoshub: Object.assign(cosmoshub, networksAdditionalOptions),\n            bostrom: Object.assign(bostrom, networksAdditionalOptions),\n            neutron: Object.assign(neutron, networksAdditionalOptions),\n            pion: Object.assign(pion, networksAdditionalOptions),\n            // mocha: Object.assign(mocha, networksAdditionalOptions),\n            omniflix: Object.assign(omniflix, networksAdditionalOptions),\n            dymension: Object.assign(dymension, networksAdditionalOptions),\n            stride: Object.assign(stride, networksAdditionalOptions),\n            // localbostrom: Object.assign(localbostrom, networksAdditionalOptions)\n        },\n\n        formatableTokens: [\n            {\n                token_name: 'USD',\n                format_token_name: 'usdt',\n                exponent: 0\n            },\n            {\n                token_name: 'BTC',\n                format_token_name: 'wbtc',\n                exponent: 0\n            },\n            {\n                token_name: 'ETH',\n                format_token_name: 'axleth',\n                exponent: 0\n            }\n        ]\n    }),\n\n\n    actions: {\n        // Get current DB version\n        getCurrentDBVersion() {\n            // Get data from DB\n            let DBCurrentVersion = localStorage.getItem('DBVersion')\n\n            if (!DBCurrentVersion) {\n                // Save data in localStorage\n                localStorage.setItem('DBVersion', this.DBVersion)\n            } else {\n                // Set data from localStorage\n                this.DBVersion = DBCurrentVersion\n            }\n        },\n\n\n        // Set new DB version\n        setNewDBVersion() {\n            // Increase by 1\n            this.DBVersion++\n\n            // Save data in localStorage\n            localStorage.setItem('DBVersion', this.DBVersion)\n        },\n\n\n        // Get current wallet ID\n        async getCurrentWalletID() {\n            // Get data from DB\n            let DBCurrentWalletID = await DBgetData('global', 'currentWalletID')\n\n            if (DBCurrentWalletID !== undefined) {\n                // Set data from DB\n                this.currentWalletID = DBCurrentWalletID\n            }\n        },\n\n\n        // Set current wallet ID\n        async setCurrentWalletID(walletID = null) {\n            if (this.currentWalletID !== walletID) {\n                // Save in DB\n                await DBaddData('global', [\n                    ['currentWalletID', walletID]\n                ])\n\n                // Set data\n                this.currentWalletID = walletID\n            }\n        },\n\n\n        // Auth\n        async auth() {\n            let promises = []\n\n            // Сhange auth limit\n            promises.push(this.updateUserAuthErrorLimit(this.authErrorLimit))\n\n            // Save in DB\n            promises.push(DBaddData('global', [\n                ['authTimestamp', new Date().toISOString()]\n            ]))\n\n            await Promise.all(promises)\n\n            // Set authorized status\n            this.isAuthorized = true\n        },\n\n\n        // Init APP\n        async initApp() {\n            // Init status\n            this.isInitializing = true\n            this.isInitialized = false\n\n            // Forced unlock\n            this.forcedUnlock = false\n\n            // Reset data\n            this.currentAddress = ''\n\n            // Get current wallet ID\n            await this.getCurrentWalletID()\n\n            // Get DB data\n            let DBData = await DBgetMultipleData(`wallet${this.currentWalletID}`, ['derivationPath', 'name', 'currentCurrency', 'currentNetwork', 'TxFeeCurrentLevel', 'TxFeeIsRemember'])\n\n            // Set data from DB\n            this.currentWalletDerivationPath = DBData.derivationPath\n            this.currentWalletName = DBData.name\n            this.currentCurrency = DBData.currentCurrency\n            this.TxFee.currentLevel = DBData.TxFeeCurrentLevel !== undefined ? DBData.TxFeeCurrentLevel : 'average'\n            this.TxFee.isRemember = DBData.TxFeeIsRemember !== undefined ? DBData.TxFeeIsRemember : false\n\n            // Set current network\n            if (this.jetPackRequest) {\n                if (!this.jetPackRequest.data || !this.jetPackRequest.data?.chain_id) {\n                    // Show notification - Param chain_id not passed\n                    notification.notify({\n                        group: 'default',\n                        speed: 200,\n                        duration: 1000,\n                        title: i18n.global.t('message.notification_jp_chain_id_not_passed'),\n                        type: 'error'\n                    })\n\n                    // Reset jetPack request\n                    this.jetPackRequest = null\n\n                    // Set data from DB\n                    this.currentNetwork = DBData.currentNetwork\n                } else {\n                    // Checking for network availability\n                    let chain = Object.values(this.networks).find(network => network.chain_id === this.jetPackRequest.data.chain_id)\n\n                    if (chain) {\n                        // Set data\n                        this.setCurrentNetwork(chain.alias)\n                    } else {\n                        // Show notification - Network not supported\n                        notification.notify({\n                            group: 'default',\n                            speed: 200,\n                            duration: 1000,\n                            title: i18n.global.t('message.notification_jp_chain_not_supported'),\n                            type: 'error'\n                        })\n\n                        // Reset jetPack request\n                        this.jetPackRequest = null\n\n                        // Set data from DB\n                        this.currentNetwork = DBData.currentNetwork\n                    }\n                }\n            } else {\n                // Set data from DB\n                this.networks[DBData.currentNetwork]\n                    ? this.currentNetwork = DBData.currentNetwork\n                    : this.currentNetwork = 'cosmoshub'\n            }\n\n            try {\n                // Get current address / check cache\n                let cacheCurrentAddress = await DBgetData(`wallet${this.currentWalletID}`, `${this.currentNetwork}_currentAddress`)\n\n                if (cacheCurrentAddress === undefined) {\n                    // Get address\n                    let address = await getAddress()\n\n                    // Set current address\n                    this.currentAddress = address\n\n                    // Save in DB\n                    await DBaddData(`wallet${this.currentWalletID}`, [\n                        [`${this.currentNetwork}_currentAddress`, address]\n                    ])\n                } else {\n                    // Set current address\n                    this.currentAddress = cacheCurrentAddress\n                }\n\n\n                // Set current currency symbol\n                switch (this.currentCurrency) {\n                    case 'BTC':\n                        // Set current currency symbol\n                        this.currentCurrencySymbol = 'BTC'\n                        break\n\n                    case 'ETH':\n                        // Set current currency symbol\n                        this.currentCurrencySymbol = 'ETH'\n                        break\n\n                    default:\n                        // Set current currency symbol\n                        this.currentCurrencySymbol = '$'\n                        break\n                }\n\n\n                // Get currencies price / check cache\n                await this.getCurrenciesPrice()\n\n                // Get APR for current networke / check cache\n                await this.getCurrentNetworkAPR()\n\n                // Connect to websocket\n                await this.connectWebsocket()\n\n                // Is cosmos SDK version support unstaking cancel / check cache\n                await this.isUnstakingCancelSupport()\n\n                // Wait balances\n                if (this.networks[this.currentNetwork].is_staking_available) {\n                    Promise.all([await this.getBalances(), await this.getStakedBalances()]).then(() => {\n                        // Init status\n                        this.isInitialized = true\n                    })\n                } else {\n                    Promise.all([await this.getBalances()]).then(() => {\n                        // Init status\n                        this.isInitializing = false\n                        this.isInitialized = true\n                    })\n                }\n            } catch(error) {\n                console.log(error)\n\n                // Clean notifications\n                notification.notify({\n                    group: 'default',\n                    clean: true\n                })\n\n                // Show notification\n                notification.notify({\n                    group: 'default',\n                    speed: 200,\n                    duration: -100,\n                    title: i18n.global.t('message.notification_error_title'),\n                    type: 'error',\n                    data: {\n                        isCollapsible: true\n                    }\n                })\n\n                // Forced unlock\n                this.forcedUnlock = true\n            }\n        },\n\n\n        // Currencies price\n        async getCurrenciesPrice() {\n            // Get from DB\n            let cachePrices = await DBgetData('global', 'prices')\n\n            if (cachePrices === undefined || (new Date() - new Date(cachePrices.timestamp) > this.cacheTime)) {\n                try {\n                    // Send request\n                    await fetch('https://rpc.bronbro.io/price_feed_api/tokens/')\n                        .then(response => response.json())\n                        .then(async data => {\n                            // Set data\n                            this.prices = data\n\n                            // Save in DB\n                            await DBaddData('global', [\n                                ['prices', { data, timestamp: new Date().toISOString() }]\n                            ])\n                        })\n                } catch (error) {\n                    console.error(error)\n                }\n            } else{\n                // Set from cache\n                this.prices = cachePrices.data\n            }\n        },\n\n\n        // Get APR for current network\n        async getCurrentNetworkAPR() {\n            // Get from DB\n            let cacheAPR = await DBgetData(`wallet${this.currentWalletID}`, `${this.currentNetwork}_APR`)\n\n            // Check\n            if (cacheAPR === undefined || (new Date() - new Date(cacheAPR.timestamp) > this.cacheTime)) {\n                try {\n                    // Send request\n                    await fetch('https://rpc.bronbro.io/networks/')\n                        .then(response => response.json())\n                        .then(async data => {\n                            // Find chain\n                            let chain = data.infos.find(chain => chain.denom === (this.networks[this.currentNetwork].token_name).toLowerCase())\n\n                            if (chain) {\n                                // Set network APR\n                                this.networks[this.currentNetwork].APR = chain.apr\n\n                                // Save in DB\n                                await DBaddData(`wallet${this.currentWalletID}`, [\n                                    [`${this.currentNetwork}_APR`, JSON.parse(JSON.stringify({\n                                        value: chain.apr,\n                                        timestamp: new Date().toISOString()\n                                    }))]\n                                ])\n                            }\n                        })\n                } catch (error) {\n                    console.log(error)\n                }\n            } else {\n                // Set from cache\n                this.networks[this.currentNetwork].APR = cacheAPR.value\n            }\n        },\n\n\n        // Get balances\n        async getBalances(forceUpdate = false) {\n            // Balances status\n            this.isBalancesGot = false\n\n            // Reset data\n            this.balances = []\n\n            // Get from DB\n            let cacheBalances = await DBgetData(`wallet${this.currentWalletID}`, `${this.currentNetwork}_balances`)\n\n            if (forceUpdate || cacheBalances === undefined || (new Date() - new Date(cacheBalances.timestamp) > this.cacheTime)) {\n                // Send request\n                try {\n                    await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/bank/v1beta1/balances/${this.currentAddress}`)\n                        .then(response => response.json())\n                        .then(async data => {\n                            if (data.balances.length) {\n                                // Set data\n                                this.balances = data.balances\n\n                                for (let balance of this.balances) {\n                                    // Get balance info\n                                    await this.getBalanceInfo(balance)\n                                }\n\n                                // Clear balances\n                                this.balances = this.balances.filter(obj => obj.hasOwnProperty('exponent'))\n\n                                // Save in DB\n                                await DBaddData(`wallet${this.currentWalletID}`, [\n                                    [`${this.currentNetwork}_balances`, JSON.parse(JSON.stringify({\n                                        value: this.balances,\n                                        timestamp: new Date().toISOString()\n                                    }))]\n                                ])\n                            }\n                        })\n                } catch (error) {\n                    console.error(error)\n                }\n            } else {\n                // Set from cache\n                this.balances = cacheBalances.value\n            }\n\n            // Balances status\n            this.isBalancesGot = true\n        },\n\n\n        // Get staked balances\n        async getStakedBalances(forceUpdate = false) {\n            // Balances status\n            this.isStakedBalancesGot = false\n\n            // Reset data\n            this.stakedBalances = []\n\n            // Get from DB\n            let cacheStakedBalances = await DBgetData(`wallet${this.currentWalletID}`, `${this.currentNetwork}_stakedBalances`)\n\n            if (forceUpdate || cacheStakedBalances === undefined || (new Date() - new Date(cacheStakedBalances.timestamp) > this.cacheTime)) {\n                // Send request\n                try {\n                    await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/delegations/${this.currentAddress}`)\n                        .then(response => response.json())\n                        .then(async data => {\n                            if (data.delegation_responses) {\n                                // Set data\n                                this.stakedBalances = data.delegation_responses.filter(el => el.balance.amount > 0)\n\n                                for (let item of this.stakedBalances) {\n                                    // Get balance info\n                                    await this.getBalanceInfo(item.balance)\n\n                                    // Get validator info\n                                    await this.getValidatorInfo(item, item.delegation.validator_address)\n                                }\n\n                                // Clear balances\n                                this.stakedBalances = this.stakedBalances.filter(item => item.balance.hasOwnProperty('exponent'))\n\n                                // Save in DB\n                                await DBaddData(`wallet${this.currentWalletID}`, [\n                                    [`${this.currentNetwork}_stakedBalances`, JSON.parse(JSON.stringify({\n                                        value: this.stakedBalances,\n                                        timestamp: new Date().toISOString()\n                                    }))]\n                                ])\n                            }\n                        })\n                } catch (error) {\n                    console.error(error)\n                }\n            } else {\n                // Set from cache\n                this.stakedBalances = cacheStakedBalances.value\n            }\n\n            // Staked balances status\n            this.isStakedBalancesGot = true\n        },\n\n\n        // Get rewards\n        async getRewards() {\n            // Rewards status\n            this.isRewardsGot = false\n\n            // Reset data\n            this.rewardsBalances = []\n\n            // Request\n            try {\n                await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/distribution/v1beta1/delegators/${this.currentAddress}/rewards`)\n                    .then(response => response.json())\n                    .then(async data => {\n                        if (data.total.length) {\n                            // Set data\n                            this.rewardsBalances = data.total\n\n                            for (let balance of this.rewardsBalances) {\n                                // Get balance info\n                                await this.getBalanceInfo(balance)\n                            }\n\n                            // Clear rewards\n                            this.rewardsBalances = this.rewardsBalances.filter(balance => balance.hasOwnProperty('exponent'))\n\n                            // Filter rewards\n                            this.rewardsBalances = this.rewardsBalances.filter(balance => balance.chain_info.chain_id == this.networks[this.currentNetwork].chain_id)\n                        }\n                    })\n            } catch (error) {\n                console.error(error)\n            }\n\n            // Rewards status\n            this.isRewardsGot = true\n        },\n\n\n        // Get unstaking balances\n        async getUnstakingBalances () {\n            // Unstaking balances status\n            this.isUnstakingBalancesGot = false\n\n            // Reset data\n            this.unstakingBalances = []\n            this.networks[this.currentNetwork].totalUnstakingTokens = 0\n\n            // Request\n            try {\n                await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/delegators/${this.currentAddress}/unbonding_delegations`)\n                    .then(response => response.json())\n                    .then(async data => {\n                        // Set data\n                        this.unstakingBalances = data.unbonding_responses\n\n                        for (let item of this.unstakingBalances) {\n                            // Calc total unstaking tokens\n                            item.entries.forEach(entry => this.networks[this.currentNetwork].totalUnstakingTokens += parseInt(entry.balance))\n\n                            // Get validator info\n                            await this.getValidatorInfo(item, item.validator_address)\n                        }\n                    })\n            } catch (error) {\n                console.error(error)\n            }\n\n            // Unstaking balances status\n            this.isUnstakingBalancesGot = true\n        },\n\n\n        // Get redelegations\n        async getRedelegations() {\n            // Request\n            try {\n                await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/delegators/${this.currentAddress}/redelegations`)\n                    .then(response => response.json())\n                    .then(async data => {\n                        // Set data\n                        this.redelegations = data.redelegation_responses\n                    })\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Get balance info\n        async getBalanceInfo(balance) {\n            // Denom traces\n            let { base_denom } = await denomTraces(balance.denom, this.currentNetwork)\n\n            // Old base denom\n            balance.old_base_denom = base_denom\n\n            if (base_denom === 'share') {\n                return\n            }\n\n            // Get (token info/chain name) from assets\n            for (let asset of assets) {\n                // Exceptions\n                switch (base_denom) {\n                    case 'uusdc':\n                        var currentAsset = assets.find(el => el.chain_name === 'noble')\n                        break;\n\n                    case 'utia':\n                        var currentAsset = assets.find(el => el.chain_name === 'celestiatestnet3')\n                        break;\n\n                    case 'udatom':\n                        var currentAsset = assets.find(el => el.chain_name === 'cosmoshub')\n\n                        base_denom = 'uatom'\n                        break;\n\n                    case 'drop':\n                        var currentAsset = assets.find(el => el.chain_name === 'celestia')\n\n                        base_denom = 'utia'\n                        break;\n\n                    case 'uboom':\n                        var currentAsset = assets.find(el => el.chain_name === 'neutron')\n\n                        base_denom = 'untrn'\n                        break;\n\n                    default:\n                        var currentAsset = asset\n                        break;\n                }\n\n                // Token info\n                let tokenInfo = currentAsset.assets.find(token => token.base === base_denom)\n\n                if (tokenInfo) {\n                    // Set data\n                    balance.token_info = tokenInfo\n                    balance.chain_name = currentAsset.chain_name\n\n                    break\n                }\n            }\n\n            if (balance.token_info) {\n                // Format denom exponent\n                let formatableToken = this.formatableTokens.find(el => el.token_name === balance.token_info.base.toUpperCase())\n\n                // Set exponent for denom\n                formatableToken\n                    ? balance.exponent = formatableToken.exponent\n                    : balance.exponent = balance.token_info.denom_units[1]?.exponent || 0\n\n                // Get chain info\n                balance.chain_info = chains.find(el => el.chain_name === balance.chain_name)\n\n                // Get price\n                balance.price = getPriceByDenom(balance.token_info.symbol)\n            }\n        },\n\n\n        // Has native token\n        hasNativeToken() {\n            return this.balances.some(balance => balance.denom == this.networks[this.currentNetwork].denom)\n        },\n\n\n        // Get validator info\n        async getValidatorInfo(item, validator_address) {\n            try {\n                await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/validators/${validator_address}`)\n                    .then(res => res.json())\n                    .then(response => {\n                        // Set data\n                        item.validator_info = response.validator\n                    })\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Get secret from DB\n        async getSecret(current = false) {\n            let DBWallets = null,\n                walletID = 0\n\n            if (!current) {\n                // Get wallets\n                DBWallets = await DBgetData('global', 'wallets')\n\n                // Get wallet ID\n                walletID = DBWallets !== undefined ? DBWallets.length + 1 : 1\n            } else {\n                walletID = this.currentWalletID\n            }\n\n            // Get from DB\n            let DBSecret = await DBgetMultipleData('secret', [\n                `wallet${walletID}_aesKey`,\n                `wallet${walletID}_secret`,\n                `wallet${walletID}_secretIV`\n            ])\n\n            // Get wallet secret part two\n            let DBSecretPartTwo = await DBgetData(`wallet${walletID}`, 'secret')\n\n            // Restore the original secret\n            let restoredSecret = sss.combine([DBSecret[`wallet${walletID}_secret`], DBSecretPartTwo])\n\n            // Convert back to Uint8Array\n            let restoredUint8Array = new Uint8Array(restoredSecret)\n\n            // Return memo\n            return await decryptData(restoredUint8Array, DBSecret[`wallet${walletID}_secretIV`], DBSecret[`wallet${walletID}_aesKey`])\n        },\n\n\n        // Get private key from DB\n        async getPrivateKey(current = false) {\n            let DBWallets = null,\n                walletID = 0\n\n            if (!current) {\n                // Get wallets\n                DBWallets = await DBgetData('global', 'wallets')\n\n                // Get wallet ID\n                walletID = DBWallets !== undefined ? DBWallets.length + 1 : 1\n            } else {\n                walletID = this.currentWalletID\n            }\n\n            // Get from DB\n            let DBSecret = await DBgetMultipleData('secret', [\n                `wallet${walletID}_aesKey`,\n                `wallet${walletID}_privateKey`,\n                `wallet${walletID}_secretIV`\n            ])\n\n            // Get wallet secret part two\n            let DBSecretPartTwo = await DBgetData(`wallet${walletID}`, 'privateKey')\n\n            // Restore the original secret\n            let restoredSecret = sss.combine([DBSecret[`wallet${walletID}_privateKey`], DBSecretPartTwo])\n\n            // Convert back to Uint8Array\n            let restoredUint8Array = new Uint8Array(restoredSecret)\n\n            // Return memo\n            return await decryptData(restoredUint8Array, DBSecret[`wallet${walletID}_secretIV`], DBSecret[`wallet${walletID}_aesKey`])\n        },\n\n\n        // Find missing wallet ID\n        async findMissingId(DBWallets = null) {\n            if (!DBWallets) {\n                // Get wallets\n                DBWallets = await DBgetData('global', 'wallets')\n            }\n\n            // Find the minimum missing value\n            let missingId = 1\n\n            if (DBWallets !== undefined) {\n                // Set IDs\n                let ids = DBWallets.map(el => el.id)\n\n                while (ids.includes(missingId)) {\n                    missingId++\n                }\n            }\n\n            // Return value\n            return missingId\n        },\n\n\n        // Find next available wallet name\n        async findNextAvailableWalletName(DBWallets = null) {\n            let i = 2,\n                name = this.defaultWalletName + i\n\n            if (!DBWallets) {\n                // Get wallets\n                DBWallets = await DBgetData('global', 'wallets')\n            }\n\n            if (DBWallets !== undefined) {\n                while (true) {\n                    name = this.defaultWalletName + i\n\n                    // Check if a wallet with this name exists\n                    if (!DBWallets.some(el => el.name === name)) {\n                        return name\n                    }\n\n                    i++\n                }\n            }\n\n            // Return value\n            return name\n        },\n\n\n        // Set secret\n        async setSecret(secret) {\n            // Generate AES key\n            let aesKey = await generateAESKey()\n\n            // Encryption\n            let { ciphertext, iv } = await encryptData(secret, aesKey)\n\n            // Split into 2 parts, both parts are required for recovery\n            let shares = sss.split(Buffer.from(ciphertext), {\n                shares: 2,\n                threshold: 2\n            })\n\n            // Get wallet ID\n            let walletID = await this.findMissingId()\n\n            // Save in DB\n            await DBaddData('secret', [\n                [`wallet${walletID}_aesKey`, aesKey],\n                [`wallet${walletID}_secret`, shares[0]],\n                [`wallet${walletID}_secretIV`, iv]\n            ])\n\n            // Check DB storeName\n            await DBcheckStoreName(`wallet${walletID}`)\n\n            // Save in DB\n            await DBaddData(`wallet${walletID}`, [\n                ['secret', shares[1]],\n                ['createdBy', 'secret']\n            ])\n        },\n\n\n        // Set private key\n        async setPrivateKey(privateKey) {\n            // Generate AES key\n            let aesKey = await generateAESKey()\n\n            // Encryption\n            let { ciphertext, iv } = await encryptData(privateKey, aesKey)\n\n            // Split into 2 parts, both parts are required for recovery\n            let shares = sss.split(Buffer.from(ciphertext), {\n                shares: 2,\n                threshold: 2\n            })\n\n            // Get wallet ID\n            let walletID = await this.findMissingId()\n\n            // Save in DB\n            await DBaddData('secret', [\n                [`wallet${walletID}_aesKey`, aesKey],\n                [`wallet${walletID}_privateKey`, shares[0]],\n                [`wallet${walletID}_secretIV`, iv]\n            ])\n\n            await DBaddData(`wallet${walletID}`, [\n                ['privateKey', shares[1]],\n                ['createdBy', 'privateKey']\n            ])\n        },\n\n\n        // Set current network\n        setCurrentNetwork(chain) {\n            // Update current network\n            this.currentNetwork = chain\n\n            // Save in DB\n            DBaddData(`wallet${this.currentWalletID}`, [\n                ['currentNetwork', chain]\n            ])\n        },\n\n\n        // Create wallet\n        async createWallet({ pinCode = null, walletName = null, isBiometricEnabled = null, isAdding = false, relativeWallet = null, derivationPath = this.defaultDerivationPath }) {\n            // Get all wallets\n            let DBWallets = await DBgetData('global', 'wallets')\n\n            if (DBWallets === undefined) {\n                // Set array type\n                DBWallets = []\n            }\n\n            // Get wallet ID\n            let walletID = await this.findMissingId(DBWallets)\n\n            // Available wallet name\n            let availableWalletName = await this.findNextAvailableWalletName()\n\n            // Update wallets\n            DBWallets.push({\n                id: walletID,\n                name: walletName || availableWalletName\n            })\n\n            // Add data to wallet DB\n            await DBaddData(`wallet${walletID}`, [\n                ['id', walletID],\n                ['name', walletName || availableWalletName],\n                ['currentNetwork', 'cosmoshub'],\n                ['currentCurrency', 'USD'],\n                ['derivationPath', derivationPath],\n                ['subWallets', JSON.parse(JSON.stringify([]))],\n                ['relativeWallet', relativeWallet]\n            ])\n\n            // Add data to global DB\n            if (!isAdding) {\n                // Generate HMAC key\n                let hmacKey = await generateHMACKey()\n\n                await DBaddData('global', [\n                    ['isRegister', true],\n                    ['currentWalletID', walletID],\n                    ['hmacKey', hmacKey],\n                    ['pin', await hashDataWithKey(pinCode.join(''), hmacKey)],\n                    ['isBiometric', isBiometricEnabled],\n                    ['authErrorLimit', this.authErrorLimit],\n                    ['wallets', DBWallets]\n                ])\n            } else {\n                await DBaddData('global', [\n                    ['wallets', DBWallets]\n                ])\n            }\n\n            // Set authorized status\n            this.isAuthorized = true\n\n            // Return wallet ID\n            return walletID\n        },\n\n\n        // Create from exist wallet\n        async createFromExistWallet() {\n            // Get secret from DB\n            let currentWalletSecret = await this.getSecret(true)\n\n            // Get sub wallets of current wallet\n            let subWallets = await DBgetData(`wallet${this.currentWalletID}`, 'subWallets')\n\n            // Set secret\n            await this.setSecret(currentWalletSecret)\n\n            // Create wallet\n            let newWalletID = await this.createWallet({\n                isAdding: true,\n                relativeWallet: this.currentWalletID,\n                derivationPath: this.defaultDerivationPath.replace(/\\/\\d+$/, `/${(subWallets.length + 1)}`)\n            })\n\n            // Add new subwallet\n            subWallets.push(newWalletID)\n\n            // Update current wallet\n            await DBaddData(`wallet${this.currentWalletID}`, [\n                ['subWallets', JSON.parse(JSON.stringify(subWallets))]\n            ])\n        },\n\n\n        // Get current wallet created by\n        async getCurrentWalletCreatedBy() {\n            // Get data from DB\n            return await DBgetData(`wallet${this.currentWalletID}`, 'createdBy')\n        },\n\n\n        // Update auth error limit\n        async updateUserAuthErrorLimit(limit) {\n            await DBaddData('global', [\n                ['authErrorLimit', limit]\n            ])\n        },\n\n\n        // Update TxFee info\n        async updateTxFeeInfo() {\n            await DBaddData(`wallet${this.currentWalletID}`, [\n                ['TxFeeCurrentLevel', this.TxFee.currentLevel],\n                ['TxFeeIsRemember', this.TxFee.isRemember]\n            ])\n        },\n\n\n        // Update current currency\n        async updateCurrentCurrency() {\n            switch (this.currentCurrency) {\n                case 'BTC':\n                    // Set current currency\n                    this.currentCurrency = 'ETH'\n\n                    // Set current currency symbol\n                    this.currentCurrencySymbol = 'ETH'\n\n                    // Update in DB\n                    DBaddData(`wallet${this.currentWalletID}`, [\n                        ['currentCurrency', 'ETH']\n                    ])\n\n                    break;\n\n                case 'ETH':\n                    // Set current currency\n                    this.currentCurrency = 'USD'\n\n                    // Set current currency symbol\n                    this.currentCurrencySymbol = '$'\n\n                    // Update in DB\n                    DBaddData(`wallet${this.currentWalletID}`, [\n                        ['currentCurrency', 'USD']\n                    ])\n\n                    break;\n\n                default:\n                    // Set current currency\n                    this.currentCurrency = 'BTC'\n\n                    // Set current currency symbol\n                    this.currentCurrencySymbol = 'BTC'\n\n                    // Update in DB\n                    DBaddData(`wallet${this.currentWalletID}`, [\n                        ['currentCurrency', 'BTC']\n                    ])\n\n                    break;\n            }\n        },\n\n\n        // Connect to websocket\n        async connectWebsocket() {\n            // Close previous connections\n            Object.values(this.networks).forEach(network => {\n                if (network.websocket) {\n                    // Remove onmessage listener\n                    network.websocket.onopen = null\n                    network.websocket.onmessage = null\n\n                    // Close connection\n                    network.websocket.close()\n                }\n            })\n\n            // Connect\n            this.networks[this.currentNetwork].websocket = new WebSocket(this.networks[this.currentNetwork].websocket_url)\n\n            // Listening events\n            this.networks[this.currentNetwork].websocket.onopen = () => {\n                // Event Tx with recipient\n                this.networks[this.currentNetwork].websocket.send(JSON.stringify({\n                    jsonrpc: '2.0',\n                    method: 'subscribe',\n                    id: '1',\n                    params: {\n                        query: `tm.event='Tx' AND transfer.recipient='${this.currentAddress}'`\n                    }\n                }))\n            }\n\n            // WSS message event\n            this.networks[this.currentNetwork].websocket.onmessage = async msg => {\n                let parsedMsg = JSON.parse(msg.data)\n\n                // If the result object is not empty\n                if (parsedMsg.result && Object.keys(parsedMsg.result).length > 0) {\n                    // User recipient\n                    if (parsedMsg.id == '1') {\n                        // Update all balances\n                        this.updateAllBalances()\n\n                        // Reset Tx Fee\n                        this.resetTxFee()\n                    }\n\n                    // Transaction\n                    if (parsedMsg.id == '2') {\n                        // Check Tx result\n                        this.checkTxResult()\n                    }\n                }\n            }\n        },\n\n\n        // Set current balance\n        TxFeeGetCurrentBalance(baseDenom) {\n            // Set data\n            this.TxFee.balance = this.balances.find(balance => balance.denom === baseDenom) || { amount: 0 }\n        },\n\n\n        // Get minimum gas price\n        TxFeeSetGasPrices() {\n            // Get chain info\n            let chain = chains.find(el => el.chain_id === this.networks[this.currentNetwork].chain_id)\n\n            // Set data\n            this.TxFee.lowPrice = chain.fees.fee_tokens[0].fixed_min_gas_price ? chain.fees.fee_tokens[0].fixed_min_gas_price * 1.1 : chain.fees.fee_tokens[0].low_gas_price\n            this.TxFee.averagePrice = this.TxFee.lowPrice * 1.15\n            this.TxFee.highPrice = this.TxFee.lowPrice * 1.30\n        },\n\n\n        // Enough status\n        TxFeeIsEnough() {\n            // Set status\n            if (this.isBalancesGot) {\n                this.TxFee.isEnough = this.TxFee.balance.amount > this.TxFee.userGasAmount * this.TxFee[`${this.TxFee.currentLevel}Price`]\n            }\n        },\n\n\n        // Set listener current tx\n        setListenerCurrentTx() {\n            // Event Tx with hash\n            this.networks[this.currentNetwork].websocket.send(JSON.stringify({\n                jsonrpc: '2.0',\n                method: 'subscribe',\n                id: '2',\n                params: {\n                    query: `tm.event='Tx' AND tx.hash='${(this.networks[this.currentNetwork].currentTxHash).toUpperCase()}'`\n                }\n            }))\n        },\n\n\n        // Get Tx info\n        async getTxInfo(txHash) {\n            try {\n                // Request\n                return await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/tx/v1beta1/txs/${txHash.toUpperCase()}`).then(res => res.json())\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Check Tx result\n        async checkTxResult() {\n            let txResult = await this.getTxInfo(this.networks[this.currentNetwork].currentTxHash)\n\n            if (txResult.code != 5) {\n                // Clean notifications\n                notification.notify({\n                    group: 'default',\n                    clean: true\n                })\n\n                if (txResult.tx_response.code == '0') {\n                    // Show notification\n                    notification.notify({\n                        group: 'default',\n                        speed: 200,\n                        duration: 4000,\n                        title: i18n.global.t('message.notification_tx_success_title'),\n                        type: 'success',\n                        data: {\n                            explorer_link: getExplorerLink(this.currentNetwork)\n                        }\n                    })\n\n                    // Send response\n                    if (this.jetPackRequest) {\n                        const connection = this.RTCConnections[this.jetPackRequest.data.peer_id]\n\n                        if (connection) {\n                            connection.send({\n                                type: 'tx',\n                                requestId: this.jetPackRequest.data.request_id,\n                                status: 'success',\n                                hash: this.networks[this.currentNetwork].currentTxHash\n                            })\n                        }\n                    }\n                } else {\n                    // Get error code\n                    let errorText = ''\n\n                    // Get error title\n                    txResult.tx_response.code\n                        ? errorText = i18n.global.t(`message.notification_tx_error_${txResult.tx_response.code}`)\n                        : errorText = i18n.global.t('message.notification_tx_error_rejected')\n\n                    // Show notification\n                    notification.notify({\n                        group: 'default',\n                        speed: 200,\n                        duration: 6000,\n                        title: i18n.global.t('message.notification_tx_error_title'),\n                        text: errorText,\n                        type: 'error'\n                    })\n\n                    // Send response\n                    if (this.jetPackRequest) {\n                        const connection = this.RTCConnections[this.jetPackRequest.data.peer_id]\n\n                        if (connection) {\n                            connection.send({\n                                type: 'error',\n                                requestId: this.jetPackRequest.data.request_id,\n                                status: 'error',\n                                hash: this.networks[this.currentNetwork].currentTxHash,\n                                message: errorText\n                            })\n                        }\n                    }\n                }\n\n                // Clear tx hash\n                this.networks[this.currentNetwork].currentTxHash = null\n\n                // Show redirect modal\n                if (this.jetPackRequest) {\n                    this.showRedirectModal = true\n                }\n\n                // Reset jetPack request\n                this.jetPackRequest = null\n\n                // Update all balances\n                this.updateAllBalances()\n\n                // Reset Tx Fee\n                this.resetTxFee()\n            }\n        },\n\n\n        // Update all balances\n        async updateAllBalances() {\n            let promises = []\n\n            // Update balances\n            if (this.isBalancesGot) {\n                promises.push(this.getBalances(true))\n            }\n\n            // Update staked balances\n            if (this.isStakedBalancesGot) {\n                promises.push(this.getStakedBalances(true))\n            }\n\n            // Update rewards\n            if (this.isRewardsGot) {\n                promises.push(this.getRewards())\n            }\n\n            // Update unstaking balances\n            if (this.isUnstakingBalancesGot) {\n                promises.push(this.getUnstakingBalances())\n            }\n\n            // Wait balances\n            await Promise.all(promises)\n        },\n\n\n        // Reset Tx Fee\n        async resetTxFee() {\n            // Get DB data\n            let DBData = await DBgetMultipleData(`wallet${this.currentWalletID}`, ['TxFeeCurrentLevel', 'TxFeeIsRemember'])\n\n            // Reset data\n            this.TxFee = {\n                balance: {},\n                currentLevel: DBData.TxFeeCurrentLevel || 'average',\n                userGasAmount: 0,\n                gasAmount: 0,\n                isRemember: DBData.TxFeeIsRemember || false,\n                isGasAdjustmentAuto: true,\n                isEnough: false\n            }\n        },\n\n\n        // Get network unbonding period\n        async getNetworkUnbondingTime() {\n            try {\n                await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/params`)\n                    .then(res => res.json())\n                    .then(response => {\n                        // Set data\n                        this.networks[this.currentNetwork].unbondingTime = parseInt(response.params.unbonding_time) / 86400\n                    })\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Get all validators\n        async getAllValidators() {\n            try {\n                // Request\n                let result = await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/validators?status=BOND_STATUS_BONDED&pagination.limit=200`).then(res => res.json())\n\n                return result.validators\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Get user validators\n        async getUserValidators() {\n            try {\n                // Request\n                let result = await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/delegators/${this.currentAddress}/validators?status=BOND_STATUS_BONDED&pagination.limit=200`).then(res => res.json())\n\n                return result.validators\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Get total bonded tokens\n        async getTotalBondedTokens() {\n            try {\n                await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/pool`)\n                    .then(res => res.json())\n                    .then(response => {\n                        // Set data\n                        this.networks[this.currentNetwork].totalBondedTokens = parseInt(response.pool.bonded_tokens)\n                    })\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Is unstaking cancel support\n        async isUnstakingCancelSupport() {\n            let result = false,\n                cacheIsUnstakingCancelSupport = await DBgetData(`wallet${this.currentWalletID}`, `${this.currentNetwork}_isUnstakingCancelSupport`)\n\n            // Check\n            if (cacheIsUnstakingCancelSupport === undefined || (new Date() - new Date(cacheIsUnstakingCancelSupport.timestamp) > this.cacheTime)) {\n                try {\n                    let response = await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/base/tendermint/v1beta1/node_info`),\n                        data = await response.json(),\n                        cosmos_sdk_version = data.application_version.cosmos_sdk_version,\n                        min_version = 'v0.46'\n\n                    // Parsing versions\n                    let cosmos_sdk_version_parsed = cosmos_sdk_version.replace('v', '').split('-')[0].split('.').map(Number),\n                        min_version_parsed = min_version.replace('v', '').split('-')[0].split('.').map(Number)\n\n                    // Fill in the missing with zeros\n                    while (cosmos_sdk_version_parsed.length < 3) cosmos_sdk_version_parsed.push(0)\n                    while (min_version_parsed.length < 3) min_version_parsed.push(0)\n\n                    // Compare versions\n                    for (let i = 0; i < 3; i++) {\n                        if (cosmos_sdk_version_parsed[i] > min_version_parsed[i]) result = true // Version above minimum\n                        if (cosmos_sdk_version_parsed[i] < min_version_parsed[i]) result = false // Version is less than minimum\n                    }\n\n                    // Save in DB\n                    await DBaddData(`wallet${this.currentWalletID}`, [\n                        [this.currentNetwork + '_isUnstakingCancelSupport', JSON.parse(JSON.stringify({\n                            value: result,\n                            timestamp: new Date().toISOString()\n                        }))]\n                    ])\n                } catch (error) {\n                    console.error(error)\n                }\n\n                // Set data\n                this.networks[this.currentNetwork].isUnstakingCancelSupport = result\n            } else {\n                // Set from cache\n                this.networks[this.currentNetwork].isUnstakingCancelSupport = cacheIsUnstakingCancelSupport.value\n            }\n        },\n\n\n        // Get wallets\n        async getWallets() {\n            try {\n                // Get from DB\n                this.wallets = await DBgetData('global', 'wallets')\n            } catch (error) {\n                console.log(error)\n            }\n        },\n\n\n        // Update wallet\n        async updateWallet({ wallet, new_name }) {\n            try {\n                // Find wallet\n                let currentWallet = this.wallets.find(el => el.id === wallet.id)\n\n                // Update name\n                if (currentWallet) {\n                    currentWallet.name = new_name\n\n                    // Update in DB\n                    await DBaddData('global', [\n                        ['wallets', JSON.parse(JSON.stringify(this.wallets))]\n                    ])\n\n                    await DBaddData(`wallet${this.currentWalletID}`, [\n                        ['name', currentWallet.name]\n                    ])\n\n                    // Update in state\n                    if (this.currentWalletID === wallet.id) {\n                        this.currentWalletName = currentWallet.name\n                    }\n\n                    // Get wallets\n                    await this.getWallets()\n                }\n            } catch (error) {\n                console.log(error)\n            }\n        },\n\n\n        // Remove wallet\n        async removeWallet(wallet) {\n            try {\n                // Update wallets\n                this.wallets = this.wallets.filter(el => el.id !== wallet.id)\n\n                // Set default wallet if deleted current\n                if (wallet.id === this.currentWalletID) {\n                    // Set second wallet like default\n                    await this.setCurrentWalletID(this.wallets[0].id)\n                }\n\n                // Cleare store in DB\n                await DBclearStore(`wallet${wallet.id}`)\n\n                // Remove in secret DB\n                await DBdeleteData('secret', [\n                    `wallet${wallet.id}_aesKey`,\n                    `wallet${wallet.id}_privateKey`,\n                    `wallet${wallet.id}_secret`,\n                    `wallet${wallet.id}_secretIV`\n                ])\n\n                // Update wallets in DB\n                await DBaddData('global', [\n                    ['wallets', JSON.parse(JSON.stringify(this.wallets))]\n                ])\n            } catch (error) {\n                console.log(error)\n            }\n        },\n\n\n        // Set age confirmed\n        async setAgeConfirmed() {\n            // Save in DB\n            await DBaddData('global', [\n                ['ageConfirmed', true]\n            ])\n        },\n\n\n        // Get age confirmed\n        async getAgeConfirmed() {\n            try {\n                // Get from DB\n                let DBAgeConfirmed = await DBgetData('global', 'ageConfirmed')\n\n                if (DBAgeConfirmed !== undefined) {\n                    // Set result\n                    this.isAgeConfirmed = DBAgeConfirmed\n                }\n            } catch (error) {\n                console.log(error)\n            }\n        },\n\n\n        // Set user lock\n        async setUserLock() {\n            // Save in DB\n            await DBaddData('global', [\n                ['isUserLock', true],\n                ['userLockTimestamp', new Date().toISOString()]\n            ])\n        },\n\n\n        // Set user unlock\n        async setUserUnlock() {\n            // Save in DB\n            await DBaddData('global', [\n                ['isUserLock', false],\n                ['userLockTimestamp', '']\n            ])\n\n            // Сhange auth limit\n            await this.updateUserAuthErrorLimit(this.authErrorLimit)\n        },\n\n\n        // Set user channel\n        async setUserChannel(channel) {\n            try {\n                // Get from DB\n                let userChannels = await DBgetData('global', 'userChannels') || []\n\n                // Add new channel\n                userChannels.push(channel)\n\n                // Save in DB\n                await DBaddData('global', [\n                    ['userChannels', JSON.parse(JSON.stringify(userChannels))]\n                ])\n            } catch (error) {\n                console.log(error)\n            }\n        },\n\n\n        // Update user channel\n        async updateUserChannel(channel) {\n            try {\n                // Get from DB\n                let userChannels = await DBgetData('global', 'userChannels') || []\n\n                // Add new channel\n                let oldChannel = userChannels.find(el => el.info.pretty_name === channel.old.info.pretty_name)\n\n                // Update data\n                oldChannel.info = channel.info\n                oldChannel.channel_id = channel.channel_id\n\n                // Save in DB\n                await DBaddData('global', [\n                    ['userChannels', JSON.parse(JSON.stringify(userChannels))]\n                ])\n            } catch (error) {\n                console.log(error)\n            }\n        },\n\n\n        // Get all user channels\n        async getAllUserChannels() {\n            try {\n                // Get from DB\n                return await DBgetData('global', 'userChannels')\n            } catch (error) {\n                console.log(error)\n            }\n        },\n\n\n        // Delete user channel\n        async deleteUserChannel(chainName) {\n            try {\n                // Get from DB\n                let userChannels = await DBgetData('global', 'userChannels')\n\n                // Delete channel\n                userChannels = userChannels.filter(el => el.info.pretty_name !== chainName)\n\n                // Update in DB\n                await DBaddData('global', [\n                    ['userChannels', userChannels],\n                ])\n            } catch (error) {\n                console.log(error)\n            }\n        },\n\n\n        // Clear all data\n        async clearAllData() {\n            try {\n                // Clear in DB\n                await DBclearAllData()\n\n                // Reset all state\n                this.$reset()\n            } catch (error) {\n                console.log(error)\n            }\n        },\n\n\n        // JetPack Switch network\n        jetPackSwitchNetwork() {\n            return new Promise((resolve, reject) => {\n                // Get chain info\n                let chain = Object.values(this.networks).find(network => network.chain_id === this.jetPackRequest.data.chain_id)\n\n                if (chain) {\n                    // Set current network\n                    this.setCurrentNetwork(chain.alias)\n\n                    // Resolve\n                    resolve()\n                } else {\n                    // Reject\n                    reject()\n                }\n            })\n        }\n    }\n})","import { openDB, deleteDB } from 'idb'\n\n\nvar DB = null\n\n\n// Get store\nasync function getStore() {\n    // Import\n    const { useGlobalStore } = await import('@/store')\n\n    // Return instance\n    return useGlobalStore()\n}\n\n\n// DB promise\nconst dbPromise = (async () => {\n    let store = await getStore(),\n        isFirstRun = localStorage.getItem('firstRun') === null\n\n    deleteDB('bro_db')\n\n    if (isFirstRun) {\n        deleteDB('jetWallet')\n\n        localStorage.setItem('firstRun', 'false')\n    }\n\n    // Get current DB version\n    store.getCurrentDBVersion()\n\n    // Open DB\n    return openDB('jetWallet', store.DBVersion, {\n        upgrade(db) {\n            // Create store if it does not exist\n            if (!db.objectStoreNames.contains('global')) {\n                db.createObjectStore('global')\n            }\n\n            // Create store if it does not exist\n            if (!db.objectStoreNames.contains('secret')) {\n                db.createObjectStore('secret')\n            }\n\n            // Create store if it does not exist\n            if (!db.objectStoreNames.contains('wallet1')) {\n                db.createObjectStore('wallet1')\n            }\n        }\n    })\n})()\n\n\nexport async function DBcheckStoreName(name) {\n    let store = await getStore()\n\n    if (!DB) {\n        // Check DB\n        DB = await dbPromise\n    }\n\n    if (!DB.objectStoreNames.contains(name)) {\n        // Set new DB version\n        store.setNewDBVersion()\n\n        // Close DB\n        DB.close()\n\n        // Open DB\n        DB = await openDB('jetWallet', store.DBVersion, {\n            upgrade(db) {\n                // Create store if it does not exist\n                if (!db.objectStoreNames.contains(name)) {\n                    db.createObjectStore(name)\n                }\n            }\n        })\n    }\n}\n\n\nexport async function DBgetAllData(storeName) {\n    if (!DB) {\n        // Check DB\n        DB = await dbPromise\n    }\n\n    return DB.getAll(storeName)\n}\n\n\nexport async function DBgetData(storeName, key) {\n    if (!DB) {\n        // Check DB\n        DB = await dbPromise\n    }\n\n    return DB.get(storeName, key)\n}\n\n\nexport async function DBgetMultipleData(storeName, keys) {\n    if (!DB) {\n        // Check DB\n        DB = await dbPromise\n    }\n\n    let results = await Promise.all(keys.map(key => DB.get(storeName, key))),\n        keyValueMap = {}\n\n    keys.forEach((key, index) => keyValueMap[key] = results[index])\n\n    return keyValueMap\n}\n\n\nexport async function DBaddData(storeName, data) {\n    if (!DB) {\n        // Check DB\n        DB = await dbPromise\n    }\n\n    let tx = DB.transaction(storeName, 'readwrite'),\n        store = tx.objectStore(storeName)\n\n    for (let [key, value] of data) {\n        await store.put(value, key)\n    }\n\n    await tx.done\n}\n\n\nexport async function DBdeleteData(storeName, keys) {\n    if (!DB) {\n        // Check DB\n        DB = await dbPromise\n    }\n\n    let tx = DB.transaction(storeName, 'readwrite'),\n        store = tx.objectStore(storeName)\n\n    await Promise.all(keys.map(key => store.delete(key)))\n\n    return tx.done\n}\n\n\nexport async function DBclearStore(storeName) {\n    if (!DB) {\n        // Check DB\n        DB = await dbPromise\n    }\n\n    let tx = DB.transaction(storeName, 'readwrite'),\n        store = tx.objectStore(storeName)\n\n    await store.clear()\n    await tx.done\n}\n\n\nexport async function DBclearAllData() {\n    if (!DB) {\n        // Check DB\n        DB = await dbPromise\n    }\n\n    for (let storeName of DB.objectStoreNames) {\n        let tx = DB.transaction(storeName, 'readwrite'),\n            store = tx.objectStore(storeName)\n\n        await store.clear()\n        await tx.done\n    }\n}","import { DirectSecp256k1HdWallet } from '@cosmjs/proto-signing'\n\n\n// Generate wallet\nexport const generateWallet = async count => {\n    return await DirectSecp256k1HdWallet.generate(count)\n}\n\n\nexport default generateWallet","import { DirectSecp256k1HdWallet } from '@cosmjs/proto-signing'\nimport { stringToPath } from '@cosmjs/crypto'\nimport { useGlobalStore } from '@/store'\n\n\n// Import wallet from mnemonic\nexport const importWalletFromMnemonic = async (mnemonic, prefix = null, derivationPath = null) => {\n    let store = useGlobalStore(),\n        path = !derivationPath ? store.currentWalletDerivationPath : derivationPath\n\n    return await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {\n        hdPaths: [stringToPath(path)],\n        prefix\n    })\n}\n\n\nexport default importWalletFromMnemonic","import { DirectSecp256k1Wallet } from '@cosmjs/proto-signing'\nimport { fromHex } from '@cosmjs/encoding'\n\n\n// Import wallet from private key\nexport const importWalletFromPrivateKey = async (privateKey, prefix = null) => {\n    return await DirectSecp256k1Wallet.fromKey(fromHex(privateKey), prefix)\n}\n\n\nexport default importWalletFromPrivateKey","// Hash data with key\nexport const hashDataWithKey = async (data, key) => {\n    let encoder = new TextEncoder(),\n        encodedData = encoder.encode(data)\n\n    let cryptoKey = await crypto.subtle.importKey(\n        'jwk',\n        key,\n        {\n            name: 'HMAC',\n            hash: { name: 'SHA-256' }\n        },\n        false,\n        ['sign']\n    )\n\n    let signature = await crypto.subtle.sign('HMAC', cryptoKey, encodedData),\n        hashArray = Array.from(new Uint8Array(signature)),\n        hashHex = hashArray.map(byte => ('00' + byte.toString(16)).slice(-2)).join('')\n\n    return hashHex\n}\n\n\nexport default hashDataWithKey","// Generate AES key\nexport const generateAESKey = async () => {\n    let key = await crypto.subtle.generateKey(\n        {\n            name: 'AES-GCM',\n            length: 256\n        },\n        true,\n        ['encrypt', 'decrypt']\n    )\n\n    return key\n}\n\n\nexport default generateAESKey","// Generate HMAC key\nexport const generateHMACKey = async () => {\n    // Key params\n    let key = await crypto.subtle.generateKey(\n        {\n            name: 'HMAC',\n            hash: { name: 'SHA-256' },\n            length: 256\n        },\n        true,\n        ['sign']\n    )\n\n    // Export key in JWK (JSON Web Key) format\n    let exportedKey = await crypto.subtle.exportKey('jwk', key)\n\n    return exportedKey\n}\n\n\nexport default generateHMACKey","// Encryption\nexport const encryptData = async (text, key) => {\n    let iv = crypto.getRandomValues(new Uint8Array(12)),\n        encoder = new TextEncoder(),\n        encodedText = encoder.encode(text)\n\n    let ciphertext = await crypto.subtle.encrypt(\n        {\n            name: \"AES-GCM\",\n            iv: iv,\n        },\n        key,\n        encodedText\n    );\n\n    return {\n        ciphertext: new Uint8Array(ciphertext),\n        iv: iv\n    }\n}\n\n\nexport default encryptData","// Decryption\nexport const decryptData = async (ciphertext, iv, key) => {\n    let decrypted = await crypto.subtle.decrypt(\n        {\n            name: \"AES-GCM\",\n            iv: iv,\n        },\n        key,\n        ciphertext\n    )\n\n    let decoder = new TextDecoder()\n\n    return decoder.decode(decrypted)\n}\n\n\nexport default decryptData","import { useGlobalStore } from '@/store'\n\nimport { DBgetMultipleData } from '@/utils/db'\nimport { importWalletFromMnemonic } from './importWalletFromMnemonic'\nimport { importWalletFromPrivateKey } from './importWalletFromPrivateKey'\n\n\n// Get address\nexport const getAddress = async () => {\n    let store = useGlobalStore(),\n        wallet = null\n\n    // Get from DB\n    let DBSecret = await DBgetMultipleData('secret', [\n        `wallet${store.currentWalletID}_secret`,\n        `wallet${store.currentWalletID}_privateKey`\n    ])\n\n    // Wallet\n    if (DBSecret[`wallet${store.currentWalletID}_secret`]) {\n        // Get secret from DB\n        let secret = await store.getSecret(true)\n\n        // Get wallet\n        wallet = await importWalletFromMnemonic(secret, store.networks[store.currentNetwork].prefix)\n    }\n\n    if (DBSecret[`wallet${store.currentWalletID}_privateKey`]) {\n        // Get secret from DB\n        let privateKey = await store.getPrivateKey(true)\n\n        // Get wallet\n        wallet = await importWalletFromPrivateKey(privateKey, store.networks[store.currentNetwork].prefix)\n    }\n\n    // Current address\n    let address = (await wallet.getAccounts())[0].address\n\n    return address\n}\n\n\nexport default getAddress","import { useGlobalStore } from '@/store'\nimport { SigningCosmWasmClient } from '@cosmjs/cosmwasm-stargate'\nimport { SigningStargateClient } from '@cosmjs/stargate'\n\nimport { DBgetMultipleData } from '@/utils/db'\nimport { importWalletFromMnemonic } from './importWalletFromMnemonic'\nimport { importWalletFromPrivateKey } from './importWalletFromPrivateKey'\n\n\n// Create singer\nexport const createSinger = async () => {\n    let store = useGlobalStore(),\n        wallet = null\n\n    // Get from DB\n    let DBSecret = await DBgetMultipleData('secret', [\n        `wallet${store.currentWalletID}_secret`,\n        `wallet${store.currentWalletID}_privateKey`\n    ])\n\n    // Wallet\n    if (DBSecret[`wallet${store.currentWalletID}_secret`]) {\n        // Get secret from DB\n        let secret = await store.getSecret(true)\n\n        // Get wallet\n        wallet = await importWalletFromMnemonic(secret, store.networks[store.currentNetwork].prefix)\n    }\n\n    if (DBSecret[`wallet${store.currentWalletID}_privateKey`]) {\n        // Get secret from DB\n        let privateKey = await store.getPrivateKey(true)\n\n        // Get wallet\n        wallet = await importWalletFromPrivateKey(privateKey, store.networks[store.currentNetwork].prefix)\n    }\n\n    // Stargate client\n    let signingClient = await SigningStargateClient.connectWithSigner(store.networks[store.currentNetwork].rpc_api, wallet)\n\n    // Stargate Cosm wasm client\n    let signingCosmWasmClient = await SigningCosmWasmClient.connectWithSigner(store.networks[store.currentNetwork].rpc_api, wallet)\n\n    return { signingClient, signingCosmWasmClient }\n}\n\n\nexport default createSinger","import { useGlobalStore } from '@/store'\n\n\n// Denom traces\nexport const denomTraces = async (string) => {\n    let store = useGlobalStore(),\n        result = {\n            path: null,\n            base_denom: string\n        },\n        hash = string.split('/')\n\n    if (hash[0] == 'ibc') {\n        try {\n            // Request\n            await fetch(`${store.networks[store.currentNetwork].lcd_api}/ibc/apps/transfer/v1/denom_traces/${hash[1]}`)\n                .then(response => response.json())\n                .then(response => result = response.denom_trace)\n        } catch (error) {\n            console.error(error)\n        }\n    } else if (hash[0] == 'factory') {\n        result.ingnoreTraces = true\n        result.base_denom = hash[hash.length - 1]\n    }\n\n    return result\n}\n\n\nexport default denomTraces","// Format token amount\nexport const formatTokenAmount = (amount, exponent) => amount / Math.pow(10, exponent)\n\n\nexport default formatTokenAmount","import { useGlobalStore } from '@/store'\n\n\n// Format token cost\nexport const formatTokenCost = (cost, currency = null) => {\n    let store = useGlobalStore(),\n        currentCurrency = currency || store.currentCurrency\n\n    // Rounding\n    switch (currentCurrency) {\n        case 'BTC':\n            return cost > 0.0000000001 || cost == 0 ? cost.toLocaleString('ru-RU', { maximumFractionDigits: 10, minimumFractionDigits: 2 }).replace(',', '.') : '<0.0000000001'\n\n        case 'ETH':\n            return cost > 0.0000001 || cost == 0 ? cost.toLocaleString('ru-RU', { maximumFractionDigits: 7, minimumFractionDigits: 2 }).replace(',', '.') : '<0.0000001'\n\n        default:\n            return cost > 0.01 || cost == 0 ? cost.toLocaleString('ru-RU', { maximumFractionDigits: 2, minimumFractionDigits: 2 }).replace(',', '.') : '<0.01'\n    }\n}\n\n\nexport default formatTokenCost","import { useGlobalStore } from '@/store'\n\n\n// Format token name\nexport const formatTokenName = tokenName => {\n    let store = useGlobalStore(),\n        formatableToken = store.formatableTokens.find(el => el.token_name === tokenName),\n        formatTokenName = formatableToken ? formatableToken.format_token_name : tokenName\n\n    return formatTokenName\n}\n\n\nexport default formatTokenName","import { useGlobalStore } from '@/store'\n\n\n// Get price by denom\nexport const getPriceByDenom = denom => {\n    let store = useGlobalStore(),\n        price = store.prices.find(el => el.symbol.toLowerCase() === denom.toLowerCase())?.price || 0,\n        formatableToken = store.formatableTokens.find(el => el.token_name == denom),\n        formatPrice = formatableToken ? price * Math.pow(10, formatableToken.exponent) : price\n\n    return formatPrice\n}\n\n\nexport default getPriceByDenom","import { useGlobalStore } from '@/store'\nimport { formatTokenName } from './formatTokenName'\nimport { getPriceByDenom } from './getPriceByDenom'\n\n\n// Currency conversion\nexport const currencyConversion = (amount, denom, currency) => {\n    let store = useGlobalStore(),\n        currentCurrencyPrice = 1\n\n    currency\n        ? currentCurrencyPrice = store.prices.find(el => el.symbol.toLowerCase() === formatTokenName(currency).toLowerCase()).price\n        : currentCurrencyPrice = store.prices.find(el => el.symbol.toLowerCase() === formatTokenName(store.currentCurrency).toLowerCase()).price\n\n    return amount * (getPriceByDenom(denom) / currentCurrencyPrice)\n}\n\n\nexport default currencyConversion","import { formatTokenAmount } from './formatTokenAmount'\nimport { currencyConversion } from './currencyConversion'\n\n\n// Calc token cost in current cucrrency\nexport const calcTokenCost = (denom, amount, exponent, currency = null) => {\n    let formatAmount = formatTokenAmount(amount, exponent)\n\n    return currencyConversion(formatAmount, denom, currency)\n}\n\n\nexport default calcTokenCost","import { useGlobalStore } from '@/store'\nimport { calcTokenCost } from './calcTokenCost'\n\n\n// Calc balances cost in current cucrrency\nexport const calcBalancesCost = (currency = null) => {\n    let store = useGlobalStore(),\n        totalPrice = 0\n\n    // Calc total cost\n    if (store.balances.length) {\n        store.balances.forEach(balance => totalPrice += calcTokenCost(balance.token_info.symbol, balance.amount, balance.exponent, currency))\n    }\n\n    return parseFloat(totalPrice)\n}\n\n\nexport default calcBalancesCost","import { useGlobalStore } from '@/store'\nimport { calcTokenCost } from './calcTokenCost'\n\n\n// Calc Staked balances cost in current cucrrency\nexport const calcStakedBalancesCost = (currency = null) => {\n    let store = useGlobalStore(),\n        totalPrice = 0\n\n    // Calc total cost\n    if (store.stakedBalances.length) {\n        store.stakedBalances.forEach(el => totalPrice += calcTokenCost(el.balance.token_info.symbol, el.balance.amount, el.balance.exponent, currency))\n    }\n\n    return parseFloat(totalPrice)\n}\n\n\nexport default calcStakedBalancesCost","import { useGlobalStore } from '@/store'\nimport { calcTokenCost } from './calcTokenCost'\n\n\n// Calc rewards balances cost in current cucrrency\nexport const calcRewardsBalancesCost = (currency = null) => {\n    let store = useGlobalStore(),\n        totalPrice = 0\n\n    // Calc total cost\n    if (store.rewardsBalances.length) {\n        store.rewardsBalances.forEach(balance => totalPrice += calcTokenCost(balance.token_info.symbol, balance.amount, balance.exponent, currency))\n    }\n\n    return parseFloat(totalPrice)\n}\n\n\nexport default calcRewardsBalancesCost","import { useGlobalStore } from '@/store'\n\n\n// Calc stake available amount\nexport const calcAvailableAmount = () => {\n    let store = useGlobalStore(),\n        balance = store.balances.find(balance => balance.denom === store.networks[store.currentNetwork].denom)\n\n    return balance ? parseFloat(balance.amount) : 0\n}\n\n\nexport default calcAvailableAmount","import { useGlobalStore } from '@/store'\n\n\n// Calc staked amount\nexport const calcStakedAmount = () => {\n    let store = useGlobalStore(),\n        totalAmount = 0\n\n    // Calc total amount\n    if (store.stakedBalances.length) {\n        store.stakedBalances.forEach(item => totalAmount += parseFloat(item.balance.amount))\n    }\n\n    return totalAmount\n}\n\n\nexport default calcStakedAmount","import { useGlobalStore } from '@/store'\n\n\n// Calc unstaking amount\nexport const calcUnstakingAmount = () => {\n    let store = useGlobalStore(),\n        totalAmount = 0\n\n    // Calc total amount\n    if (store.unstakingBalances.length) {\n        store.unstakingBalances.forEach(item => {\n            item.entries.forEach(el => totalAmount += parseFloat(el.balance))\n        })\n    }\n\n    return totalAmount\n}\n\n\nexport default calcUnstakingAmount","import { useGlobalStore } from '@/store'\nimport { chains } from 'chain-registry'\n\n\n// Get metwork logo\nexport const getNetworkLogo = chainId => {\n    let store = useGlobalStore(),\n        logo = ''\n\n    if (chainId) {\n        let chain = Object.values(store.networks).find(el => el.chain_id === chainId)\n\n        if (chain !== undefined && chain.logo) {\n            logo = chain.logo\n        } else {\n            chain = chains.find(el => el.chain_id === chainId)\n\n            if (chain) {\n                if (chain.logo_URIs) {\n                    logo = chain.logo_URIs.svg || chain.logo_URIs.png\n                } else if (chain.images) {\n                    logo = chain.images[chain.images.length - 1].svg || chain.images[chain.images.length - 1].png\n                }\n            }\n        }\n    }\n\n    return logo\n}\n\n\nexport default getNetworkLogo","import { useGlobalStore } from '@/store'\n\nimport { createSinger } from './createSinger'\n\n\n// Simulate Tx\nexport const simulateTx = async (msg, memo = '') => {\n    let store = useGlobalStore(),\n        { signingCosmWasmClient } = await createSinger()\n\n    // Simulate gas\n    let gasUsed = await signingCosmWasmClient.simulate(store.currentAddress, msg, memo)\n\n    // Set gas amount\n    store.TxFee.gasAmount = parseInt(gasUsed * store.networks[store.currentNetwork].gas_adjustment)\n\n    // Set user gas amount\n    store.TxFee.userGasAmount = store.TxFee.gasAmount\n}\n\n\nexport default simulateTx","import { useGlobalStore } from '@/store'\nimport { TxRaw } from 'cosmjs-types/cosmos/tx/v1beta1/tx'\nimport { sha256 } from '@cosmjs/crypto'\n\nimport { createSinger } from './createSinger'\n\n\n// Sign Tx\nexport const signTx = async (msg, memo) => {\n    let store = useGlobalStore(),\n        { signingCosmWasmClient } = await createSinger()\n\n    // Fee\n    let fee = {\n        amount: [{\n            denom: store.networks[store.currentNetwork].denom,\n            amount: parseInt(store.TxFee.userGasAmount * store.TxFee[`${store.TxFee.currentLevel}Price`]).toString()\n        }],\n        gas: store.TxFee.userGasAmount.toString()\n    }\n\n    // Sign\n    let txRaw = await signingCosmWasmClient.sign(store.currentAddress, msg, fee, memo)\n\n    // Encode TxRaw\n    let txBytes = TxRaw.encode(txRaw).finish()\n\n    // Hash transaction bytes\n    let txHash = sha256(txBytes)\n\n    // Convert hash bytes to hex string\n    store.networks[store.currentNetwork].currentTxHash = Buffer.from(txHash).toString('hex')\n\n    return txBytes\n}\n\n\nexport default signTx","import { createSinger } from './createSinger'\n\n\n// Send Tx\nexport const sendTx = async txBytes => {\n    let { signingCosmWasmClient } = await createSinger()\n\n    // Broadcast\n    await signingCosmWasmClient.broadcastTx(txBytes, signingCosmWasmClient.broadcastTimeoutMs, signingCosmWasmClient.broadcastPollIntervalMs)\n}\n\n\nexport default sendTx","import { useGlobalStore } from '@/store'\n\n\n// Get explorer link\nexport const getExplorerLink = (network) => {\n    let store = useGlobalStore()\n\n    return (store.networks[network].explorer_link).replace('{tx_hash}', store.networks[network].currentTxHash)\n}\n\n\nexport default getExplorerLink","// Image load error\nexport const imageLoadError = e => e.target.classList.add('hide')\n\n\nexport default imageLoadError","// Image load error\nexport const imageLoadSuccess = e => e.target.classList.remove('hide')\n\n\nexport default imageLoadSuccess","// Date calc\nexport const dateCalc = date => {\n    let currentDate = new Date(date),\n        userTimeZone = new Date().getTimezoneOffset() / 60 * -1\n\n    return new Date(currentDate.setHours(currentDate.getHours() + userTimeZone))\n}\n\n\nexport default dateCalc","// Decode from base64\nexport const decodeFromBase64 = base64String => {\n    // Decode the Base64 string back to a JSON string\n    const jsonString = atob(base64String)\n\n    // Convert the JSON string back to an object\n    return JSON.parse(jsonString)\n}\n\n\nexport default decodeFromBase64","// Convert arrayBuffers to Uint8Arrays\nexport const convertArrayBuffersToUint8Arrays = data => {\n    if (Array.isArray(data)) {\n        return data.map(convertArrayBuffersToUint8Arrays)\n    }\n\n    if (data !== null && typeof data === \"object\") {\n        const result = {}\n\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                const value = data[key];\n\n                if (value instanceof ArrayBuffer) {\n                    result[key] = new Uint8Array(value)\n                } else {\n                    result[key] = convertArrayBuffersToUint8Arrays(value);\n                }\n            }\n        }\n\n        return result\n    }\n\n    return data\n}\n\n\nexport default convertArrayBuffersToUint8Arrays","import { useGlobalStore } from '@/store'\n\n\n// Get Telegram user ID\nexport const getTgUserId = data => {\n    let store = useGlobalStore()\n\n    // Decode data\n    let decodedString = decodeURIComponent(data)\n\n    // Get user params\n    let userParams = JSON.parse(new URLSearchParams(decodedString).get('user'))\n\n    // Set data\n    if (userParams) {\n        store.tgUserId = userParams.id\n    }\n}\n\n\nexport default getTgUserId","<template>\n    <!-- Pin code -->\n    <div class=\"pin\">\n        <!-- Pin code label -->\n        <div class=\"field_label\">\n            {{ $t('message.auth_enter_pin_label') }}\n        </div>\n\n        <div class=\"row\" :class=\"{ error: wrongPin }\">\n            <!-- Pin code field -->\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[0]\" maxlength=\"1\" inputmode=\"numeric\" ref=\"inputRef\"\n                    :class=\"{ active: pinCode[0].length }\"\n                    @input=\"moveFocus($event, 1)\"\n                    @keydown.backspace=\"moveBack($event, 0)\">\n            </div>\n\n            <!-- Pin code field -->\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[1]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[0].length\"\n                    :class=\"{ active: pinCode[1].length }\"\n                    @input=\"moveFocus($event, 2)\"\n                    @keydown.backspace=\"moveBack($event, 1)\">\n            </div>\n\n            <!-- Pin code field -->\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[2]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[1].length\"\n                    :class=\"{ active: pinCode[2].length }\"\n                    @input=\"moveFocus($event, 3)\"\n                    @keydown.backspace=\"moveBack($event, 2)\">\n            </div>\n\n            <!-- Pin code field -->\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[3]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[2].length\"\n                    :class=\"{ active: pinCode[3].length }\"\n                    @input=\"moveFocus($event, 4)\"\n                    @keydown.backspace=\"moveBack($event, 3)\">\n            </div>\n\n            <!-- Pin code field -->\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[4]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[3].length\"\n                    :class=\"{ active: pinCode[4].length }\"\n                    @input=\"moveFocus($event, 5)\"\n                    @keydown.backspace=\"moveBack($event, 4)\">\n            </div>\n\n            <!-- Pin code field -->\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[5]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[4].length\"\n                    :class=\"{ active: pinCode[5].length }\"\n                    @input=\"moveFocus($event, 6)\"\n                    @keydown.backspace=\"moveBack($event, 5)\">\n            </div>\n        </div>\n\n        <!-- Pin warning text -->\n        <div class=\"warning\" v-if=\"userAuthErrorLimit < store.authErrorLimit\">\n            {{ $t('message.auth_error_warning', { count: userAuthErrorLimit }) }}\n        </div>\n    </div>\n\n\n    <!-- Biometric button -->\n    <button class=\"biometric_btn\" @click.prevent=\"checkBiometricAccess\" v-if=\"isBiometricAvailable && userAuthErrorLimit == store.authErrorLimit\">\n        <!-- Biometric button text -->\n        <span>{{ $t('message.btn_biometric2') }}</span>\n\n        <!-- Biometric button icon -->\n        <svg class=\"icon\" v-if=\"biometrictype === 'face'\">\n            <use xlink:href=\"@/assets/sprite.svg#ic_biometric_face\"></use>\n        </svg>\n\n        <!-- Biometric button icon -->\n        <svg class=\"icon\" v-else>\n            <use xlink:href=\"@/assets/sprite.svg#ic_biometric_finger\"></use>\n        </svg>\n    </button>\n\n\n    <!-- Buttons -->\n    <div class=\"btns\">\n        <!-- Login button -->\n        <button class=\"btn\" :class=\"{ disabled: !isFormValid }\" @click.prevent=\"login()\" v-if=\"userAuthErrorLimit < store.authErrorLimit\">\n            <span v-if=\"store.isAuthorized\">{{ $t('message.btn_sign') }}</span>\n            <span v-else>{{ $t('message.btn_login') }}</span>\n        </button>\n    </div>\n</template>\n\n\n<script setup>\n    import { onBeforeMount, ref, watch, computed, inject } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { useRouter } from 'vue-router'\n    import { hashDataWithKey } from '@/utils'\n    import { DBgetMultipleData } from '@/utils/db'\n\n\n    const store = useGlobalStore(),\n        router = useRouter(),\n        emitter = inject('emitter'),\n        pinCode = ref(['', '', '', '', '', '']),\n        pinDB = ref(''),\n        hmacKey = ref(''),\n        wrongPin = ref(false),\n        userAuthErrorLimit = ref(store.authErrorLimit),\n        isBiometric = ref(false),\n        isBiometricAvailable = ref(false),\n        biometricType = ref('finger')\n\n\n    onBeforeMount(async () => {\n        // Get data from DB\n        let DBData = await DBgetMultipleData('global', ['pin', 'authErrorLimit', 'isBiometric', 'hmacKey'])\n\n        // Set pin from DB\n        pinDB.value = DBData.pin\n\n        // Set hmacKey from DB\n        hmacKey.value = DBData.hmacKey\n\n        // Set user auth error limit\n        userAuthErrorLimit.value = DBData.authErrorLimit\n\n        // Set biometric status from DB\n        isBiometric.value = DBData.isBiometric\n\n        // Is biometric available\n        isBiometricAvailable.value = Telegram.WebApp.BiometricManager.isBiometricAvailable\n\n        // Biometric type\n        if (Telegram.WebApp.BiometricManager.biometricType != 'unknown') {\n            biometricType.value = Telegram.WebApp.BiometricManager.biometricType\n        }\n\n        // Check biometric access\n        if (isBiometricAvailable.value && isBiometric.value) {\n            checkBiometricAccess()\n        }\n    })\n\n\n    watch(pinCode.value, () => {\n        // Reset focus\n        if (pinCode.value[5].length) {\n            document.activeElement.blur()\n        }\n\n        // Login\n        if (pinCode.value[5].length && userAuthErrorLimit.value === store.authErrorLimit) {\n            login()\n        }\n    })\n\n\n    // Move focus\n    function moveFocus(event, nextIndex) {\n        if (event.target.value.length >= 1 && nextIndex < 6) {\n            event.target.closest('.row').querySelector(`.field:nth-child(${nextIndex + 1}) input`).focus()\n        }\n    }\n\n\n    // Move back\n    function moveBack(event, currentIndex) {\n        setTimeout(() => {\n            if (event.target.value.length === 0 && currentIndex > 0) {\n                event.target.closest('.row').querySelector(`.field:nth-child(${currentIndex}) input`).select()\n            }\n        })\n    }\n\n\n    // Check biometric access\n    function checkBiometricAccess() {\n        !Telegram.WebApp.isAccessGranted\n            ? Telegram.WebApp.BiometricManager.requestAccess({ reason: '' }, () => biometricAuthenticate())\n            : biometricAuthenticate()\n    }\n\n\n    // Biometric authenticate\n    function biometricAuthenticate() {\n        Telegram.WebApp.BiometricManager.authenticate({ reason: '' }, res => {\n            if (res) {\n                // Set event auth\n                emitter.emit('auth')\n            }\n        })\n    }\n\n\n    // Login\n    async function login() {\n        // Compare pins\n        let compareResult = await comparePINCode()\n\n        if (compareResult) {\n            // Update limit\n            userAuthErrorLimit.value = store.authErrorLimit\n\n            // Set event auth\n            emitter.emit('auth')\n        } else {\n            // Set auth error\n            await setAuthError()\n        }\n    }\n\n\n    // Compare pin code\n    async function comparePINCode() {\n        // Encrypt the PIN\n        let pinHash = await hashDataWithKey(pinCode.value.join(''), hmacKey.value)\n\n        return pinHash === pinDB.value\n    }\n\n\n    // Set auth error\n    async function setAuthError() {\n        // Set error\n        wrongPin.value = true\n\n        let newLimit = userAuthErrorLimit.value - 1\n\n        // Update limit\n        userAuthErrorLimit.value = newLimit\n\n        if (!store.isAuthorized) {\n            // Сhange auth limit\n            await store.updateUserAuthErrorLimit(newLimit)\n\n            if (!newLimit) {\n                // Set user lock\n                await store.setUserLock()\n\n                // Redirect\n                router.push('/lock')\n            }\n        } else {\n            if (!newLimit) {\n                // Set event show_error_sign_tx_modal\n                emitter.emit('show_error_sign_tx_modal')\n            }\n        }\n\n        // Clear data\n        pinCode.value = ['', '', '', '', '', '']\n\n        // Reset data\n        wrongPin.value = false\n    }\n\n\n    // Validate form\n    const isFormValid = computed(() => pinCode.value[5].length != '')\n</script>\n\n\n<style scoped>\n    .pin\n    {\n        position: relative;\n\n        margin-top: 8px;\n    }\n\n\n    .pin .row\n    {\n        flex-wrap: nowrap;\n    }\n\n\n    .pin .row > *\n    {\n        width: 100%;\n    }\n\n\n    .pin .row > * + *\n    {\n        margin-left: 10px;\n    }\n\n\n    .pin .input\n    {\n        font-size: 20px;\n\n        text-align: center;\n    }\n\n\n    .pin .error .input\n    {\n        border-color: #f00;\n    }\n\n    .pin .success .input\n    {\n        border-color: #00aa63;\n    }\n\n\n    .pin .warning\n    {\n        font-size: 12px;\n\n        position: absolute;\n        top: 100%;\n        left: 0;\n\n        width: 100%;\n        margin-top: 4px;\n\n        text-align: center;\n\n        color: #ff4b4b;\n    }\n\n\n\n    .biometric_btn\n    {\n        font-size: 18px;\n        font-weight: 500;\n\n        display: block;\n\n        margin: auto;\n    }\n\n\n    .biometric_btn.top\n    {\n        margin-top: 40px;\n    }\n\n\n    .biometric_btn .icon\n    {\n        display: block;\n\n        width: 44px;\n        height: 44px;\n        margin: 0 auto;\n    }\n\n\n    .biometric_btn.disabled\n    {\n        pointer-events: none;\n\n        opacity: .6;\n    }\n</style>","import script from \"./Auth.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Auth.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Auth.vue?vue&type=style&index=0&id=184e5273&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-184e5273\"]])\n\nexport default __exports__","<template>\n    <!-- Loader wrap -->\n    <div class=\"loader_wrap\">\n        <!-- Loader -->\n        <div class=\"loader\"><span></span></div>\n    </div>\n</template>\n\n\n<style>\n    .loader_wrap\n    {\n        position: absolute;\n        z-index: 7;\n        top: 0;\n        left: 0;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 100%;\n        height: 100%;\n\n        border-radius: inherit;\n        background: rgba(0, 0, 0, .5);\n    }\n\n\n    .loader\n    {\n        position: relative;\n\n        width: 32px;\n        height: 32px;\n        margin: 0 auto;\n    }\n\n\n    .loader span\n    {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n\n        display: block;\n\n        width: 100%;\n        height: 100%;\n        margin: auto;\n    }\n\n    .loader span::before,\n    .loader span::after\n    {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n\n        display: block;\n\n        width: 100%;\n        height: 100%;\n        margin: auto;\n\n        content: '';\n        animation: loader-1 1.5s cubic-bezier(.075, .820, .165, 1.000) infinite;\n\n        opacity: 0;\n        border: 2px solid #fff;\n        border-radius: 50%;\n    }\n\n    .loader span::after\n    {\n        animation: loader-2 1.5s cubic-bezier(.075, .820, .165, 1.000) .25s infinite;\n    }\n\n\n    @-webkit-keyframes loader-1\n    {\n        0%\n        {\n            -webkit-transform: translate3d(0, 0, 0) scale(0);\n\n            opacity: 1;\n        }\n\n        100%\n        {\n            -webkit-transform: translate3d(0, 0, 0) scale(1.5);\n\n            opacity: 0;\n        }\n    }\n\n    @keyframes loader-1\n    {\n        0%\n        {\n            transform: translate3d(0, 0, 0) scale(0);\n\n            opacity: 1;\n        }\n\n        100%\n        {\n            transform: translate3d(0, 0, 0) scale(1.5);\n\n            opacity: 0;\n        }\n    }\n\n\n    @-webkit-keyframes loader-2\n    {\n        0%\n        {\n            -webkit-transform: translate3d(0, 0, 0) scale(0);\n\n            opacity: 1;\n        }\n\n        100%\n        {\n            -webkit-transform: translate3d(0, 0, 0) scale(1);\n\n            opacity: 0;\n        }\n    }\n\n    @keyframes loader-2\n    {\n        0%\n        {\n            transform: translate3d(0, 0, 0) scale(0);\n\n            opacity: 1;\n        }\n\n        100%\n        {\n            transform: translate3d(0, 0, 0) scale(1);\n\n            opacity: 0;\n        }\n    }\n\n</style>","import { render } from \"./Loader.vue?vue&type=template&id=7c4ddd1d\"\nconst script = {}\n\nimport \"./Loader.vue?vue&type=style&index=0&id=7c4ddd1d&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n    <!-- Tx fee modal -->\n    <section class=\"modal\">\n        <div class=\"modal_content\">\n            <!-- Tx fee modal data -->\n            <div class=\"data\">\n                <!-- Back button -->\n                <button class=\"close_btn\" @click.prevent=\"emitter.emit('close_tx_fee_modal')\">\n                    <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_close\"></use></svg>\n                </button>\n\n                <!-- Modal title -->\n                <div class=\"modal_title\">\n                    {{ $t('message.tx_fee_modal_title') }}\n                </div>\n\n\n                <!-- Fee tier -->\n                <div class=\"fee_tier\">\n                    <div class=\"label\">\n                        <!-- Fee tier label -->\n                        <span>{{ $t('message.tx_fee_fee_tier_label') }}</span>\n\n                        <!-- Fee tier toggle button -->\n                        <button class=\"toggle_btn\" :class=\"{ enabled: store.TxFee.isRemember }\" @click.prevent=\"store.TxFee.isRemember = !store.TxFee.isRemember\">\n                            <span>{{ $t('message.tx_fee_remember_label') }}</span>\n\n                            <div class=\"toggle_wrap\">\n                                <div class=\"toggle\">\n                                    <div class=\"ball_wrap\">\n                                        <div class=\"ball\"><svg><use xlink:href=\"@/assets/sprite.svg#ic_check\"></use></svg></div>\n                                    </div>\n                                </div>\n                            </div>\n                        </button>\n                    </div>\n\n                    <!-- Fee tier values -->\n                    <div class=\"vals_wrap\">\n                        <div class=\"vals\">\n                            <!-- Fee tier values button -->\n                            <button class=\"btn\" ref=\"level_low\" :class=\"{ active: store.TxFee.currentLevel === 'low' }\" @click.prevent=\"store.TxFee.currentLevel = 'low'\">\n                                <!-- Fee tier values name -->\n                                <div class=\"name\">\n                                    {{ $t('message.tx_fee_low_label') }}\n                                </div>\n\n                                <!-- Fee tier values cost -->\n                                <div class=\"cost\">\n                                    ~ {{ formatTokenCost(calcTokenCost(store.networks[store.currentNetwork].token_name, store.TxFee.userGasAmount * store.TxFee.lowPrice, store.networks[store.currentNetwork].exponent, 'USD'), 'USD') }}$\n                                </div>\n\n                                <!-- Fee tier values amount -->\n                                <div class=\"amount\">\n                                    {{ formatTokenAmount(store.TxFee.userGasAmount * store.TxFee.lowPrice, store.networks[store.currentNetwork].exponent).toLocaleString('ru-RU', { maximumFractionDigits: 5 }).replace(',', '.') }}\n                                </div>\n\n                                <!-- Fee tier values denom -->\n                                <div class=\"denom\">\n                                    {{ store.networks[store.currentNetwork].token_name }}\n                                </div>\n                            </button>\n\n                            <!-- Fee tier values button -->\n                            <button class=\"btn\" ref=\"level_average\" :class=\"{ active: store.TxFee.currentLevel === 'average' }\" @click.prevent=\"store.TxFee.currentLevel = 'average'\">\n                                <!-- Fee tier values name -->\n                                <div class=\"name\">\n                                    {{ $t('message.tx_fee_average_label') }}\n                                </div>\n\n                                <!-- Fee tier values cost -->\n                                <div class=\"cost\">\n                                    ~ {{ formatTokenCost(calcTokenCost(store.networks[store.currentNetwork].token_name, store.TxFee.userGasAmount * store.TxFee.averagePrice, store.networks[store.currentNetwork].exponent, 'USD'), 'USD') }}$\n                                </div>\n\n                                <!-- Fee tier values amount -->\n                                <div class=\"amount\">\n                                    {{ formatTokenAmount(store.TxFee.userGasAmount * store.TxFee.averagePrice, store.networks[store.currentNetwork].exponent).toLocaleString('ru-RU', { maximumFractionDigits: 5 }).replace(',', '.') }}\n                                </div>\n\n                                <!-- Fee tier values denom -->\n                                <div class=\"denom\">\n                                    {{ store.networks[store.currentNetwork].token_name }}\n                                </div>\n                            </button>\n\n                            <!-- Fee tier values button -->\n                            <button class=\"btn\" ref=\"level_high\" :class=\"{ active: store.TxFee.currentLevel === 'high' }\" @click.prevent=\"store.TxFee.currentLevel = 'high'\">\n                                <!-- Fee tier values name -->\n                                <div class=\"name\">\n                                    {{ $t('message.tx_fee_high_label') }}\n                                </div>\n\n                                <!-- Fee tier values cost -->\n                                <div class=\"cost\">\n                                    ~ {{ formatTokenCost(calcTokenCost(store.networks[store.currentNetwork].token_name, store.TxFee.userGasAmount * store.TxFee.highPrice, store.networks[store.currentNetwork].exponent, 'USD'), 'USD') }}$\n                                </div>\n\n                                <!-- Fee tier values amount -->\n                                <div class=\"amount\">\n                                    {{ formatTokenAmount(store.TxFee.userGasAmount * store.TxFee.highPrice, store.networks[store.currentNetwork].exponent).toLocaleString('ru-RU', { maximumFractionDigits: 5 }).replace(',', '.') }}\n                                </div>\n\n                                <!-- Fee tier values denom -->\n                                <div class=\"denom\">\n                                    {{ store.networks[store.currentNetwork].token_name }}\n                                </div>\n                            </button>\n\n                            <!-- Roller -->\n                            <div class=\"roller\" :style=\"`width: ${rollerWidth}px; left: ${rollerOffsetLeft}px;`\">\n                                <span></span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n\n                <!-- Fee token -->\n                <div class=\"fee_token\">\n                    <!-- Fee token label -->\n                    <div class=\"label\">\n                        {{ $t('message.tx_fee_fee_token_label') }}\n                    </div>\n\n                    <div class=\"field\">\n                        <!-- Fee token field -->\n                        <input type=\"text\" class=\"input big\" :value=\"store.networks[store.currentNetwork].token_name\" readonly>\n\n                        <!-- <svg class=\"arr\"><use xlink:href=\"@/assets/sprite.svg#ic_arr_ver2\"></use></svg> -->\n                    </div>\n                </div>\n\n\n                <!-- Gas adjustment -->\n                <div class=\"gas_adjustment\">\n                    <div class=\"label\">\n                        <!-- Gas adjustment label -->\n                        <span v-if=\"store.TxFee.isGasAdjustmentAuto\">{{ $t('message.tx_fee_gas_adjustment_label') }}</span>\n                        <span v-else>{{ $t('message.tx_fee_gas_amount_label') }}</span>\n\n                        <!-- Gas adjustment toggle button -->\n                        <button class=\"toggle_btn\" :class=\"{ enabled: store.TxFee.isGasAdjustmentAuto }\" @click.prevent=\"store.TxFee.isGasAdjustmentAuto = !store.TxFee.isGasAdjustmentAuto\">\n                            <span>{{ $t('message.tx_fee_auto_label') }}</span>\n\n                            <div class=\"toggle_wrap\">\n                                <div class=\"toggle\">\n                                    <div class=\"ball_wrap\">\n                                        <div class=\"ball\"><svg><use xlink:href=\"@/assets/sprite.svg#ic_check\"></use></svg></div>\n                                    </div>\n                                </div>\n                            </div>\n                        </button>\n                    </div>\n\n                    <div class=\"field\" v-if=\"store.TxFee.isGasAdjustmentAuto\">\n                        <!-- Gas adjustment field -->\n                        <input type=\"number\" class=\"input big\" :value=\"store.networks[store.currentNetwork].gas_adjustment\" disabled>\n                    </div>\n\n                    <div class=\"field\" v-else>\n                        <!-- Gas adjustment field -->\n                        <input type=\"number\" inputmode=\"decimal\" class=\"input big\" v-model=\"store.TxFee.userGasAmount\" maxlength=\"10\"\n                            @input=\"validateUserGasAmount($event)\">\n                    </div>\n                </div>\n\n\n                <!-- Gas adjustment buttons -->\n                <div class=\"btns\">\n                    <!-- Close button -->\n                    <button class=\"btn\" @click.prevent=\"emitter.emit('close_tx_fee_modal')\">\n                        <span>{{ $t('message.btn_close') }}</span>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </section>\n</template>\n\n\n<script setup>\n    import { ref, inject, watch, computed, onMounted } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { calcTokenCost, formatTokenCost, formatTokenAmount } from '@/utils'\n\n\n    const store = useGlobalStore(),\n        emitter = inject('emitter'),\n        level_low = ref(null),\n        level_average = ref(null),\n        level_high = ref(null),\n        levels = {\n            low: level_low,\n            average: level_average,\n            high: level_high\n        },\n        rollerWidth = ref(null),\n        rollerOffsetLeft = ref(null)\n\n\n    onMounted(() => {\n        // Set roller params\n        rollerWidth.value = levels[store.TxFee.currentLevel].value.offsetWidth\n        rollerOffsetLeft.value = levels[store.TxFee.currentLevel].value.offsetLeft\n    })\n\n\n    watch(computed(() => store.TxFee.currentLevel), () => {\n        // Update roller params\n        rollerWidth.value = levels[store.TxFee.currentLevel].value.offsetWidth\n        rollerOffsetLeft.value = levels[store.TxFee.currentLevel].value.offsetLeft\n    })\n\n\n    watch(computed(() => store.TxFee.isGasAdjustmentAuto), () => {\n        // Default gas amount\n        store.TxFee.userGasAmount = store.TxFee.gasAmount\n    })\n\n\n    watch(computed(() => store.TxFee.userGasAmount), () => {\n        // Enough status\n        store.TxFeeIsEnough()\n    })\n\n\n    // Validate user gas amount\n    function validateUserGasAmount(e) {\n        // Empty or zero\n        if (e.target.value <= 0) {\n            // Set simulated gas amount\n            store.TxFee.userGasAmount = store.TxFee.gasAmount\n        }\n    }\n</script>\n\n\n<style scoped>\n    .modal_title\n    {\n        margin-bottom: 18px;\n    }\n\n\n\n    .label\n    {\n        font-size: 14px;\n\n        margin-bottom: 2px;\n        padding: 0 10px;\n    }\n\n\n\n    .fee_tier .label\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: space-between;\n    }\n\n\n    .fee_tier .vals_wrap\n    {\n        margin-top: 4px;\n        padding: 1px;\n\n        border-radius: 10px;\n        background: linear-gradient(to bottom,  #5d33ce 0%,#200750 100%);\n    }\n\n\n    .fee_tier .vals\n    {\n        position: relative;\n\n        display: flex;\n        align-content: stretch;\n        align-items: stretch;\n        flex-wrap: nowrap;\n        justify-content: flex-start;\n\n        padding: 6px;\n\n        border-radius: 9px;\n        background: #170232;\n    }\n\n\n    .fee_tier .vals .btn\n    {\n        position: relative;\n        z-index: 2;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 100%;\n        padding: 6px 8px;\n\n        text-align: center;\n\n        border-radius: 4px;\n    }\n\n\n    .fee_tier .vals .name\n    {\n        font-size: 16px;\n        font-weight: 500;\n\n        width: 100%;\n        padding: 2px 0;\n    }\n\n\n    .fee_tier .vals .cost\n    {\n        font-size: 12px;\n\n        width: 100%;\n        margin-top: 2px;\n\n        opacity: .6;\n    }\n\n\n    .fee_tier .vals .amount,\n    .fee_tier .vals .denom\n    {\n        font-weight: 500;\n\n        margin-top: 2px;\n        padding: 2px 0;\n\n        white-space: nowrap;\n    }\n\n\n    .fee_tier .vals .denom\n    {\n        margin-left: 4px;\n    }\n\n\n    .fee_tier .roller\n    {\n        position: absolute;\n        z-index: 1;\n        top: 0;\n        bottom: 0;\n        left: 6px;\n\n        height: calc(100% - 12px);\n        margin: auto 0;\n        padding: 1px;\n\n        transition: .2s linear;\n\n        border-radius: 4px;\n        background: linear-gradient(to bottom,  #7544ff 0%,#1a0242 100%);\n    }\n\n\n    .fee_tier .roller span\n    {\n        display: block;\n\n        width: 100%;\n        height: 100%;\n\n        border-radius: 3px;\n        background: radial-gradient(130.57% 114.69% at 50% 0%, rgba(148, 56, 248, .70) 0%, rgba(89, 21, 167, .70) 50.94%, rgba(53, 12, 107, .70) 85.09%);\n    }\n\n\n\n    .fee_token\n    {\n        margin-top: 10px;\n    }\n\n\n\n    .gas_adjustment\n    {\n        margin-top: 10px;\n    }\n\n\n    .gas_adjustment .label\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: space-between;\n    }\n\n\n\n    .field .arr\n    {\n        position: absolute;\n        z-index: 3;\n        top: 0;\n        right: 16px;\n        bottom: 0;\n\n        display: block;\n\n        width: 28px;\n        height: 28px;\n        margin: auto 0;\n    }\n\n\n\n    .field\n    {\n        position: relative;\n\n        padding: 1px;\n\n        border-radius: 10px;\n        background: linear-gradient(to bottom,  #5d33ce 0%,#200750 100%);\n    }\n\n\n    .input\n    {\n        border-radius: 9px;\n        background: #06000e;\n    }\n\n\n\n    .toggle_wrap\n    {\n        margin-left: 10px;\n        padding: 1px;\n\n        border-radius: 19px;\n        background: linear-gradient(to bottom,  #45097d 0%,#14012f 100%);\n    }\n\n\n    .toggle\n    {\n        position: relative;\n\n        width: 46px;\n        height: 22px;\n\n        border-radius: 19px;\n        background: #170232;\n    }\n\n\n    .ball_wrap\n    {\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        left: 2px;\n\n        width: 18px;\n        height: 18px;\n        margin: auto 0;\n        padding: 1px;\n\n        transition: left .2s linear;\n\n        border-radius: 50%;\n        background: linear-gradient(to bottom,  #8632e3 0%,#330c67 100%);\n    }\n\n\n    .ball\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 16px;\n        height: 16px;\n\n        color: #fff;\n        border-radius: 50%;\n        background: radial-gradient(130.57% 114.69% at 50% 0%, rgba(148, 56, 248, .70) 0%, rgba(89, 21, 167, .70) 50.94%, rgba(53, 12, 107, .70) 85.09%);\n    }\n\n\n    .ball svg\n    {\n        display: block;\n\n        width: 10px;\n        height: 10px;\n\n        transition: opacity .2s linear;\n\n        opacity: 0;\n    }\n\n\n\n    .toggle_btn\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: flex-start;\n\n        transition: color .2s linear;\n\n        color: rgba(255,255,255,.6);\n    }\n\n\n    .toggle_btn.enabled\n    {\n        color: #fff;\n    }\n\n    .toggle_btn.enabled .ball_wrap\n    {\n        left: 26px;\n\n        background: linear-gradient(to bottom,  #68def9 0%,#02294c 100%);\n    }\n\n\n    .toggle_btn.enabled .ball\n    {\n        background: linear-gradient(to bottom,  #56a8e7 0%,#064894 100%);\n    }\n\n\n    .toggle_btn.enabled .ball svg\n    {\n        opacity: 1;\n    }\n</style>","import script from \"./TxFeeModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TxFeeModal.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TxFeeModal.vue?vue&type=style&index=0&id=48eec76e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-48eec76e\"]])\n\nexport default __exports__","<template>\n    <!-- Tx fee -->\n    <div class=\"tx_fee\">\n        <div class=\"btn\" :class=\"{ red: !store.TxFee.isEnough }\" @click.prevent=\"openTxFeeModal()\">\n            <!-- Tx fee label -->\n            {{ $t('message.tx_fee_label') }}\n\n            <!-- Tx fee value -->\n            {{ cost.toLocaleString('ru-RU', { maximumFractionDigits: 5 }).replace(',', '.') }}\n\n            <!-- Tx fee denom -->\n            {{ store.networks[store.currentNetwork].token_name }}\n\n            <!-- Tx fee cost -->\n            <div class=\"cost\">\n                (~ {{ formatTokenCost(calcTokenCost(store.networks[store.currentNetwork].token_name, store.TxFee.userGasAmount * store.TxFee[`${store.TxFee.currentLevel}Price`], store.networks[store.currentNetwork].exponent, 'USD'), 'USD') }}$)\n            </div>\n        </div>\n    </div>\n\n\n    <!-- Tx fee modal -->\n    <transition name=\"modal\">\n    <TxFeeModal v-if=\"showTxFeeModal\" />\n    </transition>\n\n    <!-- Overlay -->\n    <transition name=\"fade\">\n    <div class=\"modal_overlay\" @click.prevent=\"emitter.emit('close_any_modal')\" v-if=\"showTxFeeModal\"></div>\n    </transition>\n</template>\n\n\n<script setup>\n    import { inject, ref, onBeforeMount, computed, onUnmounted } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { formatTokenAmount, simulateTx, calcTokenCost, formatTokenCost } from '@/utils'\n\n    // Components\n    import TxFeeModal from '@/components/modal/TxFeeModal.vue'\n\n\n    const props = defineProps(['msgAny', 'txType']),\n        store = useGlobalStore(),\n        emitter = inject('emitter'),\n        showTxFeeModal = ref(false),\n        cost = computed(() => formatTokenAmount(store.TxFee.userGasAmount * store.TxFee[`${store.TxFee.currentLevel}Price`], store.networks[store.currentNetwork].exponent))\n\n\n    onBeforeMount(async () => {\n        try {\n            // Reset data\n            await store.resetTxFee()\n\n            // Set current balance\n            store.TxFeeGetCurrentBalance(store.networks[store.currentNetwork].denom)\n\n            // Set gas prices\n            store.TxFeeSetGasPrices()\n\n            // Simulate Tx\n            if (store.TxFee.balance.amount) {\n                await simulateTx(props.msgAny)\n            } else {\n                // Set default gas amount\n                if (props.txType === 'send') {\n                    store.TxFee.gasAmount = store.TxFee.userGasAmount = store.networks[store.currentNetwork].gas_amount_send\n                }\n\n                if (props.txType === 'claim') {\n                    store.TxFee.gasAmount = store.TxFee.userGasAmount = store.networks[store.currentNetwork].gas_amount_claim\n                }\n\n                if (props.txType === 'stake') {\n                    store.TxFee.gasAmount = store.TxFee.userGasAmount = store.networks[store.currentNetwork].gas_amount_stake\n                }\n\n                if (props.txType === 'unstake') {\n                    store.TxFee.gasAmount = store.TxFee.userGasAmount = store.networks[store.currentNetwork].gas_amount_unstake\n                }\n\n                if (props.txType === 'redelegate') {\n                    store.TxFee.gasAmount = store.TxFee.userGasAmount = store.networks[store.currentNetwork].gas_amount_redelegate\n                }\n            }\n\n            // Enough status\n            store.TxFeeIsEnough()\n        } catch (error) {\n            console.log(error)\n        }\n    })\n\n\n    onUnmounted(() => {\n        // Reset data\n        store.TxFee.isEnough = false\n\n        // Unlisten events\n        emitter.off('close_any_modal')\n        emitter.off('close_tx_fee_modal')\n    })\n\n\n    // Open TxFee modal\n    function openTxFeeModal() {\n        // Show TxFee modal\n        showTxFeeModal.value = true\n\n        // Update status\n        store.isAnyModalOpen = true\n    }\n\n\n    // Event \"close_tx_fee_modal\"\n    emitter.on('close_tx_fee_modal', () => {\n        // Hide TxFee modal\n        showTxFeeModal.value = false\n\n        // Update status\n        store.isAnyModalOpen = false\n    })\n\n\n    // Event \"close_any_modal\"\n    emitter.on('close_any_modal', () => {\n        // Hide TxFee modal\n        showTxFeeModal.value = false\n\n        // Update status\n        store.isAnyModalOpen = false\n    })\n</script>\n\n\n<style scoped>\n    .tx_fee\n    {\n        margin-top: auto;\n        padding: 12px;\n\n        text-align: center;\n    }\n\n\n    .tx_fee .btn\n    {\n        font-size: 18px;\n        font-weight: 500;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 100%;\n\n        white-space: nowrap;\n        text-decoration: underline;\n\n        text-decoration-thickness: 1px;\n    }\n\n\n    .tx_fee .btn.red\n    {\n        color: #f33;\n    }\n\n\n    .tx_fee .cost\n    {\n        margin-left: 6px;\n\n        opacity: .6;\n        color: #fff;\n    }\n</style>","import script from \"./TxFee.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TxFee.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TxFee.vue?vue&type=style&index=0&id=fa8fe8fa&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-fa8fe8fa\"]])\n\nexport default __exports__","<template>\n    <!-- Sign Tx modal -->\n    <section class=\"modal\">\n        <div class=\"modal_content\">\n            <div class=\"data\">\n                <!-- Close button -->\n                <button class=\"close_btn\" @click.prevent=\"emitter.emit('close_sign_tx_modal')\">\n                    <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_close\"></use></svg>\n                </button>\n\n                <template v-if=\"!showErrorSignTxModal\">\n                <!-- Modal title -->\n                <div class=\"modal_title\">\n                    {{ $t('message.sign_tx_title') }}\n                </div>\n\n                <!-- Auth -->\n                <div class=\"auth_wrap\">\n                    <Auth />\n                </div>\n                </template>\n\n\n                <template v-else>\n                <!-- Modal title -->\n                <div class=\"modal_title\">\n                    {{ $t('message.sign_tx_error_title') }}\n                </div>\n\n                <!-- Modal desc -->\n                <div class=\"modal_desc\">\n                    {{ $t('message.sign_tx_error_desc') }}\n                </div>\n\n                <!-- Sign Tx error modal buttons -->\n                <div class=\"btns\">\n                    <!-- Understood button -->\n                    <button class=\"btn\" @click.prevent=\"emitter.emit('close_sign_tx_modal')\">\n                        <span>{{ $t('message.btn_understood') }}</span>\n                    </button>\n                </div>\n                </template>\n            </div>\n        </div>\n    </section>\n</template>\n\n\n<script setup>\n    import { ref, inject } from 'vue'\n\n    // Components\n    import Auth from '@/components/Auth.vue'\n\n\n    const emitter = inject('emitter'),\n        showErrorSignTxModal = ref(false)\n\n\n    // Event \"show_error_sign_tx_modal\"\n    emitter.on('show_error_sign_tx_modal', () => {\n        showErrorSignTxModal.value = true\n    })\n</script>\n\n\n<style scoped>\n    .auth_wrap\n    {\n        display: flex;\n        flex: 1 0 auto;\n        flex-direction: column;\n\n        margin-top: 28px;\n    }\n</style>","import script from \"./SignTxModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SignTxModal.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./SignTxModal.vue?vue&type=style&index=0&id=aeebf056&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-aeebf056\"]])\n\nexport default __exports__","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.amdO = {};","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"js/\" + chunkId + \".\" + {\"8\":\"af777415\",\"17\":\"91f21667\",\"20\":\"f6a0262c\",\"70\":\"8413138e\",\"119\":\"f1c825f4\",\"135\":\"1a4153c3\",\"139\":\"895cb09f\",\"183\":\"aecae2bf\",\"289\":\"aeb6c647\",\"399\":\"864093cd\",\"411\":\"628ae392\",\"449\":\"72b6a8fd\",\"484\":\"441dc95b\",\"523\":\"5a116f75\",\"590\":\"fa5d4fd6\",\"593\":\"1ceb108d\",\"749\":\"14a153d6\",\"751\":\"3e46beee\",\"768\":\"476cd2bf\",\"779\":\"7e7fd1b3\"}[chunkId] + \".js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"css/\" + chunkId + \".\" + {\"8\":\"f875b7c4\",\"17\":\"a3578cc9\",\"20\":\"79857be0\",\"70\":\"f5a30594\",\"119\":\"09d74a3a\",\"135\":\"b62c6c90\",\"139\":\"258f6011\",\"183\":\"ee1d6a22\",\"289\":\"ac75cd1f\",\"399\":\"d4a9d405\",\"411\":\"ee1d6a22\",\"449\":\"6a04af31\",\"484\":\"d324e975\",\"523\":\"f5a30594\",\"590\":\"857b1825\",\"749\":\"f875b7c4\",\"751\":\"e38ee18a\",\"768\":\"e8533d98\",\"779\":\"a37b1565\"}[chunkId] + \".css\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var inProgress = {};\nvar dataWebpackPrefix = \"cosmos-telegram-signer:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = function(url, done, key, chunkId) {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = function(prev, event) {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach(function(fn) { return fn(event); });\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/\";","if (typeof document === \"undefined\") return;\nvar createStylesheet = function(chunkId, fullhref, oldTag, resolve, reject) {\n\tvar linkTag = document.createElement(\"link\");\n\n\tlinkTag.rel = \"stylesheet\";\n\tlinkTag.type = \"text/css\";\n\tif (__webpack_require__.nc) {\n\t\tlinkTag.nonce = __webpack_require__.nc;\n\t}\n\tvar onLinkComplete = function(event) {\n\t\t// avoid mem leaks.\n\t\tlinkTag.onerror = linkTag.onload = null;\n\t\tif (event.type === 'load') {\n\t\t\tresolve();\n\t\t} else {\n\t\t\tvar errorType = event && event.type;\n\t\t\tvar realHref = event && event.target && event.target.href || fullhref;\n\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + errorType + \": \" + realHref + \")\");\n\t\t\terr.name = \"ChunkLoadError\";\n\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n\t\t\terr.type = errorType;\n\t\t\terr.request = realHref;\n\t\t\tif (linkTag.parentNode) linkTag.parentNode.removeChild(linkTag)\n\t\t\treject(err);\n\t\t}\n\t}\n\tlinkTag.onerror = linkTag.onload = onLinkComplete;\n\tlinkTag.href = fullhref;\n\n\n\tif (oldTag) {\n\t\toldTag.parentNode.insertBefore(linkTag, oldTag.nextSibling);\n\t} else {\n\t\tdocument.head.appendChild(linkTag);\n\t}\n\treturn linkTag;\n};\nvar findStylesheet = function(href, fullhref) {\n\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n\tfor(var i = 0; i < existingLinkTags.length; i++) {\n\t\tvar tag = existingLinkTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return tag;\n\t}\n\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n\tfor(var i = 0; i < existingStyleTags.length; i++) {\n\t\tvar tag = existingStyleTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\");\n\t\tif(dataHref === href || dataHref === fullhref) return tag;\n\t}\n};\nvar loadStylesheet = function(chunkId) {\n\treturn new Promise(function(resolve, reject) {\n\t\tvar href = __webpack_require__.miniCssF(chunkId);\n\t\tvar fullhref = __webpack_require__.p + href;\n\t\tif(findStylesheet(href, fullhref)) return resolve();\n\t\tcreateStylesheet(chunkId, fullhref, null, resolve, reject);\n\t});\n}\n// object to store loaded CSS chunks\nvar installedCssChunks = {\n\t524: 0\n};\n\n__webpack_require__.f.miniCss = function(chunkId, promises) {\n\tvar cssChunks = {\"8\":1,\"17\":1,\"20\":1,\"70\":1,\"119\":1,\"135\":1,\"139\":1,\"183\":1,\"289\":1,\"399\":1,\"411\":1,\"449\":1,\"484\":1,\"523\":1,\"590\":1,\"749\":1,\"751\":1,\"768\":1,\"779\":1};\n\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n\t\tpromises.push(installedCssChunks[chunkId] = loadStylesheet(chunkId).then(function() {\n\t\t\tinstalledCssChunks[chunkId] = 0;\n\t\t}, function(e) {\n\t\t\tdelete installedCssChunks[chunkId];\n\t\t\tthrow e;\n\t\t}));\n\t}\n};\n\n// no hmr\n\n// no prefetching\n\n// no preloaded","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n__webpack_require__.f.j = function(chunkId, promises) {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise(function(resolve, reject) { installedChunkData = installedChunks[chunkId] = [resolve, reject]; });\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = function(event) {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkcosmos_telegram_signer\"] = self[\"webpackChunkcosmos_telegram_signer\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(84343); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["en","message","i18n","createI18n","locale","fallbackLocale","messages","VueI18nMessages","emitter","inject","__exports__","store","useGlobalStore","notification","useNotification","approveRequest","connection","RTCConnections","jetPackRequest","data","peer_id","send","type","requestId","request_id","address","currentAddress","notify","group","speed","duration","title","global","t","emit","rejectRequest","memo","ref","isProcess","showSignTxModal","async","value","TxFee","isRemember","updateTxFeeInfo","txBytes","signTx","msg","clean","isCollapsible","explorer_link","getExplorerLink","currentNetwork","sendTx","catch","error","console","log","showError","showRedirectModal","resetTxFee","errorText","code","text","networks","currentTxHash","status","hash","openSignTxModal","isAnyModalOpen","on","router","useRouter","route","useRoute","useTitle","isReseting","layout","computed","meta","notificationTimeout","notificationAnimation","enter","translateY","leave","network","reactive","useNetwork","showConnectWalletModal","showSendTxModal","redirectToSend","parsedData","push","path","setCurrentNetwork","stopWatch","watch","isInitialized","query","denom","amount","notificationsOnStart","params","setTimeout","document","querySelector","classList","add","notificationsCollapsingDelay","notificationsOnDestroy","onBeforeMount","_paq","window","u","d","g","createElement","s","getElementsByTagName","src","parentNode","insertBefore","Telegram","WebApp","getTgUserId","initData","RTCPeer","Peer","tgBotId","tgUserId","conn","peer","isRTCConnected","convertArrayBuffersToUint8Arrays","method","jetPackSwitchNetwork","then","length","chain_id","isBalancesGot","balances","Object","keys","addEventListener","forEach","el","close","destroy","ready","expand","setHeaderColor","MainButton","showProgress","disableVerticalSwipes","BiometricManager","init","getAgeConfirmed","isAgeConfirmed","showConfirm","result","setAgeConfirmed","onEvent","closeScanQrPopup","split","onMounted","currentWalletID","newValue","oldValue","DBWallets","DBgetData","undefined","initApp","forcedUnlock","isOnline","remove","checkTxResult","setListenerCurrentTx","class","_createElementBlock","_hoisted_1","_createVNode","_component_router_view","default","_withCtx","Component","_createBlock","_resolveDynamicComponent","_","script","render","startY","isPulling","threshold","hasUpdated","handleTouchStart","e","scrollY","touches","pageY","handleTouchMove","currentY","distance","preventDefault","stopPropagation","account","updateAllBalances","handleTouchEnd","passive","onUnmounted","removeEventListener","routes","name","component","defaultLayout","accessDenied","accountLayout","createRouter","history","createWebHistory","beforeResolve","to","from","next","DBData","DBgetMultipleData","tgWebAppStartParam","decodeFromBase64","matched","some","record","access","includes","isRegister","isUserLock","Date","userLockTimestamp","userLockTime","isAuthorized","vFocus","mounted","focus","vParallax","offsetHeight","style","opacity","transform","vOdometer","number","numberArr","toFixed","innerHTML","map","char","join","updated","oldNumberArr","maxLength","Math","max","html","mismatchIndex","mismatchCount","animationDuration","animationDelay","concat","Array","fill","i","parseFloat","mitt","app","createApp","App","pinia","createPinia","use","Notifications","velocity","provide","directive","register","VueCountdown","mount","lcd_api","rpc_api","websocket_url","token_name","prefix","alias","exponent","gas_adjustment","address_length","gas_amount_send","gas_amount_claim","gas_amount_stake","gas_amount_unstake","gas_amount_redelegate","is_staking_available","logo","networksAdditionalOptions","websocket","unbondingTime","totalBondedTokens","totalUnstakingTokens","isUnstakingCancelSupport","defineStore","state","isInitializing","isStakedBalancesGot","isRewardsGot","isUnstakingBalancesGot","defaultDerivationPath","authErrorLimit","DBVersion","currentWalletDerivationPath","currentWalletName","currentCurrency","currentCurrencySymbol","IBCSendCurrentChain","stakeCurrentValidator","unstakeCurrentValidator","redelegateValidatorFrom","redelegateValidatorTo","wallets","prices","stakedBalances","rewardsBalances","unstakingBalances","redelegations","defaultWalletName","authTime","cacheTime","balance","currentLevel","userGasAmount","gasAmount","isGasAdjustmentAuto","isEnough","cosmoshub","assign","bostrom","neutron","pion","omniflix","dymension","stride","formatableTokens","format_token_name","actions","getCurrentDBVersion","DBCurrentVersion","localStorage","getItem","this","setItem","setNewDBVersion","getCurrentWalletID","DBCurrentWalletID","setCurrentWalletID","walletID","DBaddData","auth","promises","updateUserAuthErrorLimit","toISOString","Promise","all","derivationPath","TxFeeCurrentLevel","TxFeeIsRemember","chain","values","find","cacheCurrentAddress","getAddress","getCurrenciesPrice","getCurrentNetworkAPR","connectWebsocket","getBalances","getStakedBalances","cachePrices","timestamp","fetch","response","json","cacheAPR","infos","toLowerCase","APR","apr","JSON","parse","stringify","forceUpdate","cacheBalances","getBalanceInfo","filter","obj","hasOwnProperty","cacheStakedBalances","delegation_responses","item","getValidatorInfo","delegation","validator_address","getRewards","total","chain_info","getUnstakingBalances","unbonding_responses","entries","entry","parseInt","getRedelegations","redelegation_responses","base_denom","denomTraces","old_base_denom","asset","assets","currentAsset","chain_name","tokenInfo","token","base","token_info","formatableToken","toUpperCase","denom_units","chains","price","getPriceByDenom","symbol","hasNativeToken","res","validator_info","validator","getSecret","current","DBSecret","DBSecretPartTwo","restoredSecret","sss","restoredUint8Array","Uint8Array","decryptData","getPrivateKey","findMissingId","missingId","ids","id","findNextAvailableWalletName","setSecret","secret","aesKey","generateAESKey","ciphertext","iv","encryptData","shares","Buffer","DBcheckStoreName","setPrivateKey","privateKey","createWallet","pinCode","walletName","isBiometricEnabled","isAdding","relativeWallet","availableWalletName","hmacKey","generateHMACKey","hashDataWithKey","createFromExistWallet","currentWalletSecret","subWallets","newWalletID","replace","getCurrentWalletCreatedBy","limit","updateCurrentCurrency","onopen","onmessage","WebSocket","jsonrpc","parsedMsg","TxFeeGetCurrentBalance","baseDenom","TxFeeSetGasPrices","lowPrice","fees","fee_tokens","fixed_min_gas_price","low_gas_price","averagePrice","highPrice","TxFeeIsEnough","getTxInfo","txHash","txResult","tx_response","getNetworkUnbondingTime","unbonding_time","getAllValidators","validators","getUserValidators","getTotalBondedTokens","pool","bonded_tokens","cacheIsUnstakingCancelSupport","cosmos_sdk_version","application_version","min_version","cosmos_sdk_version_parsed","Number","min_version_parsed","getWallets","updateWallet","wallet","new_name","currentWallet","removeWallet","DBclearStore","DBdeleteData","DBAgeConfirmed","setUserLock","setUserUnlock","setUserChannel","channel","userChannels","updateUserChannel","oldChannel","info","pretty_name","old","channel_id","getAllUserChannels","deleteUserChannel","chainName","clearAllData","DBclearAllData","$reset","resolve","reject","DB","getStore","dbPromise","isFirstRun","deleteDB","openDB","upgrade","db","objectStoreNames","contains","createObjectStore","storeName","key","get","results","keyValueMap","index","tx","transaction","objectStore","put","done","delete","clear","generateWallet","DirectSecp256k1HdWallet","generate","count","importWalletFromMnemonic","mnemonic","fromMnemonic","hdPaths","stringToPath","importWalletFromPrivateKey","DirectSecp256k1Wallet","fromKey","fromHex","encoder","TextEncoder","encodedData","encode","cryptoKey","crypto","subtle","importKey","signature","sign","hashArray","hashHex","byte","toString","slice","generateKey","exportedKey","exportKey","getRandomValues","encodedText","encrypt","decrypted","decrypt","decoder","TextDecoder","decode","getAccounts","createSinger","signingClient","SigningStargateClient","connectWithSigner","signingCosmWasmClient","SigningCosmWasmClient","string","denom_trace","ingnoreTraces","formatTokenAmount","pow","formatTokenCost","cost","currency","toLocaleString","maximumFractionDigits","minimumFractionDigits","formatTokenName","tokenName","formatPrice","currencyConversion","currentCurrencyPrice","calcTokenCost","formatAmount","calcBalancesCost","totalPrice","calcStakedBalancesCost","calcRewardsBalancesCost","calcAvailableAmount","calcStakedAmount","totalAmount","calcUnstakingAmount","getNetworkLogo","chainId","logo_URIs","svg","png","images","simulateTx","gasUsed","simulate","fee","gas","txRaw","TxRaw","finish","sha256","broadcastTx","broadcastTimeoutMs","broadcastPollIntervalMs","imageLoadError","target","imageLoadSuccess","dateCalc","date","currentDate","userTimeZone","getTimezoneOffset","setHours","getHours","base64String","jsonString","atob","isArray","ArrayBuffer","decodedString","decodeURIComponent","userParams","URLSearchParams","pinDB","wrongPin","userAuthErrorLimit","isBiometric","isBiometricAvailable","biometricType","moveFocus","event","nextIndex","closest","moveBack","currentIndex","select","checkBiometricAccess","isAccessGranted","biometricAuthenticate","requestAccess","reason","authenticate","login","compareResult","comparePINCode","setAuthError","pinHash","newLimit","pin","activeElement","blur","isFormValid","_cache","_createElementVNode","level_low","level_average","level_high","levels","low","average","high","rollerWidth","rollerOffsetLeft","validateUserGasAmount","offsetWidth","offsetLeft","props","__props","showTxFeeModal","openTxFeeModal","msgAny","txType","off","showErrorSignTxModal","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","call","m","amdO","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","n","getter","__esModule","a","definition","o","defineProperty","enumerable","f","chunkId","reduce","miniCssF","globalThis","Function","prop","prototype","inProgress","dataWebpackPrefix","l","url","needAttach","scripts","getAttribute","charset","timeout","nc","setAttribute","onScriptComplete","prev","onerror","onload","clearTimeout","doneFns","removeChild","bind","head","appendChild","Symbol","toStringTag","nmd","paths","children","p","createStylesheet","fullhref","oldTag","linkTag","rel","nonce","onLinkComplete","errorType","realHref","href","err","Error","request","nextSibling","findStylesheet","existingLinkTags","tag","dataHref","existingStyleTags","loadStylesheet","installedCssChunks","miniCss","cssChunks","installedChunks","installedChunkData","promise","loadingEnded","realSrc","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","self","__webpack_exports__"],"sourceRoot":""}