{"version":3,"file":"js/7.a2301a11.js","mappings":"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","sources":["webpack://cosmos-telegram-signer/./src/components/Auth.vue","webpack://cosmos-telegram-signer/./src/components/Auth.vue?4730","webpack://cosmos-telegram-signer/./src/components/Loader.vue","webpack://cosmos-telegram-signer/./src/components/Loader.vue?b8fd","webpack://cosmos-telegram-signer/./src/components/TxFee.vue","webpack://cosmos-telegram-signer/./src/components/TxFee.vue?c08d","webpack://cosmos-telegram-signer/./src/components/modal/SignTx.vue","webpack://cosmos-telegram-signer/./src/components/modal/SignTx.vue?1e6a","webpack://cosmos-telegram-signer/./src/views/ClaimConfirmPage.vue","webpack://cosmos-telegram-signer/./src/views/ClaimConfirmPage.vue?ee8e"],"sourcesContent":["<template>\n    <div class=\"pin\">\n        <div class=\"label\">\n            {{ $t('message.auth_enter_pin_label') }}\n        </div>\n\n        <div class=\"row\" :class=\"{ error: wrongPin }\">\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[0]\" maxlength=\"1\" inputmode=\"numeric\" ref=\"inputRef\"\n                    :class=\"{ active: pinCode[0].length }\"\n                    @input=\"moveFocus($event, 1)\"\n                    @keydown.backspace=\"moveBack($event, 0)\">\n            </div>\n\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[1]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[0].length\"\n                    :class=\"{ active: pinCode[1].length }\"\n                    @input=\"moveFocus($event, 2)\"\n                    @keydown.backspace=\"moveBack($event, 1)\">\n            </div>\n\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[2]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[1].length\"\n                    :class=\"{ active: pinCode[2].length }\"\n                    @input=\"moveFocus($event, 3)\"\n                    @keydown.backspace=\"moveBack($event, 2)\">\n            </div>\n\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[3]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[2].length\"\n                    :class=\"{ active: pinCode[3].length }\"\n                    @input=\"moveFocus($event, 4)\"\n                    @keydown.backspace=\"moveBack($event, 3)\">\n            </div>\n\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[4]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[3].length\"\n                    :class=\"{ active: pinCode[4].length }\"\n                    @input=\"moveFocus($event, 5)\"\n                    @keydown.backspace=\"moveBack($event, 4)\">\n            </div>\n\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[5]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[4].length\"\n                    :class=\"{ active: pinCode[5].length }\"\n                    @input=\"moveFocus($event, 6)\"\n                    @keydown.backspace=\"moveBack($event, 5)\">\n            </div>\n        </div>\n\n\n        <div class=\"warning\" v-if=\"userAuthErrorLimit < store.authErrorLimit\">\n            {{ $t('message.auth_error_warning', { count: userAuthErrorLimit }) }}\n        </div>\n    </div>\n\n\n    <button class=\"biometric_btn\" @click.prevent=\"checkBiometricAccess\" v-if=\"isBiometricAvailable && userAuthErrorLimit == store.authErrorLimit\" :class=\"{ show: !loading }\">\n        <span>{{ $t('message.btn_biometric2') }}</span>\n\n        <svg class=\"icon\" v-if=\"biometrictype === 'face'\">\n            <use xlink:href=\"@/assets/sprite.svg#ic_biometric_face\"></use>\n        </svg>\n\n        <svg class=\"icon\" v-else>\n            <use xlink:href=\"@/assets/sprite.svg#ic_biometric_finger\"></use>\n        </svg>\n    </button>\n\n\n    <div class=\"btns\" :class=\"{ show: !loading }\">\n        <button class=\"btn\" :class=\"{ disabled: !isFormValid }\" @click.prevent=\"login()\" v-if=\"userAuthErrorLimit < store.authErrorLimit\">\n            <span>{{ $t('message.btn_login') }}</span>\n        </button>\n    </div>\n</template>\n\n\n<script setup>\n    import { onBeforeMount, ref, watch, computed, inject } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { hashDataWithKey } from '@/utils'\n\n\n    const store = useGlobalStore(),\n        emitter = inject('emitter'),\n        pinCode = ref(['', '', '', '', '', '']),\n        pinDB = ref(''),\n        hmacKey = ref(''),\n        wrongPin = ref(false),\n        userAuthErrorLimit = ref(false),\n        isBiometric = ref(false),\n        isBiometricAvailable = ref(false),\n        biometricType = ref('finger')\n\n\n    onBeforeMount(async () => {\n        // Get data from DB\n        let result = await store.getMultipleData(['pin', 'hmacKey', 'authErrorLimit', 'isBiometric'])\n\n        // Set pin from DB\n        pinDB.value = result.pin\n\n        // Set hmacKey from DB\n        hmacKey.value = result.hmacKey\n\n        // Set user auth error limit\n        userAuthErrorLimit.value = result.authErrorLimit\n\n        // Set biometric status from DB\n        isBiometric.value = result.isBiometric\n\n        // Is biometric available\n        isBiometricAvailable.value = Telegram.WebApp.BiometricManager.isBiometricAvailable\n\n        // Biometric type\n        if (Telegram.WebApp.BiometricManager.biometricType != 'unknown') {\n            biometricType.value = Telegram.WebApp.BiometricManager.biometricType\n        }\n\n        // Check biometric access\n        if (isBiometricAvailable.value && isBiometric.value) {\n            checkBiometricAccess()\n        }\n    })\n\n\n    watch(pinCode.value, () => {\n        // Reset focus\n        if (pinCode.value[5].length) {\n            document.activeElement.blur()\n        }\n\n        // Compare pins\n        if (pinCode.value[5].length && userAuthErrorLimit.value === store.authErrorLimit) {\n            login()\n        }\n    })\n\n\n        // Move focus\n        function moveFocus(event, nextIndex) {\n        if (event.target.value.length >= 1 && nextIndex < 6) {\n            event.target.closest('.row').querySelector(`.field:nth-child(${nextIndex + 1}) input`).focus()\n        }\n    }\n\n\n    // Move back\n    function moveBack(event, currentIndex) {\n        setTimeout(() => {\n            if (event.target.value.length === 0 && currentIndex > 0) {\n                event.target.closest('.row').querySelector(`.field:nth-child(${currentIndex}) input`).select()\n            }\n        })\n    }\n\n\n    // Check biometric access\n    function checkBiometricAccess() {\n        !Telegram.WebApp.isAccessGranted\n            ? Telegram.WebApp.BiometricManager.requestAccess({ reason: 'Наш текст' }, () => biometricAuthenticate())\n            : biometricAuthenticate()\n    }\n\n\n    // Biometric authenticate\n    function biometricAuthenticate() {\n        Telegram.WebApp.BiometricManager.authenticate({ reason: 'Наш текст' }, res => {\n            if (res) {\n                // Set event auth\n                emitter.emit('auth')\n            }\n        })\n    }\n\n\n    // Login\n    async function login() {\n        // Compare pins\n        let compareResult = await comparePINCode()\n\n        compareResult\n            // Set event auth\n            ? emitter.emit('auth')\n            // Set auth error\n            : await setAuthError()\n    }\n\n\n    // Compare pin code\n    async function comparePINCode() {\n        // Encrypt the PIN\n        let pinHash = await hashDataWithKey(pinCode.value.join(''), hmacKey.value)\n\n        return pinHash === pinDB.value\n    }\n\n\n    // Set auth error\n    async function setAuthError() {\n        // Set error\n        wrongPin.value = true\n\n        let newLimit = userAuthErrorLimit.value - 1\n\n        // Update limit\n        userAuthErrorLimit.value = newLimit\n\n        newLimit\n            // Сhange auth limit\n            ? store.updateUserAuthErrorLimit(newLimit)\n            // Set event show_error_auth_modal\n            : emitter.emit('show_error_auth_modal')\n\n        // Clear data\n        pinCode.value = ['', '', '', '', '', '']\n\n        // Reset data\n        wrongPin.value = false\n    }\n\n\n    // Validate form\n    const isFormValid = computed(() => pinCode.value[5].length != '')\n</script>\n\n\n<style scoped>\n    .pin\n    {\n        position: relative;\n\n        margin-top: 8px;\n    }\n\n\n    .pin .label\n    {\n        font-size: 14px;\n\n        margin-bottom: 2px;\n        padding: 0 10px;\n    }\n\n\n    .pin .row\n    {\n        flex-wrap: nowrap;\n    }\n\n\n    .pin .row > *\n    {\n        width: 100%;\n    }\n\n\n    .pin .row > * + *\n    {\n        margin-left: 10px;\n    }\n\n\n    .pin .input\n    {\n        font-size: 20px;\n\n        text-align: center;\n    }\n\n\n    .pin .error .input\n    {\n        border-color: #f00;\n    }\n\n    .pin .success .input\n    {\n        border-color: #00aa63;\n    }\n\n\n    .pin .warning\n    {\n        font-size: 12px;\n\n        position: absolute;\n        top: 100%;\n        left: 0;\n\n        width: 100%;\n        margin-top: 4px;\n\n        text-align: center;\n\n        color: #ff4b4b;\n    }\n\n\n\n    .biometric_btn\n    {\n        font-size: 18px;\n        font-weight: 500;\n\n        display: block;\n\n        margin: auto auto 25%;\n    }\n\n\n    .biometric_btn.top\n    {\n        margin-top: 40px;\n    }\n\n\n    .biometric_btn .icon\n    {\n        display: block;\n\n        width: 44px;\n        height: 44px;\n        margin: 0 auto;\n    }\n\n\n    .biometric_btn.disabled\n    {\n        pointer-events: none;\n\n        opacity: .6;\n    }\n</style>","import script from \"./Auth.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Auth.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Auth.vue?vue&type=style&index=0&id=7f08a64f&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-7f08a64f\"]])\n\nexport default __exports__","<template>\n    <div class=\"loader_wrap\">\n        <div class=\"loader\"><span></span></div>\n    </div>\n</template>\n\n\n<style>\n    .loader_wrap\n    {\n        position: absolute;\n        z-index: 7;\n        top: 0;\n        left: 0;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 100%;\n        height: 100%;\n\n        border-radius: inherit;\n        background: rgba(0, 0, 0, .5);\n    }\n\n\n    .loader\n    {\n        position: relative;\n\n        width: 32px;\n        height: 32px;\n        margin: 0 auto;\n    }\n\n\n    .loader span\n    {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n\n        display: block;\n\n        width: 100%;\n        height: 100%;\n        margin: auto;\n    }\n\n    .loader span::before,\n    .loader span::after\n    {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n\n        display: block;\n\n        width: 100%;\n        height: 100%;\n        margin: auto;\n\n        content: '';\n        animation: loader-1 1.5s cubic-bezier(.075, .820, .165, 1.000) infinite;\n\n        opacity: 0;\n        border: 2px solid #fff;\n        border-radius: 50%;\n    }\n\n    .loader span::after\n    {\n        animation: loader-2 1.5s cubic-bezier(.075, .820, .165, 1.000) .25s infinite;\n    }\n\n\n    @-webkit-keyframes loader-1\n    {\n        0%\n        {\n            -webkit-transform: translate3d(0, 0, 0) scale(0);\n\n            opacity: 1;\n        }\n\n        100%\n        {\n            -webkit-transform: translate3d(0, 0, 0) scale(1.5);\n\n            opacity: 0;\n        }\n    }\n\n    @keyframes loader-1\n    {\n        0%\n        {\n            transform: translate3d(0, 0, 0) scale(0);\n\n            opacity: 1;\n        }\n\n        100%\n        {\n            transform: translate3d(0, 0, 0) scale(1.5);\n\n            opacity: 0;\n        }\n    }\n\n\n    @-webkit-keyframes loader-2\n    {\n        0%\n        {\n            -webkit-transform: translate3d(0, 0, 0) scale(0);\n\n            opacity: 1;\n        }\n\n        100%\n        {\n            -webkit-transform: translate3d(0, 0, 0) scale(1);\n\n            opacity: 0;\n        }\n    }\n\n    @keyframes loader-2\n    {\n        0%\n        {\n            transform: translate3d(0, 0, 0) scale(0);\n\n            opacity: 1;\n        }\n\n        100%\n        {\n            transform: translate3d(0, 0, 0) scale(1);\n\n            opacity: 0;\n        }\n    }\n\n</style>","import { render } from \"./Loader.vue?vue&type=template&id=6d566396\"\nconst script = {}\n\nimport \"./Loader.vue?vue&type=style&index=0&id=6d566396&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n    <div class=\"tx_fee\">\n        <button class=\"btn\" :class=\"{ red: !store.TxFee.isEnough }\">\n            {{ $t('message.tx_fee_label') }} {{ store.TxFee.currentAmount }} {{ store.TxFee.currentSymbol }}\n        </button>\n    </div>\n</template>\n\n\n<script setup>\n    import { onBeforeMount, watch, computed } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { formatTokenAmount } from '@/utils'\n\n\n    const store = useGlobalStore(),\n        balance = store.balances.find(balance => balance.denom == store.networks[store.currentNetwork].denom)\n\n\n    onBeforeMount(() => {\n        // Set current amount\n        store.TxFeeSetCurrentAmount(store.networks[store.currentNetwork].chain_id)\n\n        // Set current denom\n        store.TxFeeSetCurrentDenom(store.networks[store.currentNetwork].denom, store.networks[store.currentNetwork].token_name)\n\n        // Set enough status\n        store.TxFee.isEnough = formatTokenAmount(balance.amount, balance.exponent) > store.TxFee.currentAmount\n    })\n\n\n    watch(computed(() => store.isBalancesGot), () => {\n        // Set enough status\n        store.TxFee.isEnough = formatTokenAmount(balance.amount, balance.exponent) > store.TxFee.currentAmount\n    })\n</script>\n\n\n<style scoped>\n    .tx_fee\n    {\n        margin-top: auto;\n        padding: 12px;\n\n        text-align: center;\n    }\n\n\n    .tx_fee .btn\n    {\n        font-size: 18px;\n        font-weight: 500;\n\n        text-decoration: underline;\n\n        text-decoration-thickness: 1px;\n    }\n\n\n    .tx_fee .btn.red\n    {\n        color: #f33;\n    }\n</style>","import script from \"./TxFee.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TxFee.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TxFee.vue?vue&type=style&index=0&id=4b005012&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-4b005012\"]])\n\nexport default __exports__","<template>\n    <section class=\"modal\">\n        <div class=\"modal_content\">\n            <div class=\"data\">\n                <button class=\"close_btn\" @click.prevent=\"emitter.emit('close_sign_tx_modal')\">\n                    <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_close\"></use></svg>\n                </button>\n\n                <div class=\"modal_title\">\n                    {{ $t('message.sign_tx_title') }}\n                </div>\n\n                <!-- Auth -->\n                <div class=\"auth_wrap\">\n                    <Auth />\n                </div>\n            </div>\n        </div>\n\n        <div class=\"overlay\" @click.prevent=\"emitter.emit('close_sign_tx_modal')\"></div>\n    </section>\n</template>\n\n\n<script setup>\n    import { inject } from 'vue'\n\n    // Components\n    import Auth from '@/components/Auth.vue'\n\n\n    const emitter = inject('emitter')\n</script>\n\n\n<style scoped>\n    .auth_wrap\n    {\n        display: flex;\n        flex: 1 0 auto;\n        flex-direction: column;\n\n        margin-top: 28px;\n    }\n</style>","import script from \"./SignTx.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SignTx.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./SignTx.vue?vue&type=style&index=0&id=dc5a976e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-dc5a976e\"]])\n\nexport default __exports__","<template>\n    <section class=\"page_container claim_confirm\">\n        <Loader v-if=\"isProcess\" />\n\n        <div class=\"cont\">\n            <div class=\"head\">\n                <router-link to=\"/account\" class=\"back_btn\">\n                    <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_arrow_hor\"></use></svg>\n                </router-link>\n\n                <div class=\"page_title\">\n                    {{ $t('message.claim_rewards_page_title') }}\n                </div>\n            </div>\n\n\n            <div class=\"data\">\n                <div class=\"label\">\n                    {{ $t('message.details_label') }}\n\n                    <!-- <button class=\"json_btn\">\n                        <span>{{ $t('message.btn_json') }}</span>\n                    </button> -->\n                </div>\n\n                <div class=\"info_wrap\">\n                    <div class=\"info\">\n                        <div class=\"logo\">\n                            <img :src=\"getNetworkLogo(store.networks[store.currentNetwork].chain_id)\" alt=\"\">\n                        </div>\n\n                        <div class=\"title\">\n                            {{ $t('message.claim_rewards_title') }}\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"not_enought\" v-if=\"!store.TxFee.isEnough\">\n                    {{ $t('message.claim_rewards_not_enought', { denom: store.TxFee.currentSymbol }) }}\n                </div>\n            </div>\n\n\n            <div class=\"memo\">\n                <div class=\"label\">\n                    {{ $t('message.memo_label') }}\n                </div>\n\n                <div class=\"field\">\n                    <input type=\"text\" class=\"input big\" v-model=\"memo\">\n                </div>\n            </div>\n\n\n            <!-- Tx fee -->\n            <TxFee />\n\n\n            <div class=\"btns\">\n                <button class=\"btn\" @click.prevent=\"showSignTxModal = true\" :class=\"{ disabled: !store.TxFee.isEnough }\">\n                    <span>{{ $t('message.btn_approve') }}</span>\n                </button>\n            </div>\n        </div>\n    </section>\n\n\n    <!-- Sign transaction -->\n    <SignTx v-if=\"showSignTxModal\"/>\n</template>\n\n\n<script setup>\n    import { ref, inject, onUnmounted } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { useRouter } from 'vue-router'\n    import { useNotification } from '@kyvg/vue3-notification'\n    import { getNetworkLogo, sendTx } from '@/utils'\n\n    // Components\n    import Loader from '@/components/Loader.vue'\n    import TxFee from '@/components/TxFee.vue'\n    import SignTx from '@/components/modal/SignTx.vue'\n\n\n    const store = useGlobalStore(),\n        router = useRouter(),\n        emitter = inject('emitter'),\n        i18n = inject('i18n'),\n        notification = useNotification(),\n        memo = ref(''),\n        isProcess = ref(false),\n        showSignTxModal = ref(false)\n\n\n    onUnmounted(() => {\n        // Unlisten events\n        emitter.off('auth')\n        emitter.off('close_sign_tx_modal')\n    })\n\n\n    // Claim tokens\n    async function claim() {\n        // Set process status\n        isProcess.value = true\n\n        try {\n            // Message\n            let msgAny = []\n\n            // Set messeges\n            store.stakedBalances.forEach(balance => {\n                msgAny.push({\n                    typeUrl: '/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward',\n                    value: {\n                        delegatorAddress: store.currentAddress,\n                        validatorAddress: balance.validator_info.operator_address\n                    }\n                })\n            })\n\n            // Send Tx\n            let result = await sendTx(msgAny)\n\n            if (result.code === 0) {\n                // Update rewards\n                await store.getRewards()\n\n                // Show notification\n                notification.notify({\n                    group: 'default',\n                    clean: true\n                })\n\n                notification.notify({\n                    group: 'default',\n                    speed: 200,\n                    duration: 2000,\n                    title: i18n.global.t('message.notification_tx_success_title'),\n                    type: 'success'\n                })\n\n                // Redirect\n                router.push('/account')\n            } else {\n                console.log(result)\n\n                // Show error\n                showError(result)\n\n                // Set process status\n                isProcess.value = false\n            }\n        } catch (error) {\n            console.log(error)\n\n            // Show error\n            showError(error)\n\n            // Set process status\n            isProcess.value = false\n        }\n    }\n\n\n    // Show error message\n    function showError(error) {\n        // Get error code\n        let errorText = ''\n\n        // Get error title\n        error.code\n            ? errorText = i18n.global.t(`message.notification_tx_error_${error.code}`)\n            : errorText = i18n.global.t('message.notification_tx_error_rejected')\n\n        // Show notification\n        notification.notify({\n            group: 'default',\n            clean: true\n        })\n\n        notification.notify({\n            group: 'default',\n            title: i18n.global.t('message.notification_tx_error_title'),\n            text: errorText,\n            type: 'error'\n        })\n    }\n\n\n    // Event \"auth\"\n    emitter.on('auth', () => {\n        // Hide SignTx modal\n        showSignTxModal.value = false\n\n        // Claim tokens\n        claim()\n    })\n\n\n    // Event \"close_sign_tx_modal\"\n    emitter.on('close_sign_tx_modal', () => {\n        // Hide SignTx modal\n        showSignTxModal.value = false\n    })\n</script>\n\n\n<style scoped>\n    .claim_confirm\n    {\n        background: #170232;\n    }\n\n\n    .head\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: space-between;\n\n        margin-bottom: 10px;\n    }\n\n\n    .back_btn\n    {\n        position: relative;\n        top: 0;\n        left: 0;\n\n        margin-left: 6px;\n    }\n\n\n    .page_title\n    {\n        width: calc(100% - 64px);\n        margin-left: auto;\n        padding: 0;\n    }\n\n\n    .memo\n    {\n        margin-top: 12px;\n    }\n\n\n    .label\n    {\n        font-size: 14px;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: flex-start;\n\n        margin-bottom: 2px;\n        padding: 0 10px;\n    }\n\n\n    .json_btn\n    {\n        margin-left: auto;\n    }\n\n\n    .info_wrap\n    {\n        padding: 1px;\n\n        border-radius: 10px;\n        background: linear-gradient(to bottom,  #5d33cd 0%,#200750 100%);\n    }\n\n\n    .info\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: space-between;\n\n        padding: 8px 7px;\n\n        border-radius: 9px;\n        background: radial-gradient(130.57% 114.69% at 50% 0%, rgba(148, 56, 248, .70) 0%, rgba(89, 21, 167, .70) 50.94%, rgba(53, 12, 107, .70) 85.09%);\n    }\n\n\n    .info .logo\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 38px;\n        height: 38px;\n\n        border-radius: 50%;\n    }\n\n\n    .info .logo img\n    {\n        display: block;\n\n        width: 100%;\n        height: 100%;\n\n        border-radius: 50%;\n    }\n\n\n    .info .title\n    {\n        font-size: 16px;\n        font-weight: 500;\n\n        width: calc(100% - 46px);\n    }\n\n\n    .not_enought\n    {\n        padding: 5px 10px;\n\n        text-decoration: underline;\n\n        color: #ffe352;\n\n        text-decoration-thickness: 1px;\n    }\n\n\n    .field\n    {\n        padding: 1px;\n\n        border-radius: 10px;\n        background: linear-gradient(to bottom,  #5d33ce 0%,#200750 100%);\n    }\n\n\n    .input\n    {\n        border-radius: 9px;\n        background: #06000e;\n    }\n\n\n    .btns\n    {\n        margin-top: 0;\n        padding: 0;\n    }\n</style>","import script from \"./ClaimConfirmPage.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ClaimConfirmPage.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./ClaimConfirmPage.vue?vue&type=style&index=0&id=09aa3392&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-09aa3392\"]])\n\nexport default __exports__"],"names":["store","useGlobalStore","emitter","inject","pinCode","ref","pinDB","hmacKey","wrongPin","userAuthErrorLimit","isBiometric","isBiometricAvailable","biometricType","moveFocus","event","nextIndex","target","value","length","closest","querySelector","focus","moveBack","currentIndex","setTimeout","select","checkBiometricAccess","Telegram","WebApp","isAccessGranted","biometricAuthenticate","BiometricManager","requestAccess","reason","authenticate","res","emit","async","login","compareResult","comparePINCode","setAuthError","pinHash","hashDataWithKey","join","newLimit","updateUserAuthErrorLimit","onBeforeMount","result","getMultipleData","pin","authErrorLimit","watch","document","activeElement","blur","isFormValid","computed","__exports__","class","_createElementVNode","_hoisted_2","_createElementBlock","_hoisted_1","_hoisted_3","script","render","balance","balances","find","denom","networks","currentNetwork","TxFeeSetCurrentAmount","chain_id","TxFeeSetCurrentDenom","token_name","TxFee","isEnough","formatTokenAmount","amount","exponent","currentAmount","isBalancesGot","router","useRouter","i18n","notification","useNotification","memo","isProcess","showSignTxModal","claim","msgAny","stakedBalances","forEach","push","typeUrl","delegatorAddress","currentAddress","validatorAddress","validator_info","operator_address","sendTx","code","getRewards","notify","group","clean","speed","duration","title","global","t","type","console","log","showError","error","errorText","text","onUnmounted","off","on"],"sourceRoot":""}