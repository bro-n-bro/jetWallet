{"version":3,"file":"js/679.a60b1aa1.js","mappings":"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","sources":["webpack://cosmos-telegram-signer/./src/components/Search.vue","webpack://cosmos-telegram-signer/./src/components/Search.vue?0923","webpack://cosmos-telegram-signer/./src/components/modal/ValidatorsModal.vue","webpack://cosmos-telegram-signer/./src/components/modal/ValidatorsModal.vue?cf99","webpack://cosmos-telegram-signer/./src/components/modal/StakeConfirmModal.vue","webpack://cosmos-telegram-signer/./src/components/modal/StakeConfirmModal.vue?a535","webpack://cosmos-telegram-signer/./src/views/Account/StakePage.vue","webpack://cosmos-telegram-signer/./src/views/Account/StakePage.vue?7b24"],"sourcesContent":["<template>\n    <!-- Search -->\n    <div class=\"search\">\n        <!-- Search back button -->\n        <button class=\"back_btn\" @click.prevent=\"setBlurEvent\">\n            <span><svg><use xlink:href=\"@/assets/sprite.svg#ic_arrow_hor\"></use></svg></span>\n        </button>\n\n        <!-- Search field -->\n        <div class=\"field\">\n            <!-- Search field icon -->\n            <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_search\"></use></svg>\n\n            <!-- Search field input -->\n            <input type=\"text\" v-model=\"query\" class=\"input\" :placeholder=\"$t('message.search_placeholder')\"\n                @focus=\"setFocusEvent\"\n                @blur=\"setBlurEvent\"\n                @input=\"setEnterEvent\">\n\n            <!-- Search field clear button -->\n            <button class=\"clear_btn\" v-if=\"query.length\" @click.prevent=\"clearField()\">\n                <svg><use xlink:href=\"@/assets/sprite.svg#ic_close\"></use></svg>\n            </button>\n        </div>\n    </div>\n</template>\n\n\n<script setup>\n    import { ref, inject } from 'vue'\n\n\n    const props = defineProps(['source']),\n        emitter = inject('emitter'),\n        query = ref('')\n\n\n    // Set focus event\n    function setFocusEvent() {\n        // Set event \"search_focus\"\n        setTimeout(() => emitter.emit('search_focus'), 100)\n    }\n\n\n    // Set blur event\n    function setBlurEvent() {\n        // Set event \"search_blur\"\n        setTimeout(() => emitter.emit('search_blur'), 100)\n    }\n\n\n    // Set event \"search\"\n    function setEnterEvent() {\n        emitter.emit('search', {\n            query: query.value,\n            source: props.source\n        })\n    }\n\n\n    // Clear field\n    function clearField() {\n        //clear query\n        query.value = ''\n\n        /// Set event \"search\"\n        emitter.emit('search', {\n            query: query.value,\n            source: props.source\n        })\n    }\n</script>\n\n\n<style scoped>\n    .search\n    {\n        position: sticky;\n        z-index: 5;\n        top: 0;\n\n        padding: 12px 0;\n\n        background: #170232;\n    }\n\n\n    .search ::-webkit-input-placeholder\n    {\n        color: rgba(255,255,255,.6);\n    }\n\n    .search :-moz-placeholder\n    {\n        color: rgba(255,255,255,.6);\n    }\n\n    .search ::-moz-placeholder\n    {\n        opacity: 1;\n        color: rgba(255,255,255,.6);\n    }\n\n    .search :-ms-input-placeholder\n    {\n        color: rgba(255,255,255,.6);\n    }\n\n\n    .search .back_btn\n    {\n        position: absolute;\n        z-index: 1;\n        top: 0;\n        bottom: 0;\n        left: 0;\n\n        visibility: hidden;\n\n        width: 28px;\n        height: 28px;\n        margin: auto 0;\n        padding: 1px;\n\n        transition: .2s linear;\n\n        opacity: 0;\n        border-radius: 50%;\n        background: linear-gradient(to bottom,  #5c32cc 0%,#210750 100%);\n    }\n\n\n    .search .back_btn span\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 26px;\n        height: 26px;\n\n        border-radius: 50%;\n        background: radial-gradient(130.57% 114.69% at 50% 0%, rgba(148, 56, 248, .70) 0%, rgba(89, 21, 167, .70) 50.94%, rgba(53, 12, 107, .70) 85.09%);\n    }\n\n\n    .search .back_btn svg\n    {\n        display: block;\n\n        width: 20px;\n        height: 20px;\n    }\n\n\n    .searching .search .back_btn\n    {\n        visibility: visible;\n\n        opacity: 1;\n    }\n\n\n    .search .field\n    {\n        position: relative;\n        z-index: 2;\n\n        width: 100%;\n        margin-left: auto;\n        padding: 1px;\n\n        transition: width .2s linear;\n\n        border-radius: 23px;\n        background: linear-gradient(to bottom,  #5c32cc 0%,#210750 100%);\n    }\n\n\n    .searching .search .field\n    {\n        width: calc(100% - 40px);\n    }\n\n\n    .search .icon\n    {\n        position: absolute;\n        z-index: 3;\n        top: 0;\n        bottom: 0;\n        left: 10px;\n\n        display: block;\n\n        width: 16px;\n        height: 16px;\n        margin: auto 0;\n\n        pointer-events: none;\n    }\n\n\n    .search .input\n    {\n        font-family: var(--font_family);\n        font-size: 16px;\n        font-weight: 500;\n\n        display: block;\n\n        width: 100%;\n        height: 28px;\n        padding: 0 39px 2px;\n\n        color: #fff;\n        border: none;\n        border-radius: 23px;\n        background: radial-gradient(130.57% 114.69% at 50% 0%, rgba(148, 56, 248, .70) 0%, rgba(89, 21, 167, .70) 50.94%, rgba(53, 12, 107, .70) 85.09%);\n    }\n\n\n    .clear_btn\n    {\n        position: absolute;\n        z-index: 2;\n        top: 0;\n        right: 6px;\n        bottom: 0;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 24px;\n        height: 24px;\n        margin: auto 0;\n    }\n\n\n    .clear_btn svg\n    {\n        display: block;\n\n        width: 18px;\n        height: 18px;\n    }\n</style>","import script from \"./Search.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Search.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Search.vue?vue&type=style&index=0&id=aba77f5c&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-aba77f5c\"]])\n\nexport default __exports__","<template>\n    <!-- Validators page -->\n    <section class=\"page_container inner_page_container validators_page\">\n        <div class=\"cont\">\n            <!-- Validators page head -->\n            <div class=\"head\">\n                <!-- Back button -->\n                <button class=\"back_btn\" @click=\"emitter.emit('close_validators_modal')\">\n                    <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_arrow_hor\"></use></svg>\n                </button>\n\n                <!-- Validators page title -->\n                <div class=\"page_title\">\n                    {{ $t('message.validators_page_title') }}\n                </div>\n            </div>\n\n            <!-- Search -->\n            <Search source=\"validators\" />\n\n            <!-- Loader -->\n            <Loader v-if=\"!isValidatorsGot\" />\n\n            <!-- Validators -->\n            <div class=\"validators\" v-else>\n                <!-- Validators list -->\n                <div class=\"list\" v-if=\"searchResult.length\">\n                    <!-- Validators item -->\n                    <div class=\"item\" v-for=\"(validator, index) in searchResult\" :key=\"index\">\n                        <div class=\"validator_wrap\" @click.prevent=\"setValidator(validator)\" :class=\"{ current: isCurrentValidator(validator.operator_address) }\">\n                            <!-- Validator -->\n                            <div class=\"validator\">\n                                <!-- Validator logo -->\n                                <div class=\"logo\">\n                                    <img :src=\"`https://raw.githubusercontent.com/cosmostation/chainlist/main/chain/${store.networks[store.currentNetwork].prefix}/moniker/${validator.operator_address}.png`\" alt=\"\" loading=\"lazy\" @error=\"imageLoadError($event)\">\n\n                                    <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_user\"></use></svg>\n\n                                    <!-- Validator check -->\n                                    <div class=\"check\" v-if=\"isCurrentValidator(validator.operator_address)\">\n                                        <svg><use xlink:href=\"@/assets/sprite.svg#ic_check\"></use></svg>\n                                    </div>\n                                </div>\n\n                                <div>\n                                    <!-- Validator commission -->\n                                    <div class=\"moniker\">\n                                        {{ validator.description.moniker }}\n                                    </div>\n\n                                    <!-- Validator commission -->\n                                    <div class=\"commission\">\n                                        {{ (validator.commission.commission_rates.rate * 100).toLocaleString('ru-RU', { maximumFractionDigits: 2 }).replace(',', '.') }}%\n                                    </div>\n\n                                    <!-- Validator staked -->\n                                    <div class=\"staked\" v-if=\"item = isStakedValidator(validator.operator_address)\">\n                                        <!-- Validator staked label -->\n                                        {{ $t('message.validatoes_staked_label') }}\n\n                                        <!-- Validator staked amount -->\n                                        {{ formatTokenAmount(item.balance.amount, store.networks[store.currentNetwork].exponent).toLocaleString('ru-RU', { maximumFractionDigits: 7 }).replace(',', '.') }}\n\n                                        <!-- Validator staked logo -->\n                                        <div class=\"logo\">\n                                            <img :src=\"getNetworkLogo(store.networks[store.currentNetwork].chain_id)\" alt=\"\">\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <!-- Validator APR -->\n                                <div class=\"apr\">\n                                    <span>\n                                        <!-- Validator APR label -->\n                                        {{ $t('message.stake_APR_label') }}<br>\n\n                                        <!-- Validator APR value -->\n                                        {{ ((store.networks[store.currentNetwork].APR * 100) - (store.networks[store.currentNetwork].APR * 100 * validator.commission.commission_rates.rate)).toFixed(2) }}%\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n\n                <!-- Empty search -->\n                <div class=\"empty\" v-else>\n                    {{ $t('message.search_empty_validator') }}\n                </div>\n            </div>\n        </div>\n    </section>\n</template>\n\n\n<script setup>\n    import { ref, inject, onBeforeMount } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { imageLoadError, getNetworkLogo, formatTokenAmount } from '@/utils'\n\n    // Components\n    import Loader from '@/components/Loader.vue'\n    import Search from '@/components/Search.vue'\n\n\n    const props = defineProps(['unstake', 'redelegate']),\n        store = useGlobalStore(),\n        emitter = inject('emitter'),\n        isValidatorsGot = ref(false),\n        validators = ref([]),\n        searchResult = ref([])\n\n\n    onBeforeMount(async() => {\n        if (props.unstake) {\n            // Get validators\n            validators.value = (await store.getUserValidators()).validators\n        } else if(props.redelegate) {\n            if (props.redelegate === 'from') {\n                // Get validators\n                validators.value = (await store.getUserValidators()).validators\n            } else {\n                // Get validators (Exclude validator from)\n                validators.value = (await store.getAllValidators()).validators.filter(validator => validator.operator_address !== store.redelegateValidatorFrom?.operator_address)\n            }\n        } else {\n            // Get validators\n            validators.value = (await store.getAllValidators()).validators\n        }\n\n        // Sort by voiting power\n        validators.value.sort((a, b) => {\n            if (parseInt(a.tokens) > parseInt(b.tokens)) { return -1 }\n            if (parseInt(a.tokens) < parseInt(b.tokens)) { return 1 }\n            return 0\n        })\n\n        // Default search result\n        searchResult.value = validators.value\n\n        // Hide loader\n        isValidatorsGot.value = true\n    })\n\n\n    // Is staked validator\n    function isStakedValidator(address) {\n        return store.stakedBalances.find(balance => balance.validator_info.operator_address === address)\n    }\n\n\n    // Is current validator\n    function isCurrentValidator(address) {\n        if (props.unstake) {\n            // Check\n            if (store.unstakeCurrentValidator && store.unstakeCurrentValidator.operator_address === address) {\n                return true\n            }\n        } else if(props.redelegate) {\n            if (props.redelegate === 'from') {\n                // Check\n                if (store.redelegateValidatorFrom && store.redelegateValidatorFrom.operator_address === address) {\n                    return true\n                }\n            } else {\n                // Check\n                if (store.redelegateValidatorTo && store.redelegateValidatorTo.operator_address === address) {\n                    return true\n                }\n            }\n        } else {\n            // Check\n            if (store.stakeCurrentValidator && store.stakeCurrentValidator.operator_address === address) {\n                return true\n            }\n        }\n    }\n\n\n    function setValidator(validator) {\n        if (props.unstake) {\n            // Set data\n            store.unstakeCurrentValidator = validator\n        } else if (props.redelegate) {\n            if (props.redelegate === 'from') {\n                // Set data\n                store.redelegateValidatorFrom = validator\n\n                // Remove duplicate\n                if (store.redelegateValidatorFrom.operator_address === store.redelegateValidatorTo?.operator_address) {\n                    store.redelegateValidatorTo = null\n                }\n            } else {\n                // Set data\n                store.redelegateValidatorTo = validator\n            }\n        } else {\n            // Set data\n            store.stakeCurrentValidator = validator\n        }\n\n        // Event \"close_validators_modal\"\n        emitter.emit('close_validators_modal')\n    }\n\n\n    // Event \"search\"\n    emitter.on('search', ({ query, source }) => {\n        if (source === 'validators') {\n            // Clear search result\n            searchResult.value = []\n\n            // Set new result\n            for (let key in validators.value) {\n                if (validators.value[key].description.moniker.toLocaleLowerCase().includes(query.toLocaleLowerCase())) {\n                    searchResult.value.push(validators.value[key])\n                }\n            }\n        }\n    })\n</script>\n\n\n<style scoped>\n    .validators_page\n    {\n        position: fixed;\n        z-index: 9;\n        top: 0;\n        left: 0;\n\n        width: 100%;\n        height: 100%;\n\n        background: #170232;\n    }\n\n\n    .validators_page .head\n    {\n        margin-bottom: 0;\n    }\n\n\n\n    .loader_wrap\n    {\n        position: relative;\n\n        height: auto;\n        padding: 20px;\n\n        background: none;\n    }\n\n\n\n    .validators\n    {\n        overflow: auto;\n\n        width: calc(100% + 32px);\n        height: calc(var(--tg-viewport-stable-height) - 110px);\n        margin: 0 -16px;\n        padding: 0 16px 12px;\n\n        overscroll-behavior-y: contain;\n    }\n\n\n    .empty\n    {\n        font-size: 20px;\n        font-weight: 500;\n\n        padding: 10px;\n\n        text-align: center;\n\n        opacity: .7;\n    }\n\n\n    .validators .list\n    {\n        display: flex;\n        flex-direction: column;\n    }\n\n\n    .validators .list > *\n    {\n        margin-top: 8px;\n    }\n\n\n\n    .validators .validator_wrap\n    {\n        padding: 1px;\n\n        cursor: pointer;\n\n        border-radius: 12px;\n        background: linear-gradient(to bottom,  #5e33cf 0%,#210750 100%);\n    }\n\n\n    .validators .validator\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: space-between;\n\n        padding: 5px 7px;\n\n        border-radius: 11px;\n        background: radial-gradient(130.57% 114.69% at 50% 0%, rgba(148, 56, 248, .70) 0%, rgba(89, 21, 167, .70) 50.94%, rgba(53, 12, 107, .70) 85.09%);\n    }\n\n\n    .validators .validator .logo\n    {\n        position: relative;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 44px;\n        height: 44px;\n        margin-right: 8px;\n        padding: 6px;\n\n        border-radius: 50%;\n        background: #950fff;\n    }\n\n\n    .validators .validator .logo img\n    {\n        display: block;\n\n        width: 100%;\n        height: 100%;\n\n        border-radius: inherit;\n    }\n\n\n    .validators .validator .logo .icon\n    {\n        display: none;\n\n        width: 24px;\n        height: 24px;\n    }\n\n\n    .validators .validator .logo img.hide\n    {\n        display: none;\n    }\n\n    .validators .validator .logo img.hide + .icon\n    {\n        display: block;\n    }\n\n\n    .validators .validator .check\n    {\n        position: absolute;\n        top: 0;\n        left: 0;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 100%;\n        height: 100%;\n\n        border-radius: 50%;\n        background: rgba(53, 12, 107, .65);\n    }\n\n\n    .validators .validator .check svg\n    {\n        display: block;\n\n        width: 20px;\n        height: 20px;\n    }\n\n\n    .validators .validator .logo + *\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: flex-start;\n\n        width: calc(100% - 124px);\n    }\n\n\n    .validators .validator .moniker\n    {\n        font-size: 18px;\n        font-weight: 500;\n\n        overflow: hidden;\n\n        width: calc(100% - 46px);\n\n        white-space: nowrap;\n        text-overflow: ellipsis;\n    }\n\n\n    .validators .validator .commission\n    {\n        font-size: 18px;\n        font-weight: 500;\n\n        margin-left: auto;\n\n        white-space: nowrap;\n    }\n\n\n    .validators .validator .staked\n    {\n        font-size: 16px;\n        font-weight: 300;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: flex-start;\n\n        color: rgba(255, 255, 255, .80);\n    }\n\n\n    .validators .validator .staked .logo\n    {\n        width: 18px;\n        height: 18px;\n        margin: 0 0 0 4px;\n        padding: 0;\n    }\n\n\n    .validators .validator .apr\n    {\n        font-size: 12px;\n\n        margin-left: auto;\n        padding: 2px 6px;\n\n        text-align: center;\n\n        border-radius: 4px;\n        background: #170232;\n    }\n\n\n    .validators .validator .apr span\n    {\n        display: block;\n\n        background: linear-gradient(180deg, #dd93fe 0%, #aa36de 100%);\n        -webkit-background-clip: text;\n                background-clip: text;\n\n        -webkit-text-fill-color: transparent;\n    }\n\n\n    .validators .validator_wrap.current\n    {\n        background: linear-gradient(180deg, #dc92fe 0%, #310446 100%);\n    }\n\n    .validators .current .validator\n    {\n        background: linear-gradient(180deg, #af60d3 0%, #56007e 100%);\n    }\n</style>","import script from \"./ValidatorsModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ValidatorsModal.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./ValidatorsModal.vue?vue&type=style&index=0&id=7b805c1d&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-7b805c1d\"]])\n\nexport default __exports__","<template>\n    <!-- Stake confirm modal -->\n    <section class=\"page_container inner_page_container stake_confirm\">\n        <!-- Loader -->\n        <Loader v-if=\"isProcess\" />\n\n        <div class=\"cont\">\n            <!-- Stake confirm head -->\n            <div class=\"head\">\n                <!-- Back button -->\n                <button class=\"back_btn\" @click=\"emitter.emit('close_stake_confirm_modal')\">\n                    <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_arrow_hor\"></use></svg>\n                </button>\n\n                <!-- Stake confirm title -->\n                <div class=\"page_title\">\n                    {{ $t('message.stake_confirm_page_title') }}\n                </div>\n            </div>\n\n            <!-- Stake confirm data -->\n            <div class=\"data\">\n                <!-- Stake confirm label -->\n                <div class=\"field_label\">\n                    {{ $t('message.details_label') }}\n                </div>\n\n                <!-- Stake confirm info -->\n                <div class=\"info_wrap\">\n                    <div class=\"info\">\n                        <!-- Validator -->\n                        <div class=\"validator\">\n                            <!-- Validator logo -->\n                            <div class=\"logo\">\n                                <img :src=\"`https://raw.githubusercontent.com/cosmostation/chainlist/main/chain/${store.networks[store.currentNetwork].prefix}/moniker/${store.stakeCurrentValidator.operator_address}.png`\" alt=\"\" loading=\"lazy\" @error=\"imageLoadError($event)\">\n\n                                <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_user\"></use></svg>\n                            </div>\n\n                            <div>\n                                <!-- Validator moniker -->\n                                <div class=\"moniker\">\n                                    {{ store.stakeCurrentValidator.description.moniker }}\n                                </div>\n\n                                <!-- Validator voting power -->\n                                <div class=\"voting_power\">\n                                    {{ (votingPower * 100).toFixed(2) }}% {{ $t('message.stake_confirm_voting_power') }}\n                                </div>\n                            </div>\n                        </div>\n\n                        <!-- Validator APR -->\n                        <div class=\"apr\">\n                            <span>\n                                <!-- Validator APR label -->\n                                {{ $t('message.stake_APR_label') }}<br>\n\n                                <!-- Validator APR value -->\n                                {{ ((store.networks[store.currentNetwork].APR * 100) - (store.networks[store.currentNetwork].APR * 100 * store.stakeCurrentValidator.commission.commission_rates.rate)).toFixed(2) }}%\n                            </span>\n                        </div>\n\n                        <!-- Stake confirm features -->\n                        <div class=\"features\">\n                            <!-- Stake confirm feature -->\n                            <div>\n                                <!-- Stake confirm feature label -->\n                                <div class=\"label\">\n                                    {{ $t('message.stake_confirm_token_label') }}\n                                </div>\n\n                                <!-- Stake confirm feature value -->\n                                <div class=\"val\">\n                                    <img :src=\"getNetworkLogo(store.networks[store.currentNetwork].chain_id)\" alt=\"\">\n\n                                    <span>{{ store.networks[store.currentNetwork].token_name }}</span>\n                                </div>\n                            </div>\n\n                            <!-- Stake confirm feature -->\n                            <div>\n                                <!-- Stake confirm feature label -->\n                                <div class=\"label\">\n                                    {{ $t('message.stake_confirm_amount_label') }}\n                                </div>\n\n                                <!-- Stake confirm feature value -->\n                                <div class=\"val\">\n                                    {{ props.amount }}\n\n                                    {{ store.networks[store.currentNetwork].token_name }}\n\n                                    <span class=\"currency\">\n                                        ({{ formatTokenCost(currencyConversion(props.amount, store.networks[store.currentNetwork].token_name)) }}{{ store.currentCurrencySymbol }})\n                                    </span>\n                                </div>\n                            </div>\n\n                            <!-- Stake confirm feature -->\n                            <div>\n                                <!-- Stake confirm feature label -->\n                                <div class=\"label\">\n                                    {{ $t('message.stake_confirm_daily_profit_label') }}\n                                </div>\n\n                                <!-- Stake confirm feature value -->\n                                <div class=\"val\">\n                                    ~{{ dailyProfit.toLocaleString('ru-RU', { maximumFractionDigits: 5 }).replace(',', '.') }}\n\n                                    {{ store.networks[store.currentNetwork].token_name }}\n\n                                    <span class=\"currency\">({{ formatTokenCost(currencyConversion(dailyProfit, store.networks[store.currentNetwork].token_name)) }}{{ store.currentCurrencySymbol }})</span>\n                                </div>\n                            </div>\n\n                            <!-- Stake confirm feature -->\n                            <div>\n                                <!-- Stake confirm feature label -->\n                                <div class=\"label\">\n                                    {{ $t('message.stake_confirm_commission_label') }}\n                                </div>\n\n                                <!-- Stake confirm feature value -->\n                                <div class=\"val\">\n                                    {{ (store.stakeCurrentValidator.commission.commission_rates.rate * 100).toLocaleString('ru-RU', { maximumFractionDigits: 2 }).replace(',', '.') }}%\n                                </div>\n                            </div>\n\n                            <!-- Stake confirm feature -->\n                            <div>\n                                <!-- Stake confirm feature label -->\n                                <div class=\"label\">\n                                    {{ $t('message.stake_confirm_unbonding_period_label') }}\n                                </div>\n\n                                <!-- Stake confirm feature value -->\n                                <div class=\"val\">\n                                    {{ store.networks[store.currentNetwork].unbondingTime }}\n\n                                    {{ $t('message.stake_unbonding_time_unit') }}\n                                </div>\n                            </div>\n\n                            <!-- Stake confirm feature -->\n                            <div>\n                                <!-- Stake confirm feature label -->\n                                <div class=\"label\">\n                                    {{ $t('message.stake_confirm_fee_label') }}\n                                </div>\n\n                                <!-- Stake confirm feature value -->\n                                <div class=\"val\">\n                                    {{ feeCost.toLocaleString('ru-RU', { maximumFractionDigits: 5 }).replace(',', '.') }}\n\n                                    {{ store.networks[store.currentNetwork].token_name }}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n            <!-- Stake confirm memo -->\n            <div class=\"memo\">\n                <!-- Stake confirm memo label -->\n                <div class=\"field_label\">\n                    {{ $t('message.memo_label') }}\n                </div>\n\n                <div class=\"field\">\n                    <!-- Stake confirm memo field -->\n                    <input type=\"text\" class=\"input big\" v-model=\"memo\"\n                        :placeholder=\"$t('message.placeholder_memo')\">\n                </div>\n            </div>\n\n\n            <!-- Stake confirm buttons -->\n            <div class=\"btns\">\n                <!-- Confirm button -->\n                <button class=\"btn\" @click.prevent=\"openSignTxModal()\">\n                    <span>{{ $t('message.btn_confirm_stake') }}</span>\n                </button>\n            </div>\n        </div>\n    </section>\n\n\n    <!-- Sign transaction modal -->\n    <transition name=\"modal\">\n    <SignTxModal v-if=\"showSignTxModal\"/>\n    </transition>\n\n    <!-- Overlay -->\n    <transition name=\"fade\">\n    <div class=\"modal_overlay\" @click.prevent=\"emitter.emit('close_any_modal')\" v-if=\"showSignTxModal\"></div>\n    </transition>\n</template>\n\n\n<script setup>\n    import { ref, inject, computed, onBeforeMount, onUnmounted } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { useRouter } from 'vue-router'\n    import { useNotification } from '@kyvg/vue3-notification'\n    import { currencyConversion, formatTokenCost, formatTokenAmount, getNetworkLogo, imageLoadError, signTx, sendTx, getExplorerLink } from '@/utils'\n\n    // Components\n    import Loader from '@/components/Loader.vue'\n    import SignTxModal from '@/components/modal/SignTxModal.vue'\n\n\n    const props = defineProps(['amount', 'msgAny']),\n        store = useGlobalStore(),\n        router = useRouter(),\n        emitter = inject('emitter'),\n        i18n = inject('i18n'),\n        notification = useNotification(),\n        showSignTxModal = ref(false),\n        votingPower = ref(0),\n        dailyProfit = ref(0),\n        memo = ref(''),\n        feeCost = computed(() => formatTokenAmount(store.TxFee.userGasAmount * store.TxFee[`${store.TxFee.currentLevel}Price`], store.TxFee.balance.exponent)),\n        isProcess = ref(false)\n\n\n    onBeforeMount(() => {\n        // Calc voting power\n        calcVotingPower()\n\n        // Calc daily profit\n        calcDailyProfit()\n    })\n\n\n    onUnmounted(() => {\n        // Unlisten events\n        emitter.off('auth')\n        emitter.off('close_sign_tx_modal')\n    })\n\n\n    // Calc voting power\n    async function calcVotingPower() {\n        // Get total bonded tokens\n        await store.getTotalBondedTokens()\n\n        // Set data\n        votingPower.value = store.stakeCurrentValidator.tokens / store.networks[store.currentNetwork].totalBondedTokens\n    }\n\n\n    // Calc daily profit\n    function calcDailyProfit() {\n        // Set data\n        dailyProfit.value = props.amount * ((store.networks[store.currentNetwork].APR - store.networks[store.currentNetwork].APR * store.stakeCurrentValidator.commission.commission_rates.rate) / 100) / 365\n    }\n\n\n    // Delegate tokens\n    async function delegate() {\n        // Set process status\n        isProcess.value = true\n\n        try {\n            // Update TxFee info\n            if (store.TxFee.isRemember) {\n                await store.updateTxFeeInfo()\n            }\n\n            // Sign Tx\n            let txBytes = await signTx(props.msgAny, memo.value)\n\n            // Clean notifications\n            notification.notify({\n                group: 'default',\n                clean: true\n            })\n\n            // Show notification\n            notification.notify({\n                group: 'default',\n                speed: 200,\n                duration: -100,\n                title: i18n.global.t('message.notification_tx_pending_title'),\n                type: 'pending',\n                data: {\n                    isCollapsible: true,\n                    explorer_link: getExplorerLink(store.currentNetwork)\n                }\n            })\n\n            // Send Tx\n            sendTx(txBytes).catch(error => {\n                console.log(error)\n\n                // Show error\n                showError(error)\n            })\n\n            // Redirect\n            router.push('/account')\n        } catch (error) {\n            console.log(error)\n\n            // Show error\n            showError(error)\n        }\n    }\n\n\n    // Show error message\n    function showError(error) {\n        // Set process status\n        isProcess.value = false\n\n        // Get error code\n        let errorText = ''\n\n        // Get error title\n        error.code\n            ? errorText = i18n.global.t(`message.notification_tx_error_${error.code}`)\n            : errorText = i18n.global.t('message.notification_tx_error_rejected')\n\n        // Clean notifications\n        notification.notify({\n            group: 'default',\n            clean: true\n        })\n\n        // Show notification\n        notification.notify({\n            group: 'default',\n            speed: 200,\n            duration: 6000,\n            title: i18n.global.t('message.notification_tx_error_title'),\n            text: errorText,\n            type: 'error'\n        })\n\n        // Clear tx hash\n        store.networks[store.currentNetwork].currentTxHash = null\n\n        // Reset Tx Fee\n        store.resetTxFee()\n    }\n\n\n    // Open SignTx modal\n    function openSignTxModal() {\n        // Show SignTx modal\n        showSignTxModal.value = true\n\n        // Update status\n        store.isAnyModalOpen = true\n    }\n\n\n    // Event \"auth\"\n    emitter.on('auth', () => {\n        // Hide SignTx modal\n        showSignTxModal.value = false\n\n        // Update status\n        store.isAnyModalOpen = false\n\n        // Delegate tokens\n        delegate()\n    })\n\n\n    // Event \"close_sign_tx_modal\"\n    emitter.on('close_sign_tx_modal', () => {\n        // Hide SignTx modal\n        showSignTxModal.value = false\n\n        // Update status\n        store.isAnyModalOpen = false\n    })\n\n\n    // Event \"close_any_modal\"\n    emitter.on('close_any_modal', () => {\n        // Hide SignTx modal\n        showSignTxModal.value = false\n\n        // Update status\n        store.isAnyModalOpen = false\n    })\n</script>\n\n\n<style scoped>\n    .stake_confirm\n    {\n        position: fixed;\n        z-index: 9;\n        top: 0;\n        left: 0;\n\n        width: 100%;\n        height: 100%;\n\n        background: #170232;\n    }\n\n\n\n    .info_wrap\n    {\n        padding: 1px;\n\n        border-radius: 12px;\n        background: linear-gradient(to bottom,  #5e33cf 0%,#210750 100%);\n    }\n\n\n    .info\n    {\n        position: relative;\n\n        padding: 7px 9px;\n\n        border-radius: 11px;\n        background: #06000e;\n    }\n\n\n\n    .validator\n    {\n        display: flex;\n        align-content: flex-start;\n        align-items: flex-start;\n        flex-wrap: wrap;\n        justify-content: space-between;\n\n        margin-bottom: 20px;\n        padding-right: 60px;\n    }\n\n\n    .validator .logo\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 38px;\n        height: 38px;\n        margin-right: 6px;\n        padding: 6px;\n\n        border-radius: 50%;\n        background: #950fff;\n    }\n\n\n    .validator .logo img\n    {\n        display: block;\n\n        width: 100%;\n        height: 100%;\n\n        border-radius: inherit;\n    }\n\n\n    .validator .logo .icon\n    {\n        display: none;\n\n        width: 24px;\n        height: 24px;\n    }\n\n\n    .validator .logo img.hide\n    {\n        display: none;\n    }\n\n    .validator .logo img.hide + .icon\n    {\n        display: block;\n    }\n\n\n    .validator .logo + *\n    {\n        align-self: center;\n\n        width: calc(100% - 44px);\n    }\n\n\n    .validator .moniker\n    {\n        font-size: 16px;\n        font-weight: 500;\n\n        overflow: hidden;\n\n        white-space: nowrap;\n        text-overflow: ellipsis;\n    }\n\n\n    .validator .voting_power\n    {\n        font-size: 12px;\n        font-weight: 200;\n    }\n\n\n\n    .apr\n    {\n        font-size: 12px;\n\n        position: absolute;\n        top: 9px;\n        right: 9px;\n\n        padding: 2px 6px;\n\n        text-align: center;\n\n        border-radius: 4px;\n        background: #170232;\n    }\n\n\n    .apr span\n    {\n        display: block;\n\n        background: linear-gradient(180deg, #dd93fe 0%, #aa36de 100%);\n        -webkit-background-clip: text;\n                background-clip: text;\n\n        -webkit-text-fill-color: transparent;\n    }\n\n\n\n    .features > *\n    {\n        font-size: 16px;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: space-between;\n    }\n\n\n    .features > * + *\n    {\n        margin-top: 8px;\n    }\n\n\n    .features .val\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: flex-start;\n    }\n\n\n    .features .label\n    {\n        font-size: inherit;\n\n        display: block;\n\n        margin: 0;\n        padding: 0;\n    }\n\n\n    .features .val img\n    {\n        display: block;\n\n        width: 18px;\n        height: 18px;\n        margin-right: 4px;\n\n        border-radius: 50%;\n    }\n\n\n    .features .val .currency\n    {\n        color: #836b9e;\n    }\n\n\n\n    .memo\n    {\n        margin-top: 12px;\n        margin-bottom: auto;\n    }\n\n\n\n    .field\n    {\n        padding: 1px;\n\n        border-radius: 10px;\n        background: linear-gradient(to bottom,  #5d33ce 0%,#200750 100%);\n    }\n\n\n    .input\n    {\n        border-radius: 9px;\n        background: #06000e;\n    }\n</style>","import script from \"./StakeConfirmModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./StakeConfirmModal.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./StakeConfirmModal.vue?vue&type=style&index=0&id=5c55bbaf&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-5c55bbaf\"]])\n\nexport default __exports__","<template>\n    <!-- Stake page -->\n    <section class=\"page_container inner_page_container stake\">\n        <div class=\"cont\">\n            <!-- Stake page head -->\n            <div class=\"head\">\n                <!-- Bacj button -->\n                <router-link to=\"/account?activeSlide=1\" class=\"back_btn\">\n                    <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_arrow_hor\"></use></svg>\n                </router-link>\n\n                <!-- Stake page title -->\n                <div class=\"page_title\">\n                    {{ $t('message.stake_page_title') }}\n                </div>\n            </div>\n\n            <!-- Loader -->\n            <Loader v-if=\"!store.isBalancesGot || !store.isStakedBalancesGot\" />\n\n            <template v-else>\n            <!-- Current staked -->\n            <div class=\"current_staked\">\n                <!-- Current staked label -->\n                <div class=\"field_label\">\n                    {{ $t('message.stake_current_staked_label') }}\n                </div>\n\n                <!-- Current staked data -->\n                <div class=\"data_wrap\">\n                    <div class=\"data\">\n                        <!-- Current staked APR -->\n                        <div class=\"apr\">\n                            <span>{{ $t('message.stake_APR_label') }}<br> {{ (store.networks[store.currentNetwork].APR * 100).toFixed(2) }}%</span>\n                        </div>\n\n                        <!-- Current staked token -->\n                        <div class=\"token\">\n                            <!-- Current staked token logo -->\n                            <div class=\"logo\">\n                                <img :src=\"getNetworkLogo(store.networks[store.currentNetwork].chain_id)\" alt=\"\">\n                            </div>\n\n                            <div>\n                                <!-- Current staked token denom -->\n                                <div class=\"denom\">\n                                    {{ store.networks[store.currentNetwork].token_name }}\n                                </div>\n\n                                <!-- Current staked token unbonding period -->\n                                <div class=\"unbonding_period\">\n                                    {{ $t('message.stake_unbonding_period_label') }}\n\n                                    {{ store.networks[store.currentNetwork].unbondingTime }}\n\n                                    {{ $t('message.stake_unbonding_time_unit') }}\n                                </div>\n                            </div>\n                        </div>\n\n                        <!-- Current staked balances -->\n                        <div class=\"balances\">\n                            <div>\n                                <!-- Current staked balances label -->\n                                <div class=\"label\">\n                                    {{ $t('message.stake_available_label') }}\n                                </div>\n\n                                <!-- Current staked balances amount -->\n                                <div class=\"amount\">\n                                    {{ formatTokenAmount(calcAvailableAmount(), store.networks[store.currentNetwork].exponent).toLocaleString('ru-RU', { maximumFractionDigits: 7 }).replace(',', '.') }}\n\n                                    {{ store.networks[store.currentNetwork].token_name }}\n                                </div>\n\n                                <!-- Current staked balances cost -->\n                                <div class=\"cost\">\n                                    {{ store.currentCurrencySymbol }}\n\n                                    {{ formatTokenCost(calcTokenCost(store.networks[store.currentNetwork].token_name, calcAvailableAmount(), store.networks[store.currentNetwork].exponent)) }}\n                                </div>\n                            </div>\n\n                            <div>\n                                <!-- Current staked balances label -->\n                                <div class=\"label\">\n                                    {{ $t('message.stake_staked_label') }}\n                                </div>\n\n                                <!-- Current staked balances amount -->\n                                <div class=\"amount\">\n                                    {{ formatTokenAmount(calcStakedAmount(), store.networks[store.currentNetwork].exponent).toLocaleString('ru-RU', { maximumFractionDigits: 7 }).replace(',', '.') }}\n\n                                    {{ store.networks[store.currentNetwork].token_name }}\n                                </div>\n\n                                <!-- Current staked balances cost -->\n                                <div class=\"cost\">\n                                    {{ store.currentCurrencySymbol }}{{ formatTokenCost(calcStakedBalancesCost()) }}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n            <!-- Stake page validator -->\n            <div class=\"validator_info\">\n                <!-- Stake page validator label -->\n                <div class=\"field_label\">\n                    {{ $t('message.stake_validator_label') }}\n                </div>\n\n                <!-- Stake page validator info -->\n                <div class=\"info_wrap\" @click.prevent=\"openValidatorsModal()\" v-if=\"!store.stakeCurrentValidator\">\n                    <div class=\"info\">\n                        <div class=\"placeholder\">\n                            {{ $t('message.stake_validator_placeholder') }}\n                        </div>\n\n                        <svg class=\"arr\"><use xlink:href=\"@/assets/sprite.svg#ic_arr_ver2\"></use></svg>\n                    </div>\n                </div>\n\n                <!-- Stake page validator info -->\n                <div class=\"validator_wrap\" @click.prevent=\"openValidatorsModal()\" v-else>\n                    <div class=\"validator\">\n                        <!-- Stake page validator logo -->\n                        <div class=\"logo\">\n                            <img :src=\"`https://raw.githubusercontent.com/cosmostation/chainlist/main/chain/${store.networks[store.currentNetwork].prefix}/moniker/${store.stakeCurrentValidator.operator_address}.png`\" alt=\"\" loading=\"lazy\" @error=\"imageLoadError($event)\">\n\n                            <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_user\"></use></svg>\n                        </div>\n\n                        <div>\n                            <!-- Stake page validator moniker -->\n                            <div class=\"moniker\">\n                                {{ store.stakeCurrentValidator.description.moniker }}\n                            </div>\n\n                            <!-- Stake page validator staked -->\n                            <div class=\"staked\" v-if=\"item = isStakedValidator(store.stakeCurrentValidator.operator_address)\">\n                                {{ $t('message.validatoes_staked_label') }}\n\n                                {{ formatTokenAmount(item.balance.amount, store.networks[store.currentNetwork].exponent).toLocaleString('ru-RU', { maximumFractionDigits: 7 }) }}\n\n                                <div class=\"logo\">\n                                    <img :src=\"getNetworkLogo(store.networks[store.currentNetwork].chain_id)\" alt=\"\">\n                                </div>\n                            </div>\n                        </div>\n\n                        <svg class=\"arr\"><use xlink:href=\"@/assets/sprite.svg#ic_arr_ver2\"></use></svg>\n                    </div>\n                </div>\n            </div>\n\n\n            <!-- Stake page amount -->\n            <div class=\"amount\">\n                <!-- Stake page amount label -->\n                <div class=\"field_label\">\n                    {{ $t('message.stake_amount_label') }}\n\n                    <!-- Stake page amount cost -->\n                    <div class=\"cost\">\n                        {{ formatTokenCost(calcTokenCost(store.networks[store.currentNetwork].token_name, (amount * Math.pow(10, store.networks[store.currentNetwork].exponent)), store.networks[store.currentNetwork].exponent)) }}\n\n                        {{ store.currentCurrencySymbol }}\n                    </div>\n                </div>\n\n                <!-- Stake page amount field -->\n                <div class=\"field\">\n                    <input type=\"number\" inputmode=\"decimal\" class=\"input big\" v-model=\"amount\"\n                        :placeholder=\"$t('message.placeholder_amount', { token: store.networks[store.currentNetwork].token_name })\"\n                        @input=\"validateAmount($event)\">\n\n                    <!-- Stake page amount max. button -->\n                    <button type=\"button\" class=\"max_btn\" @click.prevent=\"setMaxAmount\">\n                        {{ $t('message.btn_MAX') }}\n                    </button>\n                </div>\n            </div>\n\n\n            <!-- Tx fee -->\n            <TxFee v-if=\"isFormValid\" :msgAny txType=\"stake\" />\n\n\n            <!-- Stake page button -->\n            <div class=\"btns\">\n                <!-- Stake button -->\n                <button v-if=\"!store.networks[store.currentNetwork].currentTxHash\" class=\"btn\" @click.prevent=\"showStakeConfirmModal = true\" :class=\"{ disabled: !store.TxFee.isEnough }\">\n                    <span>{{ $t('message.btn_stake') }}</span>\n                </button>\n\n                <!-- Waiting button -->\n                <button v-else class=\"btn waiting_btn\" @click.prevent=\"emitter.emit('show_collapsible_notification')\">\n                    <span>{{ $t('message.btn_waiting_tx') }}</span>\n                </button>\n            </div>\n            </template>\n        </div>\n    </section>\n\n\n    <!-- Validators modal -->\n    <transition name=\"from_right\">\n    <ValidatorsModal v-if=\"showValidatorsModal\" />\n    </transition>\n\n    <!-- Stake confirm modal -->\n    <transition name=\"from_right\">\n    <StakeConfirmModal v-if=\"showStakeConfirmModal\" :amount :msgAny />\n    </transition>\n</template>\n\n\n<script setup>\n    import { ref, inject, onUnmounted, onBeforeMount, watch, computed } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { getNetworkLogo, formatTokenCost, calcTokenCost, calcStakedBalancesCost, calcAvailableAmount, calcStakedAmount, formatTokenAmount, imageLoadError } from '@/utils'\n    import { MsgDelegate } from 'cosmjs-types/cosmos/staking/v1beta1/tx'\n\n    // Components\n    import Loader from '@/components/Loader.vue'\n    import TxFee from '@/components/TxFee.vue'\n    import ValidatorsModal from '@/components/modal/ValidatorsModal.vue'\n    import StakeConfirmModal from '@/components/modal/StakeConfirmModal.vue'\n\n\n    const store = useGlobalStore(),\n        emitter = inject('emitter'),\n        showValidatorsModal = ref(false),\n        showStakeConfirmModal = ref(false),\n        msgAny = ref([]),\n        amount = ref(''),\n        isAmountReady = ref(false),\n        isFormValid = ref(computed(() => isAmountReady.value && !!store.stakeCurrentValidator && calcAvailableAmount()))\n\n\n    onBeforeMount(() => {\n        // Reset data\n        store.stakeCurrentValidator = null\n\n        // Get network unbonding period\n        store.getNetworkUnbondingTime()\n    })\n\n\n    onUnmounted(() => {\n        // Unlisten events\n        emitter.off('close_stake_confirm_modal')\n        emitter.off('close_validators_modal')\n    })\n\n\n    watch(computed(() => isFormValid.value), () => {\n        if (isFormValid.value) {\n            // Set messeges\n            msgAny.value = [{\n                typeUrl: '/cosmos.staking.v1beta1.MsgDelegate',\n                value: MsgDelegate.fromPartial({\n                    delegatorAddress: store.currentAddress,\n                    validatorAddress: store.stakeCurrentValidator.operator_address,\n                    amount: {\n                        denom: store.networks[store.currentNetwork].denom,\n                        amount: `${parseFloat((amount.value).toString().replace(',', '.')).toFixed(store.networks[store.currentNetwork].exponent) * Math.pow(10, store.networks[store.currentNetwork].exponent)}`\n                    }\n                })\n            }]\n        }\n    })\n\n\n    // Set MAX amount\n    function setMaxAmount() {\n        // Set amount status\n        isAmountReady.value = false\n\n        setTimeout(() => {\n            // Set amount\n            amount.value = formatTokenAmount(calcAvailableAmount(), store.networks[store.currentNetwork].exponent)\n\n            // Set amount status\n            isAmountReady.value = true\n        })\n    }\n\n\n    // Validate amount\n    function validateAmount(e) {\n        // Set amount status\n        isAmountReady.value = false\n\n        setTimeout(() => {\n            // Negative value\n            if (e.target.value.length && e.target.value <= 0) {\n                // Set empty\n                amount.value = ''\n            }\n\n            // Acceptable value\n            if (e.target.value.length && e.target.value > 0 && e.target.value < formatTokenAmount(calcAvailableAmount(), store.networks[store.currentNetwork].exponent)){\n                // Set amount status\n                isAmountReady.value = true\n            }\n\n            // More than available balance\n            if (e.target.value > formatTokenAmount(calcAvailableAmount(), store.networks[store.currentNetwork].exponent)) {\n                // Set MAX amount\n                setMaxAmount()\n            }\n        })\n    }\n\n\n    // Is staked validator\n    function isStakedValidator(address) {\n        return store.stakedBalances.find(balance => balance.validator_info.operator_address === address)\n    }\n\n\n    // Open validators modal\n    function openValidatorsModal() {\n        // Show validators modal\n        showValidatorsModal.value = true\n    }\n\n\n    // Event \"close_validators_modal\"\n    emitter.on('close_validators_modal', () => {\n        // Hide validators modal\n        showValidatorsModal.value = false\n    })\n\n\n    // Event \"close_stake_confirm_modal\"\n    emitter.on('close_stake_confirm_modal', () => {\n        // Hide stake confirm modal\n        showStakeConfirmModal.value = false\n    })\n</script>\n\n\n<style scoped>\n    .loader_wrap\n    {\n        position: relative;\n\n        height: auto;\n        padding: 20px;\n\n        background: none;\n    }\n\n\n\n    .current_staked .data_wrap\n    {\n        padding: 1px;\n\n        border-radius: 12px;\n        background: linear-gradient(to bottom,  #5e33cf 0%,#210750 100%);\n    }\n\n\n    .current_staked .data\n    {\n        position: relative;\n\n        padding: 7px;\n\n        border-radius: 11px;\n        background: radial-gradient(130.57% 114.69% at 50% 0%, rgba(148, 56, 248, .70) 0%, rgba(89, 21, 167, .70) 50.94%, rgba(53, 12, 107, .70) 85.09%);\n    }\n\n\n\n    .current_staked .apr\n    {\n        font-size: 12px;\n\n        position: absolute;\n        top: 7px;\n        right: 7px;\n\n        padding: 2px 6px;\n\n        text-align: center;\n\n        border-radius: 4px;\n        background: #170232;\n    }\n\n\n    .current_staked .apr span\n    {\n        display: block;\n\n        background: linear-gradient(180deg, #dd93fe 0%, #aa36de 100%);\n        -webkit-background-clip: text;\n                background-clip: text;\n\n        -webkit-text-fill-color: transparent;\n    }\n\n\n\n    .current_staked .token\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: space-between;\n    }\n\n\n    .current_staked .token .logo\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 38px;\n        height: 38px;\n\n        border-radius: 50%;\n    }\n\n\n    .current_staked .token .logo img\n    {\n        display: block;\n\n        width: 100%;\n        height: 100%;\n\n        border-radius: inherit;\n    }\n\n\n    .current_staked .token .logo + *\n    {\n        align-self: center;\n\n        width: calc(100% - 44px);\n    }\n\n\n    .current_staked .token .denom\n    {\n        font-size: 16px;\n        font-weight: 500;\n\n        text-transform: uppercase;\n    }\n\n\n    .current_staked .token .unbonding_period\n    {\n        font-size: 12px;\n        font-weight: 200;\n    }\n\n\n\n    .current_staked .balances\n    {\n        display: flex;\n        align-content: stretch;\n        align-items: stretch;\n        flex-wrap: wrap;\n        justify-content: space-between;\n\n        margin-top: 10px;\n    }\n\n\n    .current_staked .balances > *\n    {\n        width: calc(50% - 4px);\n        padding: 4px 8px;\n\n        border-radius: 6px;\n        background: #170232;\n    }\n\n\n    .current_staked .balances .label\n    {\n        font-weight: 500;\n    }\n\n\n    .current_staked .balances .amount\n    {\n        font-size: 12px;\n        font-weight: 300;\n\n        margin: 0;\n    }\n\n\n    .current_staked .balances .cost\n    {\n        font-size: 12px;\n        font-weight: 300;\n\n        color: rgba(255, 255, 255, .60);\n    }\n\n\n\n    .validator_info\n    {\n        margin-top: 12px;\n    }\n\n\n    .validator_info .info_wrap\n    {\n        padding: 1px;\n\n        border-radius: 12px;\n        background: linear-gradient(to bottom,  #5e33cf 0%,#210750 100%);\n    }\n\n\n    .validator_info .info\n    {\n        position: relative;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: space-between;\n\n        height: 46px;\n        padding: 0 15px;\n\n        cursor: pointer;\n\n        border-radius: 11px;\n        background: #06000e;\n    }\n\n\n    .validator_info .info .placeholder\n    {\n        font-size: 16px;\n        font-weight: 500;\n\n        opacity: .6;\n    }\n\n\n    .validator_info .info .arr\n    {\n        position: absolute;\n        z-index: 3;\n        top: 0;\n        right: 16px;\n        bottom: 0;\n\n        display: block;\n\n        width: 28px;\n        height: 28px;\n        margin: auto 0;\n\n        transform: rotate(-90deg);\n    }\n\n\n    .validator_info .validator_wrap\n    {\n        padding: 1px;\n\n        cursor: pointer;\n\n        border-radius: 12px;\n        background: linear-gradient(to bottom,  #5e33cf 0%,#210750 100%);\n    }\n\n\n    .validator_info .validator\n    {\n        position: relative;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: flex-start;\n\n        padding: 5px 7px;\n\n        border-radius: 11px;\n        background: radial-gradient(130.57% 114.69% at 50% 0%, rgba(148, 56, 248, .70) 0%, rgba(89, 21, 167, .70) 50.94%, rgba(53, 12, 107, .70) 85.09%);\n    }\n\n\n    .validator_info .validator .logo\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 44px;\n        height: 44px;\n        margin-right: 8px;\n        padding: 6px;\n\n        border-radius: 50%;\n        background: #950fff;\n    }\n\n\n    .validator_info .validator .logo img\n    {\n        display: block;\n\n        width: 100%;\n        height: 100%;\n\n        border-radius: inherit;\n    }\n\n\n    .validator_info .validator .logo .icon\n    {\n        display: none;\n\n        width: 24px;\n        height: 24px;\n    }\n\n\n    .validator_info .validator .logo img.hide\n    {\n        display: none;\n    }\n\n    .validator_info .validator .logo img.hide + .icon\n    {\n        display: block;\n    }\n\n\n    .validator_info .validator .logo + *\n    {\n        width: calc(100% - 100px);\n    }\n\n\n    .validator_info .validator .moniker\n    {\n        font-size: 18px;\n        font-weight: 500;\n\n        overflow: hidden;\n\n        width: calc(100% - 46px);\n\n        white-space: nowrap;\n        text-overflow: ellipsis;\n    }\n\n\n    .validator_info .validator .staked\n    {\n        font-size: 16px;\n        font-weight: 300;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: flex-start;\n\n        color: rgba(255, 255, 255, .80);\n    }\n\n\n    .validator_info .validator .staked .logo\n    {\n        width: 18px;\n        height: 18px;\n        margin: 0 0 0 4px;\n        padding: 0;\n    }\n\n\n    .validator_info .validator .arr\n    {\n        position: absolute;\n        z-index: 3;\n        top: 0;\n        right: 16px;\n        bottom: 0;\n\n        display: block;\n\n        width: 28px;\n        height: 28px;\n        margin: auto 0;\n\n        transform: rotate(-90deg);\n    }\n\n\n\n    .amount\n    {\n        margin-top: 12px;\n        margin-bottom: auto;\n    }\n\n\n    .amount .cost\n    {\n        margin-left: auto;\n\n        color: rgba(255, 255, 255, .70);\n    }\n\n\n\n    .field\n    {\n        position: relative;\n\n        padding: 1px;\n\n        border-radius: 10px;\n        background: linear-gradient(to bottom,  #5d33ce 0%,#200750 100%);\n    }\n\n\n    .input\n    {\n        border-radius: 9px;\n        background: #06000e;\n    }\n\n\n    .btns\n    {\n        margin-top: 0;\n        padding: 0;\n    }\n</style>","import script from \"./StakePage.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./StakePage.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./StakePage.vue?vue&type=style&index=0&id=7c7bc332&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-7c7bc332\"]])\n\nexport default __exports__"],"names":["props","__props","emitter","inject","query","ref","setFocusEvent","setTimeout","emit","setBlurEvent","setEnterEvent","value","source","clearField","__exports__","store","useGlobalStore","isValidatorsGot","validators","searchResult","isStakedValidator","address","stakedBalances","find","balance","validator_info","operator_address","isCurrentValidator","unstake","unstakeCurrentValidator","redelegate","redelegateValidatorFrom","redelegateValidatorTo","stakeCurrentValidator","setValidator","validator","onBeforeMount","async","getUserValidators","getAllValidators","filter","sort","a","b","parseInt","tokens","on","key","description","moniker","toLocaleLowerCase","includes","push","router","useRouter","i18n","notification","useNotification","showSignTxModal","votingPower","dailyProfit","memo","feeCost","computed","formatTokenAmount","TxFee","userGasAmount","currentLevel","exponent","isProcess","calcVotingPower","getTotalBondedTokens","networks","currentNetwork","totalBondedTokens","calcDailyProfit","amount","APR","commission","commission_rates","rate","delegate","isRemember","updateTxFeeInfo","txBytes","signTx","msgAny","notify","group","clean","speed","duration","title","global","t","type","data","isCollapsible","explorer_link","getExplorerLink","sendTx","catch","error","console","log","showError","errorText","code","text","currentTxHash","resetTxFee","openSignTxModal","isAnyModalOpen","onUnmounted","off","showValidatorsModal","showStakeConfirmModal","isAmountReady","isFormValid","calcAvailableAmount","setMaxAmount","validateAmount","e","target","length","openValidatorsModal","getNetworkUnbondingTime","watch","typeUrl","MsgDelegate","fromPartial","delegatorAddress","currentAddress","validatorAddress","denom","parseFloat","toString","replace","toFixed","Math","pow"],"sourceRoot":""}