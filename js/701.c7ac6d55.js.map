{"version":3,"file":"js/701.c7ac6d55.js","mappings":"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","sources":["webpack://cosmos-telegram-signer/./src/components/account/QRCodeScanner.vue","webpack://cosmos-telegram-signer/./src/components/account/QRCodeScanner.vue?400c","webpack://cosmos-telegram-signer/./src/views/Send.vue","webpack://cosmos-telegram-signer/./src/views/Send.vue?74fd"],"sourcesContent":["<template>\n    <!-- QR code button -->\n    <button class=\"btn\" @click.prevent=\"openScanner()\">\n        <!-- QR code button icon -->\n        <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_scaner\"></use></svg>\n    </button>\n</template>\n\n\n<script setup>\n    // Open QR popup\n    function openScanner() {\n        Telegram.WebApp.showScanQrPopup({ text: 'Наш текст' })\n    }\n</script>\n\n\n<style scoped>\n    .btn\n    {\n        position: absolute;\n        z-index: 9;\n        top: 17px;\n        right: 12px;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 28px;\n        height: 28px;\n        margin-left: auto;\n\n        transition: .2s linear;\n\n        background: url(@/assets/bg_action_btn.svg) 0 0/100% 100% no-repeat;\n    }\n\n\n    .btn.in_field\n    {\n        top: 0;\n        right: 16px;\n        bottom: 0;\n\n        margin: auto 0;\n\n        background: none;\n    }\n\n\n    .btn .icon\n    {\n        display: block;\n\n        width: 14px;\n        height: 14px;\n    }\n\n\n    .btn:active\n    {\n        color: #5b3895;\n        background: url(@/assets/bg_action_btn_a.svg) 0 0/100% 100% no-repeat;\n    }\n</style>","import script from \"./QRCodeScanner.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./QRCodeScanner.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./QRCodeScanner.vue?vue&type=style&index=0&id=3f39ea36&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-3f39ea36\"]])\n\nexport default __exports__","<template>\n    <!-- Send page -->\n    <section class=\"page_container inner_page_container send\">\n        <!-- Loader -->\n        <Loader v-if=\"isProcess\" />\n\n        <div class=\"cont\">\n            <!-- Send page head -->\n            <div class=\"head\">\n                <!-- Back button -->\n                <router-link to=\"/account\" class=\"back_btn\">\n                    <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_arrow_hor\"></use></svg>\n                </router-link>\n\n                <!-- Send page title -->\n                <div class=\"page_title\">\n                    {{ $t('message.send_page_title') }}\n                </div>\n            </div>\n\n\n            <!-- Send page token -->\n            <div class=\"token_wrap\">\n                <div class=\"token\">\n                    <!-- Send page token logo -->\n                    <div class=\"logo\">\n                        <img :src=\"balance.token_info.logo_URIs.svg\" :alt=\"balance.token_info.name\" loading=\"lazy\">\n                    </div>\n\n                    <!-- Send page token denom -->\n                    <div class=\"denom\">\n                        {{ balance.token_info.symbol }}\n                    </div>\n\n                    <!-- Send page token amount -->\n                    <div class=\"amount\">\n                        <div class=\"val\">\n                            {{ formatTokenAmount(balance.amount, balance.exponent).toLocaleString('ru-RU', { maximumFractionDigits: 7 }).replace(',', '.') }}\n                        </div>\n\n                        <div class=\"cost\">\n                            {{ formatTokenCost(calcTokenCost(balance.token_info.symbol, balance.amount, balance.exponent)) }} {{ store.currentCurrencySymbol }}\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n            <!-- Send page recipient address -->\n            <div class=\"address\">\n                <!-- Send page recipient address label -->\n                <div class=\"field_label\">\n                    {{ $t('message.send_address_label') }}\n                </div>\n\n                <!-- Send page recipient address field -->\n                <div class=\"field\">\n                    <input type=\"text\" class=\"input big\" v-model=\"address\" ref=\"addressInput\"\n                        @focus=\"emitter.emit('show_keyboard')\"\n                        @blur=\"emitter.emit('hide_keyboard')\"\n                        @input=\"validateAddress()\"\n                        @paste=\"validateAddress()\">\n\n                    <!-- QR code scanner -->\n                    <QRCodeScanner class=\"in_field\" />\n                </div>\n            </div>\n\n\n            <!-- Send page amount -->\n            <div class=\"amount_field\">\n                <!-- Send page amount label -->\n                <div class=\"field_label\">\n                    {{ $t('message.send_amount_label') }}\n\n                    <!-- Send page amount cost -->\n                    <div class=\"cost\">\n                        {{ formatTokenCost(calcTokenCost(store.networks[store.currentNetwork].token_name, (amount * Math.pow(10, store.networks[store.currentNetwork].exponent)), store.networks[store.currentNetwork].exponent)) }}\n\n                        {{ store.currentCurrencySymbol }}\n                    </div>\n                </div>\n\n                <!-- Send page amount field -->\n                <div class=\"field\">\n                    <input type=\"number\" inputmode=\"numeric\" class=\"input big\" v-model=\"amount\" placeholder=\"0.00\"\n                        @focus=\"emitter.emit('show_keyboard')\"\n                        @blur=\"emitter.emit('hide_keyboard')\"\n                        @input=\"validateAmount()\">\n\n                    <!-- Send page amount max. button -->\n                    <button type=\"button\" class=\"max_btn\" @click.prevent=\"setMaxAmount\">\n                        {{ $t('message.btn_MAX') }}\n                    </button>\n                </div>\n            </div>\n\n\n            <!-- Send page memo -->\n            <div class=\"memo_field\">\n                <!-- Send page memo label -->\n                <div class=\"field_label\">\n                    {{ $t('message.memo_label') }}\n                </div>\n\n                <!-- Send page memo field -->\n                <div class=\"field\">\n                    <input type=\"text\" class=\"input big\" v-model=\"memo\"\n                        @focus=\"emitter.emit('show_keyboard')\"\n                        @blur=\"emitter.emit('hide_keyboard')\">\n                </div>\n            </div>\n\n\n            <!-- Tx fee -->\n            <TxFee v-if=\"isFormValid\" :msgAny txType=\"send\" />\n\n\n            <!-- Send page button -->\n            <div class=\"btns\">\n                <!-- Send button -->\n                <button v-if=\"!store.networks[store.currentNetwork].currentTxHash\" class=\"btn\" @click.prevent=\"showSignTxModal = true\" :class=\"{ disabled: !store.TxFee.isEnough }\">\n                    <span>{{ $t('message.btn_send') }}</span>\n                </button>\n\n                <!-- Waiting button -->\n                <button v-else class=\"btn waiting_btn\" @click.prevent=\"emitter.emit('show_pending_notification')\">\n                    <span>{{ $t('message.btn_waiting_tx') }}</span>\n                </button>\n            </div>\n        </div>\n    </section>\n\n\n    <!-- Sign transaction -->\n    <SignTx v-if=\"showSignTxModal\"/>\n</template>\n\n\n<script setup>\n    import { ref, inject, watch, onBeforeMount, computed, onUnmounted } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { useRouter, useRoute } from 'vue-router'\n    import { useNotification } from '@kyvg/vue3-notification'\n    import { fromBech32 } from '@cosmjs/encoding'\n    import { calcTokenCost, formatTokenCost, formatTokenAmount, signTx, sendTx, getExplorerLink } from '@/utils'\n\n    // Components\n    import Loader from '@/components/Loader.vue'\n    import TxFee from '@/components/TxFee.vue'\n    import SignTx from '@/components/modal/SignTx.vue'\n    import QRCodeScanner from '@/components/account/QRCodeScanner.vue'\n\n\n    const store = useGlobalStore(),\n        router = useRouter(),\n        route = useRoute(),\n        emitter = inject('emitter'),\n        i18n = inject('i18n'),\n        notification = useNotification(),\n        balance = store.balances.find(balance => balance.denom === route.query.denom),\n        addressInput = ref(null),\n        address = ref(''),\n        amount = ref(''),\n        memo = ref(''),\n        showSignTxModal = ref(false),\n        msgAny = ref([]),\n        isProcess = ref(false),\n        isAmountReady = ref(false),\n        isFormValid = ref(computed(() => isAmountReady.value && validateAddress()))\n\n\n    onBeforeMount(() => {\n        // Parse query data\n        if (route.query.data) {\n            let parsedData = route.query.data.split('|')\n\n            if (parsedData[0] === 'send') {\n                // Set data\n                address.value = parsedData[1]\n                amount.value = parsedData[2]\n\n                // Validate address\n                validateAddress()\n\n                // Validate amount\n                validateAmount()\n            }\n        }\n    })\n\n\n    watch(computed(() => isFormValid.value), () => {\n        if (isFormValid.value) {\n            // Set messeges\n            msgAny.value = [{\n                typeUrl: '/cosmos.bank.v1beta1.MsgSend',\n                value: {\n                    fromAddress: store.currentAddress,\n                    toAddress: address.value,\n                    amount: [{\n                        denom: balance.denom,\n                        amount: `${parseFloat(amount.value.toString().replace(',', '.')).toFixed(balance.exponent) * Math.pow(10, balance.exponent)}`\n                    }]\n                }\n            }]\n        }\n    })\n\n\n    onUnmounted(() => {\n        // Unlisten events\n        emitter.off('auth')\n        emitter.off('close_sign_tx_modal')\n    })\n\n\n    // Validate address\n    function validateAddress() {\n        try {\n            let { prefix, data } = fromBech32(address.value)\n\n            // Check\n            if (prefix == balance.chain_info.bech32_prefix && data.length == store.networks[store.currentNetwork].address_length) {\n                // Toggle classes\n                addressInput.value.classList.remove('error')\n\n                return true\n            }\n        } catch (error) {\n            // Toggle classes\n            addressInput.value.classList.add('error')\n\n            return false\n        }\n    }\n\n\n    // Set MAX amount\n    function setMaxAmount() {\n        // Set amount status\n        isAmountReady.value = false\n\n        setTimeout(() => {\n            // Set amount\n            amount.value = formatTokenAmount(balance.amount, balance.exponent)\n\n            // Set amount status\n            isAmountReady.value = true\n        })\n    }\n\n\n    // Validate amount\n    function validateAmount() {\n        // Set amount status\n        isAmountReady.value = false\n\n        setTimeout(() => {\n            // Negative value\n            if (amount.value.length && amount.value <= 0) {\n                // Set empty\n                amount.value = ''\n            }\n\n            // Acceptable value\n            if (amount.value.length && amount.value > 0 && amount.value < formatTokenAmount(balance.amount, balance.exponent)){\n                // Set amount status\n                isAmountReady.value = true\n            }\n\n            // More than available balance\n            if (amount.value > formatTokenAmount(balance.amount, balance.exponent)) {\n                // Set MAX amount\n                setMaxAmount()\n            }\n        })\n    }\n\n\n    // Send tokens\n    async function send() {\n        // Set process status\n        isProcess.value = true\n\n        try {\n            // Update TxFee info\n            if (store.TxFee.isRemember) {\n                await store.updateTxFeeInfo()\n            }\n\n            // Sign Tx\n            let txBytes = await signTx(msgAny.value, memo.value)\n\n            // Clean notifications\n            notification.notify({\n                group: 'default',\n                clean: true\n            })\n\n            // Show notification\n            notification.notify({\n                group: 'default',\n                speed: 200,\n                duration: -100,\n                title: i18n.global.t('message.notification_tx_pending_title'),\n                type: 'pending',\n                data: {\n                    explorer_link: getExplorerLink(store.currentNetwork)\n                }\n            })\n\n            // Send Tx\n            sendTx(txBytes).catch(error => {\n                console.log(error)\n\n                // Show error\n                showError(error)\n            })\n\n            // Check Tx result\n            store.checkTxResult()\n\n            // Redirect\n            router.push('/account')\n        } catch (error) {\n            console.log(error)\n\n            // Show error\n            showError(error)\n        }\n    }\n\n\n    // Show error message\n    function showError(error) {\n        // Set process status\n        isProcess.value = false\n\n        // Get error code\n        let errorText = ''\n\n        // Get error title\n        error.code\n            ? errorText = i18n.global.t(`message.notification_tx_error_${error.code}`)\n            : errorText = i18n.global.t('message.notification_tx_error_rejected')\n\n        // Clean notifications\n        notification.notify({\n            group: 'default',\n            clean: true\n        })\n\n        // Show notification\n        notification.notify({\n            group: 'default',\n            speed: 200,\n            duration: 6000,\n            title: i18n.global.t('message.notification_tx_error_title'),\n            text: errorText,\n            type: 'error'\n        })\n\n        // Clear tx hash\n        store.networks[store.currentNetwork].currentTxHash = null\n\n        // Reset Tx Fee\n        store.resetTxFee()\n    }\n\n\n    // Event \"auth\"\n    emitter.on('auth', () => {\n        // Hide SignTx modal\n        showSignTxModal.value = false\n\n        // Send tokens\n        send()\n    })\n\n\n    // Event \"close_sign_tx_modal\"\n    emitter.on('close_sign_tx_modal', () => {\n        // Hide SignTx modal\n        showSignTxModal.value = false\n    })\n</script>\n\n\n<style scoped>\n    .send\n    {\n        background: none;\n    }\n\n\n    .token_wrap\n    {\n        display: block;\n\n        margin-bottom: 20px;\n        padding: 1px;\n\n        text-decoration: none;\n\n        color: currentColor;\n        border-radius: 12px;\n        background: linear-gradient(to bottom,  #5e33cf 0%,#210750 100%);\n    }\n\n\n    .token\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: flex-start;\n\n        padding-right: 9px;\n\n        border-radius: 11px;\n        background: radial-gradient(130.57% 114.69% at 50% 0%, rgba(148, 56, 248, .70) 0%, rgba(89, 21, 167, .70) 50.94%, rgba(53, 12, 107, .70) 85.09%);\n    }\n\n\n    .token .logo\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 55px;\n        height: 55px;\n        margin-right: 8px;\n        padding: 8px;\n\n        border-radius: 11px;\n    }\n\n\n    .token .logo img\n    {\n        display: block;\n\n        max-width: 100%;\n        max-height: 100%;\n    }\n\n\n    .token .denom\n    {\n        font-size: 16px;\n        font-weight: 500;\n\n        text-transform: uppercase;\n    }\n\n\n    .token .amount\n    {\n        font-size: 18px;\n        font-weight: 500;\n\n        margin-left: auto;\n\n        text-align: right;\n        white-space: nowrap;\n    }\n\n\n    .token .amount .cost\n    {\n        font-size: 16px;\n        font-weight: 400;\n\n        color: #836b9e;\n    }\n\n\n\n    .address .input.big\n    {\n        padding-right: 55px;\n    }\n\n\n\n    .amount_field\n    {\n        margin-top: 10px;\n    }\n\n\n    .amount_field .cost\n    {\n        margin-left: auto;\n\n        color: rgba(255, 255, 255, .70);\n    }\n\n\n\n    .memo_field\n    {\n        margin-top: 10px;\n        margin-bottom: auto;\n    }\n\n\n    .field\n    {\n        position: relative;\n\n        padding: 1px;\n\n        border-radius: 10px;\n        background: linear-gradient(to bottom,  #5d33ce 0%,#200750 100%);\n    }\n\n\n    .input\n    {\n        border-radius: 9px;\n        background: #170232;\n    }\n\n\n    .btns\n    {\n        margin-top: 0;\n        padding: 0;\n    }\n</style>","import script from \"./Send.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Send.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Send.vue?vue&type=style&index=0&id=d311eb52&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-d311eb52\"]])\n\nexport default __exports__"],"names":["openScanner","Telegram","WebApp","showScanQrPopup","text","__exports__","store","useGlobalStore","router","useRouter","route","useRoute","emitter","inject","i18n","notification","useNotification","balance","balances","find","denom","query","addressInput","ref","address","amount","memo","showSignTxModal","msgAny","isProcess","isAmountReady","isFormValid","computed","value","validateAddress","prefix","data","fromBech32","chain_info","bech32_prefix","length","networks","currentNetwork","address_length","classList","remove","error","add","setMaxAmount","setTimeout","formatTokenAmount","exponent","validateAmount","async","send","TxFee","isRemember","updateTxFeeInfo","txBytes","signTx","notify","group","clean","speed","duration","title","global","t","type","explorer_link","getExplorerLink","sendTx","catch","console","log","showError","checkTxResult","push","errorText","code","currentTxHash","resetTxFee","onBeforeMount","parsedData","split","watch","typeUrl","fromAddress","currentAddress","toAddress","parseFloat","toString","replace","toFixed","Math","pow","onUnmounted","off","on"],"sourceRoot":""}