{"version":3,"file":"js/254.e55ad408.js","mappings":"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","sources":["webpack://cosmos-telegram-signer/./src/components/Search.vue","webpack://cosmos-telegram-signer/./src/components/Search.vue?0923","webpack://cosmos-telegram-signer/./src/components/account/AvailableTokensItem.vue","webpack://cosmos-telegram-signer/./src/components/account/AvailableTokensItem.vue?9683","webpack://cosmos-telegram-signer/./src/components/account/AvailableTokens.vue","webpack://cosmos-telegram-signer/./src/components/account/AvailableTokens.vue?8e74","webpack://cosmos-telegram-signer/./src/components/account/QRCodeScanner.vue","webpack://cosmos-telegram-signer/./src/components/account/QRCodeScanner.vue?400c","webpack://cosmos-telegram-signer/./src/components/modal/TokensModal.vue","webpack://cosmos-telegram-signer/./src/components/modal/TokensModal.vue?b4fc","webpack://cosmos-telegram-signer/./src/views/Send.vue","webpack://cosmos-telegram-signer/./src/views/Send.vue?74fd"],"sourcesContent":["<template>\n    <!-- Search -->\n    <div class=\"search\">\n        <!-- Search back button -->\n        <button class=\"back_btn\" @click.prevent=\"setBlurEvent\">\n            <span><svg><use xlink:href=\"@/assets/sprite.svg#ic_arrow_hor\"></use></svg></span>\n        </button>\n\n        <!-- Search field -->\n        <div class=\"field\">\n            <!-- Search field icon -->\n            <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_search\"></use></svg>\n\n            <!-- Search field input -->\n            <input type=\"text\" v-model=\"query\" class=\"input\" :placeholder=\"$t('message.search_placeholder')\"\n                @focus=\"setFocusEvent\"\n                @blur=\"setBlurEvent\"\n                @input=\"setEnterEvent\">\n\n            <!-- Search field clear button -->\n            <button class=\"clear_btn\" v-if=\"query.length\" @click.prevent=\"clearField()\">\n                <svg><use xlink:href=\"@/assets/sprite.svg#ic_close\"></use></svg>\n            </button>\n        </div>\n    </div>\n</template>\n\n\n<script setup>\n    import { ref, inject } from 'vue'\n\n\n    const props = defineProps(['source']),\n        emitter = inject('emitter'),\n        query = ref('')\n\n\n    // Set focus event\n    function setFocusEvent() {\n        // Set event \"search_focus\"\n        setTimeout(() => emitter.emit('search_focus'), 100)\n    }\n\n\n    // Set blur event\n    function setBlurEvent() {\n        // Set event \"search_blur\"\n        setTimeout(() => emitter.emit('search_blur'), 100)\n    }\n\n\n    // Set event \"search\"\n    function setEnterEvent() {\n        emitter.emit('search', {\n            query: query.value,\n            source: props.source\n        })\n    }\n\n\n    // Clear field\n    function clearField() {\n        //clear query\n        query.value = ''\n\n        /// Set event \"search\"\n        emitter.emit('search', {\n            query: query.value,\n            source: props.source\n        })\n    }\n</script>\n\n\n<style scoped>\n    .search\n    {\n        position: sticky;\n        z-index: 5;\n        top: 0;\n\n        padding: 12px 0;\n\n        background: #170232;\n    }\n\n\n    .search ::-webkit-input-placeholder\n    {\n        color: rgba(255,255,255,.6);\n    }\n\n    .search :-moz-placeholder\n    {\n        color: rgba(255,255,255,.6);\n    }\n\n    .search ::-moz-placeholder\n    {\n        opacity: 1;\n        color: rgba(255,255,255,.6);\n    }\n\n    .search :-ms-input-placeholder\n    {\n        color: rgba(255,255,255,.6);\n    }\n\n\n    .search .back_btn\n    {\n        position: absolute;\n        z-index: 1;\n        top: 0;\n        bottom: 0;\n        left: 0;\n\n        visibility: hidden;\n\n        width: 28px;\n        height: 28px;\n        margin: auto 0;\n        padding: 1px;\n\n        transition: .2s linear;\n\n        opacity: 0;\n        border-radius: 50%;\n        background: linear-gradient(to bottom,  #5c32cc 0%,#210750 100%);\n    }\n\n\n    .search .back_btn span\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 26px;\n        height: 26px;\n\n        border-radius: 50%;\n        background: radial-gradient(130.57% 114.69% at 50% 0%, rgba(148, 56, 248, .70) 0%, rgba(89, 21, 167, .70) 50.94%, rgba(53, 12, 107, .70) 85.09%);\n    }\n\n\n    .search .back_btn svg\n    {\n        display: block;\n\n        width: 20px;\n        height: 20px;\n    }\n\n\n    .searching .search .back_btn\n    {\n        visibility: visible;\n\n        opacity: 1;\n    }\n\n\n    .search .field\n    {\n        position: relative;\n        z-index: 2;\n\n        width: 100%;\n        margin-left: auto;\n        padding: 1px;\n\n        transition: width .2s linear;\n\n        border-radius: 23px;\n        background: linear-gradient(to bottom,  #5c32cc 0%,#210750 100%);\n    }\n\n\n    .searching .search .field\n    {\n        width: calc(100% - 40px);\n    }\n\n\n    .search .icon\n    {\n        position: absolute;\n        z-index: 3;\n        top: 0;\n        bottom: 0;\n        left: 10px;\n\n        display: block;\n\n        width: 16px;\n        height: 16px;\n        margin: auto 0;\n\n        pointer-events: none;\n    }\n\n\n    .search .input\n    {\n        font-family: var(--font_family);\n        font-size: 16px;\n        font-weight: 500;\n\n        display: block;\n\n        width: 100%;\n        height: 28px;\n        padding: 0 39px 2px;\n\n        color: #fff;\n        border: none;\n        border-radius: 23px;\n        background: radial-gradient(130.57% 114.69% at 50% 0%, rgba(148, 56, 248, .70) 0%, rgba(89, 21, 167, .70) 50.94%, rgba(53, 12, 107, .70) 85.09%);\n    }\n\n\n    .clear_btn\n    {\n        position: absolute;\n        z-index: 2;\n        top: 0;\n        right: 6px;\n        bottom: 0;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 24px;\n        height: 24px;\n        margin: auto 0;\n    }\n\n\n    .clear_btn svg\n    {\n        display: block;\n\n        width: 18px;\n        height: 18px;\n    }\n</style>","import script from \"./Search.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Search.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Search.vue?vue&type=style&index=0&id=aba77f5c&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-aba77f5c\"]])\n\nexport default __exports__","<template>\n    <router-link :to=\"`/account/send?denom=${props.balance.denom}`\" class=\"token_wrap\" :class=\"{ current: isCurrentToken(props.balance.denom) }\">\n        <div class=\"token\">\n            <!-- Token logo -->\n            <div class=\"logo\">\n                <img :src=\"props.balance.token_info.logo_URIs.svg\" alt=\"\" loading=\"lazy\">\n\n                <!-- Token check -->\n                <div class=\"check\" v-if=\"isCurrentToken(props.balance.denom)\">\n                    <svg><use xlink:href=\"@/assets/sprite.svg#ic_check\"></use></svg>\n                </div>\n            </div>\n\n            <!-- Token denom -->\n            <div class=\"denom\">\n                {{ props.balance.token_info.symbol }}\n            </div>\n\n            <!-- Token amount -->\n            <div class=\"amount\">\n                <!-- Token amount value -->\n                <div class=\"val\">\n                    {{ formatTokenAmount(props.balance.amount, props.balance.exponent).toLocaleString('ru-RU', { maximumFractionDigits: 7 }).replace(',', '.') }}\n                </div>\n\n                <!-- Token amount cost -->\n                <div class=\"cost\">\n                    {{ formatTokenCost(calcTokenCost(props.balance.token_info.symbol, props.balance.amount, props.balance.exponent)) }}\n\n                    {{ store.currentCurrencySymbol }}\n                </div>\n            </div>\n        </div>\n    </router-link>\n</template>\n\n\n<script setup>\n    import { useGlobalStore } from '@/store'\n    import { formatTokenAmount, formatTokenCost, calcTokenCost } from '@/utils'\n\n\n    const props = defineProps({\n        balance: {\n            type: Object,\n            default: () => ({})\n        },\n        currentToken: {\n            type: Object,\n            default: () => ({\n                denom: ''\n            })\n        }\n    }),\n        store = useGlobalStore()\n\n\n    // Is current token\n    function isCurrentToken(denom) {\n        return denom === props.currentToken.denom\n    }\n</script>\n\n\n<style scoped>\n    .token_wrap\n    {\n        display: block;\n\n        padding: 1px;\n\n        text-decoration: none;\n\n        color: currentColor;\n        border-radius: 12px;\n        background: linear-gradient(to bottom,  #5e33cf 0%,#210750 100%);\n    }\n\n\n    .token\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: flex-start;\n\n        padding-right: 9px;\n\n        border-radius: 11px;\n        background: radial-gradient(130.57% 114.69% at 50% 0%, rgba(148, 56, 248, .70) 0%, rgba(89, 21, 167, .70) 50.94%, rgba(53, 12, 107, .70) 85.09%);\n    }\n\n\n    .token .logo\n    {\n        position: relative;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 55px;\n        height: 55px;\n        margin-right: 8px;\n        padding: 8px;\n\n        border-radius: 11px;\n    }\n\n\n    .token .logo img\n    {\n        display: block;\n\n        max-width: 100%;\n        max-height: 100%;\n    }\n\n\n    .token .check\n    {\n        position: absolute;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: calc(100% - 8px);\n        height: calc(100% - 8px);\n        margin: auto;\n\n        border-radius: 50%;\n        background: rgba(53, 12, 107, .65);\n\n        inset: 0;\n    }\n\n\n    .token .check svg\n    {\n        display: block;\n\n        width: 20px;\n        height: 20px;\n    }\n\n\n    .token .denom\n    {\n        font-size: 16px;\n        font-weight: 500;\n\n        text-transform: uppercase;\n    }\n\n\n    .token .amount\n    {\n        font-size: 18px;\n        font-weight: 500;\n\n        margin-left: auto;\n\n        text-align: right;\n        white-space: nowrap;\n    }\n\n\n    .token .amount .cost\n    {\n        font-size: 16px;\n        font-weight: 400;\n\n        color: #836b9e;\n    }\n\n\n    .token_wrap:active,\n    .token_wrap.current\n    {\n        background: linear-gradient(180deg, #dc92fe 0%, #310446 100%);\n    }\n\n    .token_wrap:active .token,\n    .token_wrap.current .token\n    {\n        background: linear-gradient(180deg, #af60d3 0%, #56007e 100%);\n    }\n</style>","import script from \"./AvailableTokensItem.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AvailableTokensItem.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./AvailableTokensItem.vue?vue&type=style&index=0&id=2a50009b&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-2a50009b\"]])\n\nexport default __exports__","<template>\n    <!-- Available tokens -->\n    <section class=\"available_tokens\">\n        <div class=\"cont\">\n            <!-- Search -->\n            <Search source=\"availables\" />\n\n            <!-- Loader -->\n            <Loader v-if=\"!store.isInitialized || !store.isBalancesGot\" />\n\n            <!-- Tokens -->\n            <div class=\"tokens\" v-else>\n                <!-- Tokens count -->\n                <div class=\"count\" v-if=\"searchResult.length === store.balances.length\">\n                    <b>{{ store.balances.length }}</b> {{ $t('message.available_tokens_title') }}\n                </div>\n\n                <!-- Tokens list -->\n                <div class=\"list\" v-if=\"searchResult.length\">\n                    <!-- Tokens item -->\n                    <div class=\"item\" v-for=\"(balance, index) in searchResult\" :key=\"index\" :style=\"`order: ${parseInt(calcTokenCost(balance.token_info.symbol, balance.amount, balance.exponent) * -1000000)};`\">\n                        <!-- Tokens token -->\n                        <AvailableTokensItem :balance :currentToken=\"props.currentToken\" />\n                    </div>\n                </div>\n\n                <!-- Tokens empty -->\n                <div class=\"empty\" v-else>\n                    {{ $t('message.search_empty') }}\n                </div>\n            </div>\n        </div>\n    </section>\n</template>\n\n\n<script setup>\n    import { inject, watch, ref, computed, onBeforeMount } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { calcTokenCost } from '@/utils'\n\n    // Components\n    import Loader from '@/components/Loader.vue'\n    import Search from '@/components/Search.vue'\n    import AvailableTokensItem from '@/components/account/AvailableTokensItem.vue'\n\n\n    const props = defineProps(['currentToken']),\n        store = useGlobalStore(),\n        emitter = inject('emitter'),\n        searchResult = ref([])\n\n\n    onBeforeMount(() => {\n        if (store.isBalancesGot) {\n            // Default search result\n            searchResult.value = store.balances\n        }\n    })\n\n\n    watch(computed(() => store.isBalancesGot), () => {\n        if (store.isBalancesGot) {\n            // Default search result\n            searchResult.value = store.balances\n        }\n    })\n\n\n    // Event \"search\"\n    emitter.on('search', ({ query, source }) => {\n        if (source === 'availables') {\n            // Clear search result\n            searchResult.value = []\n\n            // Set new result\n            for (let key in store.balances) {\n                if (store.balances[key].token_info.symbol.toLocaleLowerCase().includes(query.toLocaleLowerCase())) {\n                    searchResult.value.push(store.balances[key])\n                }\n            }\n        }\n    })\n</script>\n\n\n<style scoped>\n    .loader_wrap\n    {\n        position: relative;\n\n        height: auto;\n        padding: 20px;\n\n        background: none;\n    }\n\n\n    .available_tokens\n    {\n        position: relative;\n        z-index: 9;\n\n        flex: 1 0 auto;\n\n        background: #170232;\n    }\n\n\n    .searching .available_tokens\n    {\n        overflow: auto;\n        flex: none;\n\n        height: var(--tg-viewport-stable-height);\n        margin-bottom: -14px;\n        padding-bottom: 14px;\n\n        overscroll-behavior-y: contain;\n    }\n\n\n    .empty\n    {\n        font-size: 20px;\n        font-weight: 500;\n\n        padding: 10px;\n\n        text-align: center;\n\n        opacity: .7;\n    }\n\n\n\n    .searching .tokens\n    {\n        margin: 0;\n    }\n\n\n    .tokens .count\n    {\n        font-size: 14px;\n\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n\n        padding: 2px 10px;\n\n        color: rgba(255,255,255,.6);\n\n        gap: 4px;\n    }\n\n\n    .tokens .count b\n    {\n        color: #fff;\n    }\n\n\n    .tokens .list\n    {\n        display: flex;\n        flex-direction: column;\n    }\n\n\n    .tokens .list > *\n    {\n        margin-top: 8px;\n    }\n\n\n\n    .inside_modal .cont\n    {\n        padding: 0;\n    }\n\n\n    .inside_modal .tokens .count\n    {\n        display: none;\n    }\n</style>","import script from \"./AvailableTokens.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AvailableTokens.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./AvailableTokens.vue?vue&type=style&index=0&id=96d84aba&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-96d84aba\"]])\n\nexport default __exports__","<template>\n    <!-- QR code button -->\n    <button class=\"btn\" @click.prevent=\"openScanner()\">\n        <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_scaner\"></use></svg>\n    </button>\n</template>\n\n\n<script setup>\n    // Open QR popup\n    function openScanner() {\n        Telegram.WebApp.showScanQrPopup({ text: '' })\n    }\n</script>\n\n\n<style scoped>\n    .btn\n    {\n        position: absolute;\n        z-index: 9;\n        top: 17px;\n        right: 60px;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 28px;\n        height: 28px;\n        margin-left: auto;\n\n        transition: .2s linear;\n\n        background: url(@/assets/bg_action_btn.svg) 0 0/100% 100% no-repeat;\n    }\n\n\n    .btn.in_field\n    {\n        top: 0;\n        right: 16px;\n        bottom: 0;\n\n        margin: auto 0;\n\n        background: none;\n    }\n\n\n    .btn .icon\n    {\n        display: block;\n\n        width: 14px;\n        height: 14px;\n    }\n\n\n    .btn:active\n    {\n        color: #5b3895;\n        background: url(@/assets/bg_action_btn_a.svg) 0 0/100% 100% no-repeat;\n    }\n</style>","import script from \"./QRCodeScanner.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./QRCodeScanner.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./QRCodeScanner.vue?vue&type=style&index=0&id=1412c06e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-1412c06e\"]])\n\nexport default __exports__","<template>\n    <!-- Tokens page -->\n    <section class=\"page_container inner_page_container tokens_page\">\n        <div class=\"cont\">\n            <!-- Tokens page head -->\n            <div class=\"head\">\n                <!-- Back button -->\n                <button class=\"back_btn\" @click=\"emitter.emit('close_tokens_modal')\">\n                    <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_arrow_hor\"></use></svg>\n                </button>\n\n                <!-- Tokens page title -->\n                <div class=\"page_title\">\n                    {{ $t('message.tokens_page_title') }}\n                </div>\n            </div>\n\n            <!-- Available tokens -->\n            <AvailableTokens class=\"inside_modal\" :currentToken=\"props.currentToken\" />\n        </div>\n    </section>\n</template>\n\n\n<script setup>\n    import { inject } from 'vue'\n\n    // Components\n    import AvailableTokens from '@/components/account/AvailableTokens.vue'\n\n\n    const props = defineProps(['currentToken']),\n        emitter = inject('emitter')\n</script>\n\n\n<style scoped>\n    .tokens_page\n    {\n        position: fixed;\n        z-index: 9;\n        top: 0;\n        left: 0;\n\n        width: 100%;\n        height: 100%;\n\n        background: #170232;\n    }\n\n\n    .tokens_page .head\n    {\n        margin-bottom: 0;\n    }\n\n\n\n    .loader_wrap\n    {\n        position: relative;\n\n        height: auto;\n        padding: 20px;\n\n        background: none;\n    }\n</style>","import script from \"./TokensModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TokensModal.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TokensModal.vue?vue&type=style&index=0&id=76033aec&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-76033aec\"]])\n\nexport default __exports__","<template>\n    <!-- Send page -->\n    <section class=\"page_container inner_page_container send\">\n        <!-- Loader -->\n        <Loader v-if=\"isProcess\" />\n\n        <div class=\"cont\">\n            <!-- Send page head -->\n            <div class=\"head\">\n                <!-- Back button -->\n                <router-link to=\"/account\" class=\"back_btn\">\n                    <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_arrow_hor\"></use></svg>\n                </router-link>\n\n                <!-- Send page title -->\n                <div class=\"page_title\">\n                    {{ $t('message.send_page_title') }}\n                </div>\n            </div>\n\n\n            <!-- <pre>{{ balance }}</pre> -->\n\n\n            <!-- Send page token -->\n            <div class=\"token_wrap\" @click.prevent=\"openTokensModal()\" v-if=\"balance\">\n                <div class=\"token\">\n                    <!-- Send page token logo -->\n                    <div class=\"logo\">\n                        <img :src=\"balance.token_info.logo_URIs.svg\" alt=\"\" loading=\"lazy\">\n                    </div>\n\n                    <!-- Send page token denom -->\n                    <div class=\"denom\">\n                        {{ balance.token_info.symbol }}\n                    </div>\n\n                    <!-- Send page token amount -->\n                    <div class=\"amount\">\n                        <div class=\"val\">\n                            {{ formatTokenAmount(balance.amount, balance.exponent).toLocaleString('ru-RU', { maximumFractionDigits: 7 }).replace(',', '.') }}\n                        </div>\n\n                        <div class=\"cost\">\n                            {{ formatTokenCost(calcTokenCost(balance.token_info.symbol, balance.amount, balance.exponent)) }} {{ store.currentCurrencySymbol }}\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n            <!-- Send page default token -->\n            <div class=\"token_wrap\" @click.prevent=\"openTokensModal()\" v-else>\n                <div class=\"token\">\n                    <!-- Send page token logo -->\n                    <div class=\"logo\">\n                        <img :src=\"getNetworkLogo(store.networks[store.currentNetwork].chain_id)\" alt=\"\">\n                    </div>\n\n                    <!-- Send page token denom -->\n                    <div class=\"denom\">\n                        {{ store.networks[store.currentNetwork].token_name }}\n                    </div>\n\n                    <!-- Send page token amount -->\n                    <div class=\"amount\">\n                        <div class=\"val\">0</div>\n\n                        <div class=\"cost\">\n                            0.00 {{ store.currentCurrencySymbol }}\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n            <!-- Send page recipient address -->\n            <div class=\"address\">\n                <!-- Send page recipient address label -->\n                <div class=\"field_label\">\n                    {{ $t('message.send_address_label') }}\n                </div>\n\n                <!-- Send page recipient address field -->\n                <div class=\"field\">\n                    <input type=\"text\" class=\"input big\" v-model=\"address\" ref=\"addressInput\"\n                        @input=\"validateAddress()\"\n                        @paste=\"validateAddress()\">\n\n                    <!-- Paste button -->\n                    <button class=\"paste_btn\" @click.prevent=\"pasteFromClipboard()\">\n                        {{ $t('message.btn_paste') }}\n                    </button>\n\n                    <!-- QR code scanner -->\n                    <QRCodeScanner class=\"in_field\" />\n                </div>\n            </div>\n\n\n            <!-- Send page amount -->\n            <div class=\"amount_field\">\n                <!-- Send page amount label -->\n                <div class=\"field_label\">\n                    {{ $t('message.send_amount_label') }}\n\n                    <!-- Send page amount cost -->\n                    <div class=\"cost\">\n                        {{ formatTokenCost(calcTokenCost(store.networks[store.currentNetwork].token_name, (amount * Math.pow(10, store.networks[store.currentNetwork].exponent)), store.networks[store.currentNetwork].exponent)) }}\n\n                        {{ store.currentCurrencySymbol }}\n                    </div>\n                </div>\n\n                <!-- Send page amount field -->\n                <div class=\"field\">\n                    <input type=\"number\" inputmode=\"numeric\" class=\"input big\" v-model=\"amount\" placeholder=\"0.00\"\n                        @input=\"validateAmount()\">\n\n                    <!-- Send page amount max. button -->\n                    <button type=\"button\" class=\"max_btn\" @click.prevent=\"setMaxAmount\">\n                        {{ $t('message.btn_MAX') }}\n                    </button>\n                </div>\n            </div>\n\n\n            <!-- Send page memo -->\n            <div class=\"memo_field\">\n                <!-- Send page memo label -->\n                <div class=\"field_label\">\n                    {{ $t('message.memo_label') }}\n                </div>\n\n                <!-- Send page memo field -->\n                <div class=\"field\">\n                    <input type=\"text\" class=\"input big\" v-model=\"memo\">\n                </div>\n            </div>\n\n\n            <!-- Tx fee -->\n            <TxFee v-if=\"isFormValid\" :msgAny txType=\"send\" />\n\n\n            <!-- Send page button -->\n            <div class=\"btns\">\n                <!-- Send button -->\n                <button v-if=\"!store.networks[store.currentNetwork].currentTxHash\" class=\"btn\" @click.prevent=\"openSignTxModal()\" :class=\"{ disabled: !store.TxFee.isEnough }\">\n                    <span>{{ $t('message.btn_send') }}</span>\n                </button>\n\n                <!-- Waiting button -->\n                <button v-else class=\"btn waiting_btn\" @click.prevent=\"emitter.emit('show_collapsible_notification')\">\n                    <span>{{ $t('message.btn_waiting_tx') }}</span>\n                </button>\n            </div>\n        </div>\n    </section>\n\n\n    <!-- Validators modal -->\n    <transition name=\"from_right\">\n    <TokensModal v-if=\"showTokensModal\" :currentToken=\"balance\" />\n    </transition>\n\n    <!-- Sign transaction modal -->\n    <transition name=\"modal\">\n    <SignTxModal v-if=\"showSignTxModal\"/>\n    </transition>\n\n    <!-- Overlay -->\n    <transition name=\"fade\">\n    <div class=\"modal_overlay\" @click.prevent=\"emitter.emit('close_any_modal')\" v-if=\"showSignTxModal\"></div>\n    </transition>\n</template>\n\n\n<script setup>\n    import { ref, inject, watch, onMounted, computed, onUnmounted } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { useRouter, useRoute } from 'vue-router'\n    import { useNotification } from '@kyvg/vue3-notification'\n    import { fromBech32 } from '@cosmjs/encoding'\n    import { calcTokenCost, formatTokenCost, formatTokenAmount, signTx, sendTx, getExplorerLink, getNetworkLogo } from '@/utils'\n\n    // Components\n    import Loader from '@/components/Loader.vue'\n    import TokensModal from '@/components/modal/TokensModal.vue'\n    import TxFee from '@/components/TxFee.vue'\n    import SignTxModal from '@/components/modal/SignTxModal.vue'\n    import QRCodeScanner from '@/components/account/QRCodeScanner.vue'\n\n\n    const store = useGlobalStore(),\n        router = useRouter(),\n        route = useRoute(),\n        emitter = inject('emitter'),\n        i18n = inject('i18n'),\n        notification = useNotification(),\n        balance = ref(store.balances.find(balance => balance.denom === route.query.denom)),\n        addressInput = ref(null),\n        address = ref(route.query.address || ''),\n        amount = ref(route.query.amount || ''),\n        memo = ref(''),\n        showTokensModal = ref(false),\n        showSignTxModal = ref(false),\n        msgAny = ref([]),\n        isProcess = ref(false),\n        isAmountReady = ref(false),\n        isAddressValid = ref(false),\n        isFormValid = ref(computed(() => isAmountReady.value && isAddressValid.value))\n\n\n    onMounted(() => {\n        // Validate address\n        if (address.value) {\n            validateAddress()\n        }\n\n        // Validate amount\n        if (amount.value) {\n            validateAmount()\n        }\n\n        // Qr code received\n        Telegram.WebApp.onEvent('qrTextReceived', () => {\n            // Update data\n            updateData()\n        })\n    })\n\n\n    onUnmounted(() => {\n        // Unlisten events\n        emitter.off('auth')\n        emitter.off('close_sign_tx_modal')\n\n        Telegram.WebApp.offEvent('qrTextReceived')\n    })\n\n\n    watch(computed(() => route.query.denom), () => {\n        // Update data\n        updateData()\n    })\n\n\n    watch(computed(() => route.query.address), () => {\n        // Update data\n        updateData()\n    })\n\n\n    watch(computed(() => isFormValid.value), () => {\n        if (isFormValid.value) {\n            // Set messeges\n            msgAny.value = [{\n                typeUrl: '/cosmos.bank.v1beta1.MsgSend',\n                value: {\n                    fromAddress: store.currentAddress,\n                    toAddress: address.value,\n                    amount: [{\n                        denom: balance.value.denom,\n                        amount: `${parseFloat(amount.value.toString().replace(',', '.')).toFixed(balance.value.exponent) * Math.pow(10, balance.value.exponent)}`\n                    }]\n                }\n            }]\n        }\n    })\n\n\n    // Update data\n    function updateData() {\n        // Reset data\n        address.value = ''\n        amount.value = ''\n        memo.value = ''\n        isProcess.value = false\n        isAmountReady.value = false\n        isAddressValid.value = false\n\n        // Remove error classes\n        addressInput.value.classList.remove('error')\n\n        // Update balance\n        balance.value = store.balances.find(balance => balance.denom === route.query.denom)\n\n        // Parse query data\n        if (route.query.address) {\n            // Set data\n            address.value = route.query.address\n\n            // Validate address\n            validateAddress()\n        }\n\n        // if (route.query.amount) {\n        //     // Set data\n        //     amount.value = route.query.amount\n\n        //     // Validate amount\n        //     validateAmount()\n        // }\n\n        // Close any modals\n        emitter.emit('close_any_modal')\n    }\n\n\n    // Validate address\n    function validateAddress() {\n        try {\n            let { prefix, data } = fromBech32(address.value)\n\n            // Check\n            if (prefix == store.networks[store.currentNetwork].prefix && data.length == store.networks[store.currentNetwork].address_length) {\n                // Toggle classes\n                addressInput.value.classList.remove('error')\n\n                // Address status\n                isAddressValid.value = true\n            } else {\n                // Toggle classes\n                addressInput.value.classList.add('error')\n\n                // Address status\n                isAddressValid.value = false\n            }\n        } catch (error) {\n            // Toggle classes\n            addressInput.value.classList.add('error')\n\n            // Address status\n            isAddressValid.value = false\n        }\n    }\n\n\n    // Set MAX amount\n    function setMaxAmount() {\n        // Set amount status\n        isAmountReady.value = false\n\n        setTimeout(() => {\n            // Set amount\n            amount.value = formatTokenAmount(balance.value.amount, balance.value.exponent)\n\n            // Set amount status\n            isAmountReady.value = true\n        })\n    }\n\n\n    // Validate amount\n    function validateAmount() {\n        // Set amount status\n        isAmountReady.value = false\n\n        setTimeout(() => {\n            // Negative value\n            if (amount.value.length && amount.value <= 0) {\n                // Set empty\n                amount.value = ''\n            }\n\n            // Acceptable value\n            if (amount.value && amount.value > 0 && amount.value < formatTokenAmount(balance.value.amount, balance.value.exponent)){\n                // Set amount status\n                isAmountReady.value = true\n            }\n\n            // More than available balance\n            if (amount.value > formatTokenAmount(balance.value.amount, balance.value.exponent)) {\n                // Set MAX amount\n                setMaxAmount()\n            }\n        })\n    }\n\n\n    // Paste from clipboard\n    function pasteFromClipboard() {\n        navigator.clipboard.readText().then(clipboardData => {\n            // Validate address\n            try {\n                let { prefix, data } = fromBech32(clipboardData)\n\n                // Check\n                if (prefix == store.networks[store.currentNetwork].prefix && data.length == store.networks[store.currentNetwork].address_length) {\n                    // Set data\n                    address.value = clipboardData\n                } else {\n                    // Show notification\n                    notification.notify({\n                        group: 'default',\n                        speed: 200,\n                        duration: 1000,\n                        title: i18n.global.t('message.notification_tx_error_title'),\n                        text: i18n.global.t('message.notification_error_invalid_paste_title'),\n                        type: 'error'\n                    })\n                }\n            } catch (error) {\n                // Show notification\n                notification.notify({\n                    group: 'default',\n                    speed: 200,\n                    duration: 1000,\n                    title: i18n.global.t('message.notification_tx_error_title'),\n                    text: i18n.global.t('message.notification_error_invalid_paste_title'),\n                    type: 'error'\n                })\n            }\n        })\n    }\n\n\n    // Send tokens\n    async function send() {\n        // Set process status\n        isProcess.value = true\n\n        try {\n            // Update TxFee info\n            if (store.TxFee.isRemember) {\n                await store.updateTxFeeInfo()\n            }\n\n            // Sign Tx\n            let txBytes = await signTx(msgAny.value, memo.value)\n\n            // Clean notifications\n            notification.notify({\n                group: 'default',\n                clean: true\n            })\n\n            // Show notification\n            notification.notify({\n                group: 'default',\n                speed: 200,\n                duration: -100,\n                title: i18n.global.t('message.notification_tx_pending_title'),\n                type: 'pending',\n                data: {\n                    isCollapsible: true,\n                    explorer_link: getExplorerLink(store.currentNetwork)\n                }\n            })\n\n            // Send Tx\n            sendTx(txBytes).catch(error => {\n                console.log(error)\n\n                // Show error\n                showError(error)\n            })\n\n            // Check Tx result\n            store.checkTxResult()\n\n            // Redirect\n            router.push('/account')\n        } catch (error) {\n            console.log(error)\n\n            // Show error\n            showError(error)\n        }\n    }\n\n\n    // Show error message\n    function showError(error) {\n        // Set process status\n        isProcess.value = false\n\n        // Get error code\n        let errorText = ''\n\n        // Get error title\n        error.code\n            ? errorText = i18n.global.t(`message.notification_tx_error_${error.code}`)\n            : errorText = i18n.global.t('message.notification_tx_error_rejected')\n\n        // Clean notifications\n        notification.notify({\n            group: 'default',\n            clean: true\n        })\n\n        // Show notification\n        notification.notify({\n            group: 'default',\n            speed: 200,\n            duration: 6000,\n            title: i18n.global.t('message.notification_tx_error_title'),\n            text: errorText,\n            type: 'error'\n        })\n\n        // Clear tx hash\n        store.networks[store.currentNetwork].currentTxHash = null\n\n        // Reset Tx Fee\n        store.resetTxFee()\n    }\n\n\n    // Open tokens modal\n    function openTokensModal() {\n        // Show tokens modal\n        showTokensModal.value = true\n    }\n\n\n    // Open SignTx modal\n    function openSignTxModal() {\n        // Show SignTx modal\n        showSignTxModal.value = true\n\n        // Update status\n        store.isAnyModalOpen = true\n    }\n\n\n    // Event \"auth\"\n    emitter.on('auth', () => {\n        // Hide SignTx modal\n        showSignTxModal.value = false\n\n        // Update status\n        store.isAnyModalOpen = false\n\n        // Send tokens\n        send()\n    })\n\n\n    // Event \"close_tokens_modal\"\n    emitter.on('close_tokens_modal', () => {\n        // Hide tokens modal\n        showTokensModal.value = false\n    })\n\n\n    // Event \"close_sign_tx_modal\"\n    emitter.on('close_sign_tx_modal', () => {\n        // Hide SignTx modal\n        showSignTxModal.value = false\n\n        // Update status\n        store.isAnyModalOpen = false\n    })\n\n\n    // Event \"close_any_modal\"\n    emitter.on('close_any_modal', () => {\n        // Hide tokens modal\n        showTokensModal.value = false\n\n        // Hide SignTx modal\n        showSignTxModal.value = false\n\n        // Update status\n        store.isAnyModalOpen = false\n    })\n</script>\n\n\n<style scoped>\n    .send\n    {\n        background: #170232;\n    }\n\n\n    .token_wrap\n    {\n        display: block;\n\n        margin-bottom: 20px;\n        padding: 1px;\n\n        text-decoration: none;\n\n        color: currentColor;\n        border-radius: 12px;\n        background: linear-gradient(to bottom,  #5e33cf 0%,#210750 100%);\n    }\n\n\n    .token\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: flex-start;\n\n        padding-right: 9px;\n\n        border-radius: 11px;\n        background: radial-gradient(130.57% 114.69% at 50% 0%, rgba(148, 56, 248, .70) 0%, rgba(89, 21, 167, .70) 50.94%, rgba(53, 12, 107, .70) 85.09%);\n    }\n\n\n    .token .logo\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 55px;\n        height: 55px;\n        margin-right: 8px;\n        padding: 8px;\n\n        border-radius: 11px;\n    }\n\n\n    .token .logo img\n    {\n        display: block;\n\n        max-width: 100%;\n        max-height: 100%;\n    }\n\n\n    .token .denom\n    {\n        font-size: 16px;\n        font-weight: 500;\n\n        text-transform: uppercase;\n    }\n\n\n    .token .amount\n    {\n        font-size: 18px;\n        font-weight: 500;\n\n        margin-left: auto;\n\n        text-align: right;\n        white-space: nowrap;\n    }\n\n\n    .token .amount .cost\n    {\n        font-size: 16px;\n        font-weight: 400;\n\n        color: #836b9e;\n    }\n\n\n\n    .address .input.big\n    {\n        padding-right: 119px;\n    }\n\n\n    .address .paste_btn\n    {\n        font-size: 16px;\n        font-weight: 500;\n\n        position: absolute;\n        z-index: 3;\n        top: 0;\n        right: 54px;\n\n        height: 100%;\n    }\n\n\n\n    .amount_field\n    {\n        margin-top: 10px;\n    }\n\n\n    .amount_field .cost\n    {\n        margin-left: auto;\n\n        color: rgba(255, 255, 255, .70);\n    }\n\n\n\n    .memo_field\n    {\n        margin-top: 10px;\n        margin-bottom: auto;\n        padding-bottom: 40px;\n    }\n\n\n    .field\n    {\n        position: relative;\n\n        padding: 1px;\n\n        border-radius: 10px;\n        background: linear-gradient(to bottom,  #5d33ce 0%,#200750 100%);\n    }\n\n\n    .input\n    {\n        border-radius: 9px;\n        background: #06000e;\n    }\n\n\n    .btns\n    {\n        margin-top: 0;\n        padding: 0;\n    }\n</style>","import script from \"./Send.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Send.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Send.vue?vue&type=style&index=0&id=831c12aa&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-831c12aa\"]])\n\nexport default __exports__"],"names":["props","__props","emitter","inject","query","ref","setFocusEvent","setTimeout","emit","setBlurEvent","setEnterEvent","value","source","clearField","__exports__","store","useGlobalStore","isCurrentToken","denom","currentToken","searchResult","onBeforeMount","isBalancesGot","balances","watch","computed","on","key","token_info","symbol","toLocaleLowerCase","includes","push","openScanner","Telegram","WebApp","showScanQrPopup","text","router","useRouter","route","useRoute","i18n","notification","useNotification","balance","find","addressInput","address","amount","memo","showTokensModal","showSignTxModal","msgAny","isProcess","isAmountReady","isAddressValid","isFormValid","updateData","classList","remove","validateAddress","prefix","data","fromBech32","networks","currentNetwork","length","address_length","add","error","setMaxAmount","formatTokenAmount","exponent","validateAmount","pasteFromClipboard","navigator","clipboard","readText","then","clipboardData","notify","group","speed","duration","title","global","t","type","async","send","TxFee","isRemember","updateTxFeeInfo","txBytes","signTx","clean","isCollapsible","explorer_link","getExplorerLink","sendTx","catch","console","log","showError","checkTxResult","errorText","code","currentTxHash","resetTxFee","openTokensModal","openSignTxModal","isAnyModalOpen","onMounted","onEvent","onUnmounted","off","offEvent","typeUrl","fromAddress","currentAddress","toAddress","parseFloat","toString","replace","toFixed","Math","pow"],"sourceRoot":""}