{"version":3,"file":"js/152.1d720cfd.js","mappings":"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","sources":["webpack://cosmos-telegram-signer/./src/components/createWallet/ImportPage.vue","webpack://cosmos-telegram-signer/./src/components/createWallet/ImportPage.vue?d825","webpack://cosmos-telegram-signer/./src/components/modal/DerivationPathModal.vue","webpack://cosmos-telegram-signer/./src/components/modal/DerivationPathModal.vue?d010"],"sourcesContent":["<template>\n    <!-- Import wallet page -->\n    <section class=\"page_container import_wallet_page\">\n        <div class=\"cont\">\n            <!-- Import wallet page title -->\n            <div class=\"page_title\">\n                {{ $t('message.import_wallet_title') }}\n            </div>\n\n            <!-- Import wallet page data -->\n            <div class=\"page_data_wrap\">\n                <div class=\"page_data\">\n                    <!-- Loader -->\n                    <Loader v-if=\"loading\" />\n\n                    <template v-else>\n                    <!-- Back button -->\n                    <router-link v-if=\"props.isAdding\" class=\"back_btn\" to=\"/add_wallet\">\n                        <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_arrow_hor\"></use></svg>\n                    </router-link>\n\n                    <router-link v-else class=\"back_btn\" to=\"/\">\n                        <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_arrow_hor\"></use></svg>\n                    </router-link>\n\n                    <!-- Tabs -->\n                    <div class=\"tabs_wrap\">\n                        <div class=\"tabs\">\n                            <!-- Tab 12 words -->\n                            <button class=\"btn\" ref=\"tab1\" @click.prevent=\"activeTab = 1\" :class=\"{ active: activeTab === 1 }\">\n                                {{ $t('message.mnemonic_tab1') }}\n                            </button>\n\n                            <!-- Tab 24 words -->\n                            <button class=\"btn\" ref=\"tab2\" @click.prevent=\"activeTab = 2\" :class=\"{ active: activeTab === 2 }\">\n                                {{ $t('message.mnemonic_tab2') }}\n                            </button>\n\n                            <!-- Tab Private Key -->\n                            <button class=\"btn\" ref=\"tab3\" @click.prevent=\"activeTab = 3\" :class=\"{ active: activeTab === 3 }\">\n                                {{ $t('message.mnemonic_tab3') }}\n                            </button>\n\n                            <!-- Tabs roller -->\n                            <div class=\"roller\" :style=\"`width: ${rollerWidth}px; left: ${rollerOffsetLeft}px;`\">\n                                <span></span>\n                            </div>\n                        </div>\n                    </div>\n\n                    <!-- Mnemonic -->\n                    <div class=\"mnemonic\" v-if=\"activeTab != 3\">\n                        <div class=\"row\">\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[0]\"\n                                    @input=\"validateWord($event.target.value, 0)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(0)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[1]\"\n                                    @input=\"validateWord($event.target.value, 1)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(1)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[2]\"\n                                    @input=\"validateWord($event.target.value, 2)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(2)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[3]\"\n                                    @input=\"validateWord($event.target.value, 3)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(3)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[4]\"\n                                    @input=\"validateWord($event.target.value, 4)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(4)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[5]\"\n                                    @input=\"validateWord($event.target.value, 5)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(5)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[6]\"\n                                    @input=\"validateWord($event.target.value, 6)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(6)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[7]\"\n                                    @input=\"validateWord($event.target.value, 7)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(7)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[8]\"\n                                    @input=\"validateWord($event.target.value, 8)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(8)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[9]\"\n                                    @input=\"validateWord($event.target.value, 9)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(9)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[10]\"\n                                    @input=\"validateWord($event.target.value, 10)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(10)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[11]\"\n                                    @input=\"validateWord($event.target.value, 11)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(11)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[12]\"\n                                    @input=\"validateWord($event.target.value, 12)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(12)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[13]\"\n                                    @input=\"validateWord($event.target.value, 13)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(13)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[14]\"\n                                    @input=\"validateWord($event.target.value, 14)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(14)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[15]\"\n                                    @input=\"validateWord($event.target.value, 15)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(15)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[16]\"\n                                    @input=\"validateWord($event.target.value, 16)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(16)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[17]\"\n                                    @input=\"validateWord($event.target.value, 17)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(17)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[18]\"\n                                    @input=\"validateWord($event.target.value, 18)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(18)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[19]\"\n                                    @input=\"validateWord($event.target.value, 19)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(19)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[20]\"\n                                    @input=\"validateWord($event.target.value, 20)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(20)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[21]\"\n                                    @input=\"validateWord($event.target.value, 21)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(21)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[22]\"\n                                    @input=\"validateWord($event.target.value, 22)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(22)\">\n                            </div>\n\n                            <!-- Mnemonic word -->\n                            <div class=\"word\" v-if=\"activeTab === 2\">\n                                <input type=\"text\" class=\"input\" v-model=\"secret[23]\"\n                                    @input=\"validateWord($event.target.value, 23)\"\n                                    @paste=\"handlePaste\" :class=\"getValidationClass(23)\">\n                            </div>\n                        </div>\n\n                        <!-- Import wallet page exp -->\n                        <div class=\"exp\" v-html=\"$t('message.import_wallet_exp')\"></div>\n                    </div>\n\n\n                    <!-- Import private key -->\n                    <div class=\"private_key\" v-else>\n                        <div class=\"field\">\n                            <!-- Import private key field -->\n                            <input type=\"text\" class=\"input big\" v-model=\"privateKey\"\n                                :class=\"{\n                                    error: !idValidPrivateKey && isTouchedPrivateKey,\n                                    success: idValidPrivateKey && isTouchedPrivateKey\n                                }\"\n                                @input=\"validatePrivateKey()\"\n                                @paste=\"validatePrivateKey()\"\n                            >\n                        </div>\n\n                        <!-- Import private key exp -->\n                        <div class=\"exp\" v-html=\"$t('message.import_wallet_exp2')\"></div>\n                    </div>\n\n\n                    <!-- Advanced -->\n                    <div class=\"advanced\" v-if=\"activeTab !== 3\">\n                        <button class=\"btn\" @click.prevent=\"showAdvanced = true\" v-if=\"!showAdvanced\">\n                            <span>{{ $t('message.btn_advanced') }}</span>\n                        </button>\n\n                        <div v-else>\n                            <div class=\"label\">\n                                {{ $t('message.create_wallet_derivation_path_label') }} <span @click.prevent=\"showDerivationPathModal = true\">?</span>\n                            </div>\n\n                            <div class=\"field\">\n                                <span>m/44'/118'/</span>\n\n                                <input type=\"text\" class=\"input\" v-model=\"derivationPathPart1\">\n\n                                <span>'/</span>\n\n                                <input type=\"text\" class=\"input\" v-model=\"derivationPathPart2\">\n\n                                <span>/</span>\n\n                                <input type=\"text\" class=\"input\" v-model=\"derivationPathPart3\">\n                            </div>\n                        </div>\n                    </div>\n\n\n                    <!-- Import wallet page button -->\n                    <div class=\"btns\">\n                        <!-- Next button -->\n                        <div class=\"btn\" :class=\"{ disabled: !isFormValid }\" @click.prevent=\"save()\">\n                            <span>{{ $t('message.btn_next') }}</span>\n                        </div>\n                    </div>\n                    </template>\n                </div>\n            </div>\n        </div>\n    </section>\n\n\n    <!-- Derivation path modal -->\n    <DerivationPathModal v-if=\"showDerivationPathModal\" />\n</template>\n\n\n<script setup>\n    import { ref, onBeforeMount, onMounted, onUnmounted, watch, computed, inject } from 'vue'\n    import { useRouter } from 'vue-router'\n    import { useGlobalStore } from '@/store'\n    import { useNotification } from '@kyvg/vue3-notification'\n    import { importWalletFromMnemonic, importWalletFromPrivateKey } from '@/utils'\n    import { fromHex } from '@cosmjs/encoding'\n    import { Secp256k1 } from '@cosmjs/crypto'\n\n    // Components\n    import Loader from '@/components/Loader.vue'\n    import DerivationPathModal from '@/components/modal/DerivationPathModal.vue'\n\n\n    const props = defineProps(['isAdding']),\n        store = useGlobalStore(),\n        router = useRouter(),\n        emitter = inject('emitter'),\n        notification = useNotification(),\n        i18n = inject('i18n'),\n        loading = ref(true),\n        activeTab = ref(1),\n        tab1 = ref(null),\n        tab2 = ref(null),\n        tab3 = ref(null),\n        tabs = [tab1, tab2, tab3],\n        rollerWidth = ref(null),\n        rollerOffsetLeft = ref(null),\n        wallet = ref(null),\n        secret = ref([]),\n        validateAllWordsResult = ref([]),\n        privateKey = ref(''),\n        idValidPrivateKey = ref(false),\n        isTouchedPrivateKey = ref(false),\n        showAdvanced = ref(false),\n        showDerivationPathModal = ref(false),\n        derivationPathPart1 = ref(0),\n        derivationPathPart2 = ref(0),\n        derivationPathPart3 = ref(0)\n\n\n    onBeforeMount(() => {\n        // Hide loader\n        loading.value = false\n    })\n\n\n    onMounted(() => {\n        // Set roller params\n        rollerWidth.value = tabs[activeTab.value - 1].value.offsetWidth\n        rollerOffsetLeft.value = tabs[activeTab.value - 1].value.offsetLeft\n\n        // Event \"close_derivation_path_modal\"\n        emitter.on('close_derivation_path_modal', closeDerivationPathModal)\n    })\n\n\n    onUnmounted(() => {\n        // Unlisten events\n        emitter.off('close_derivation_path_modal', closeDerivationPathModal)\n    })\n\n\n    watch(activeTab, () => {\n        // Reset data\n        secret.value = []\n        validateAllWordsResult.value = []\n        privateKey.value = ''\n        isTouchedPrivateKey.value = false\n\n        // Update roller params\n        rollerWidth.value = tabs[activeTab.value - 1].value.offsetWidth\n        rollerOffsetLeft.value = tabs[activeTab.value - 1].value.offsetLeft\n    })\n\n\n    // Event handler for pasting text from clipboard\n    function handlePaste(e) {\n        // Get data from the clipboard\n        let clipboardData = e.clipboardData || window.clipboardData,\n            pastedText = clipboardData.getData('text'),\n            pastedTextArr = pastedText.split(' ')\n\n        if (pastedTextArr.length == 12) {\n            // Set active tab\n            activeTab.value = 1\n\n            // Set secret\n            setTimeout(() => secret.value = pastedTextArr)\n\n            // Validate\n            setTimeout(() => validateAllWords())\n        }\n\n        if (pastedTextArr.length == 24) {\n            // Set active tab\n            activeTab.value = 2\n\n            // Set secret\n            setTimeout(() => secret.value = pastedTextArr)\n\n            // Validate\n            setTimeout(() => validateAllWords())\n        }\n    }\n\n\n    // Validate all words\n    function validateAllWords() {\n        secret.value.map((value, i) => validateWord(value, i))\n    }\n\n\n    // Validate word\n    function validateWord(str, i) {\n        let result = true\n\n        // Validate length\n        if (!str.trim().length) {\n            result = false\n        }\n\n        // Validate symbols\n        let regex = /^[a-z]+$/i\n\n        if (!regex.test(str.trim())) {\n            result = false\n        }\n\n        validateAllWordsResult.value[i] = result\n    }\n\n\n    // Get validate class\n    function getValidationClass(i) {\n        let result = validateAllWordsResult.value[i]\n\n        if (result === null || result === undefined) {\n            return ''\n        }\n\n        return result ? 'success' : 'error'\n    }\n\n\n    // Validate private key\n    async function validatePrivateKey() {\n        let result = true\n\n        try {\n            // Validate length\n            if (!privateKey.value.trim().length) {\n                result = result ? result = false : result\n            }\n\n            // Validate bytes length\n            let privateKeyParsed = fromHex(privateKey.value.trim())\n\n            if (privateKeyParsed.length !== 32) {\n                result = result ? result = false : result\n            }\n\n            // Try generate public key\n            let publicKey = await Secp256k1.makeKeypair(privateKeyParsed)\n\n            if (!publicKey) {\n                result = result ? result = false : result\n            }\n\n            // Valid status\n            idValidPrivateKey.value = result\n\n            // Touched status\n            isTouchedPrivateKey.value = true\n\n            return result\n        } catch (error) {\n            // Valid status\n            idValidPrivateKey.value = false\n\n            // Touched status\n            isTouchedPrivateKey.value = true\n\n            return false\n        }\n    }\n\n\n    // Validate form\n    const isFormValid = computed(() => {\n        let result = false\n\n        switch (activeTab.value) {\n            case 1:\n                result = secret.value.length === 12 && secret.value.every(el => el !== '')\n                break;\n\n            case 2:\n                result = secret.value.length === 24 && secret.value.every(el => el !== '')\n                break;\n\n            default:\n                result = idValidPrivateKey.value\n                break;\n        }\n\n        return result\n    })\n\n\n    // Save data\n    async function save() {\n        // Import wallet\n        if (activeTab.value != 3) {\n            // Import\n            wallet.value = await importWalletFromMnemonic(secret.value.join(' ').toLocaleLowerCase(), null, store.defaultDerivationPath)\n\n            // Save in DB\n            await store.setSecret(wallet.value.secret.data)\n\n            // Save derivation path\n            store.tempDerivationPath = `m/44'/118'/${derivationPathPart1.value}'/${derivationPathPart2.value}/${derivationPathPart3.value}`\n        } else {\n            // Import\n            wallet.value = await importWalletFromPrivateKey(privateKey.value)\n\n            // Save in DB\n            await store.setPrivateKey(privateKey.value)\n        }\n\n        if (props.isAdding) {\n            // Save in DB\n            await store.createWallet({\n                isAdding: true\n            })\n\n            // Redirect\n            router.push('/account')\n\n            // Event \"show_wallets_modal\"\n            emitter.emit('show_wallets_modal')\n\n            // Show notification\n            notification.notify({\n                group: 'default',\n                speed: 200,\n                duration: 1000,\n                title: i18n.global.t('message.notification_wallet_added_success'),\n                type: 'success',\n            })\n        } else {\n            // Redirect\n            router.push('/create_pin')\n        }\n    }\n\n\n    // Close derivation path modal\n    function closeDerivationPathModal() {\n        // Hide derivation path modal\n        showDerivationPathModal.value = false\n    }\n</script>\n\n\n<style scoped>\n    .tabs_wrap\n    {\n        margin-top: 54px;\n    }\n\n\n\n    .input\n    {\n        text-transform: lowercase;\n    }\n\n\n\n    .exp\n    {\n        font-size: 12px;\n\n        margin-top: 8px;\n    }\n\n\n\n    .advanced\n    {\n        margin-top: 25px;\n        margin-bottom: auto;\n\n        text-align: center;\n    }\n\n\n    .advanced .btn\n    {\n        font-size: 14px;\n        line-height: 10px;\n\n        padding: 1px;\n\n        cursor: pointer;\n        transition: opacity .2s linear;\n\n        border-radius: 8px;\n        background: linear-gradient(to bottom,  #da91fc 0%,#300345 100%);\n    }\n\n\n    .advanced .btn span\n    {\n        display: block;\n\n        padding: 9px 19px;\n\n        border-radius: 7px;\n        background: linear-gradient(to bottom, #ad5dd1 0%, #580280 100%);\n    }\n\n\n    .advanced .btn:active span\n    {\n        background: linear-gradient(to bottom,  #580280 0%,#ac5dd1 100%);\n    }\n\n\n    .advanced > div\n    {\n        text-align: left;\n    }\n\n\n    .advanced .label\n    {\n        font-size: 14px;\n        font-weight: 500;\n\n        margin-bottom: 10px;\n    }\n\n\n    .advanced .label span\n    {\n        line-height: 17px;\n\n        display: inline-block;\n\n        width: 17px;\n        height: 17px;\n\n        text-align: center;\n        vertical-align: middle;\n\n        border-radius: 50%;\n        background: rgba(0, 0, 0, .70);\n    }\n\n\n    .advanced .field\n    {\n        font-size: 12px;\n        font-weight: 500;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: flex-start;\n\n        padding-left: 11px;\n\n        gap: 4px;\n    }\n\n\n    .advanced .input\n    {\n        width: 66px;\n    }\n</style>","import script from \"./ImportPage.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ImportPage.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./ImportPage.vue?vue&type=style&index=0&id=1128e6fe&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-1128e6fe\"]])\n\nexport default __exports__","<template>\n    <!-- Derivation path modal -->\n    <section class=\"modal\">\n        <div class=\"modal_content\">\n            <div class=\"data\" :class=\"{ closing: isClosing }\">\n                <!-- Close button -->\n                <button class=\"close_btn\" @click.prevent=\"closeHandler()\">\n                    <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_close\"></use></svg>\n                </button>\n\n                <!-- Modal title -->\n                <div class=\"modal_title\">\n                    {{ $t('message.derivation_path_title') }}\n                </div>\n\n                <!-- Modal desc -->\n                <div class=\"modal_desc\" v-html=\"$t('message.derivation_path_desc')\"></div>\n\n                <!-- Modal buttons -->\n                <div class=\"btns\">\n                    <!-- Ok button -->\n                    <button class=\"btn\" @click.prevent=\"emitter.emit('close_derivation_path_modal')\">\n                        <span>{{ $t('message.btn_OK') }}</span>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </section>\n\n\n    <!-- Modal overlay -->\n    <div class=\"modal_overlay\" :class=\"{ closing: isClosing }\" @click.prevent=\"closeHandler()\"></div>\n</template>\n\n\n<script setup>\n    import { ref, inject } from 'vue'\n\n\n    const emitter = inject('emitter'),\n        isClosing = ref(false)\n\n\n    // Close modal\n    function closeHandler() {\n        // Closing animation\n        isClosing.value = true\n\n        setTimeout(() => {\n            // Event \"close_derivation_path_modal\"\n            emitter.emit('close_derivation_path_modal')\n        }, 200)\n    }\n</script>\n\n\n<style scoped>\n    .modal_content\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 100%;\n        height: 100%;\n        min-height: 0;\n        padding: 0;\n    }\n\n\n    .modal_content .data\n    {\n        width: 240px;\n        padding: 14px 10px 10px;\n\n        border-radius: 12px;\n    }\n\n    .modal_content .data:before\n    {\n        display: none;\n    }\n\n\n    .modal_content .close_btn\n    {\n        top: 0;\n        right: 0;\n\n        width: 52px;\n        height: 52px;\n    }\n\n\n    .modal_content .modal_title\n    {\n        font-size: 18px;\n        font-weight: 700;\n\n        text-align: center;\n    }\n\n\n    .modal_content .modal_desc\n    {\n        font-weight: 500;\n\n        margin-top: 13px;\n    }\n\n\n    ::v-deep(.modal_desc ul li)\n    {\n        position: relative;\n\n        display: block;\n        overflow: hidden;\n\n        padding-left: 20px;\n\n        list-style-type: none;\n    }\n\n\n    ::v-deep(.modal_desc ul li:before)\n    {\n        position: absolute;\n        top: 8px;\n        left: 4px;\n\n        display: block;\n\n        width: 4px;\n        height: 4px;\n\n        content: '';\n\n        border-radius: 50%;\n        background: currentColor;\n    }\n\n\n    .btns\n    {\n        margin-top: 48px;\n    }\n\n\n    .btns .btn span\n    {\n        padding: 9px;\n\n        text-transform: uppercase;\n    }\n</style>","import script from \"./DerivationPathModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./DerivationPathModal.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./DerivationPathModal.vue?vue&type=style&index=0&id=39b60e5a&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-39b60e5a\"]])\n\nexport default __exports__"],"names":["props","__props","store","useGlobalStore","router","useRouter","emitter","inject","notification","useNotification","i18n","loading","ref","activeTab","tab1","tab2","tab3","tabs","rollerWidth","rollerOffsetLeft","wallet","secret","validateAllWordsResult","privateKey","idValidPrivateKey","isTouchedPrivateKey","showAdvanced","showDerivationPathModal","derivationPathPart1","derivationPathPart2","derivationPathPart3","handlePaste","e","clipboardData","window","pastedText","getData","pastedTextArr","split","length","value","setTimeout","validateAllWords","map","i","validateWord","str","result","trim","regex","test","getValidationClass","undefined","async","validatePrivateKey","privateKeyParsed","fromHex","publicKey","Secp256k1","makeKeypair","error","onBeforeMount","onMounted","offsetWidth","offsetLeft","on","closeDerivationPathModal","onUnmounted","off","watch","isFormValid","computed","every","el","save","importWalletFromMnemonic","join","toLocaleLowerCase","defaultDerivationPath","setSecret","data","tempDerivationPath","importWalletFromPrivateKey","setPrivateKey","isAdding","createWallet","push","emit","notify","group","speed","duration","title","global","t","type","__exports__","isClosing","closeHandler"],"sourceRoot":""}