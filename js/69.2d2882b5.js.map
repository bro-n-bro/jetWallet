{"version":3,"file":"js/69.2d2882b5.js","mappings":"oqCAoJI,MAAMA,GAASC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,KAAI,GACdC,GAAaD,EAAAA,EAAAA,IAAI,IACjBE,GAAoBF,EAAAA,EAAAA,KAAI,GACxBG,GAAsBH,EAAAA,EAAAA,KAAI,GAC1BI,IAAUJ,EAAAA,EAAAA,IAAI,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,KACnCK,IAAiBL,EAAAA,EAAAA,IAAI,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,KAC1CM,IAAuBN,EAAAA,EAAAA,KAAI,IAC3B,aAAEO,KAAiBC,EAAAA,EAAAA,KAgBvB,SAASC,KAELR,EAAWS,MAAMC,OAAOC,OAClBV,EAAkBQ,OAAQ,EAC1BR,EAAkBQ,OAAQ,EAGhCP,EAAoBO,OAAQ,CAChC,CAIA,SAASG,GAAUC,EAAOC,GAClBD,EAAME,OAAON,MAAME,QAAU,GAAKG,EAAY,GAC9CD,EAAME,OAAOC,QAAQ,QAAQC,cAAc,oBAAoBH,EAAY,YAAYI,OAE/F,CAIA,SAASC,GAASN,EAAOO,GACrBC,YAAW,KAC2B,IAA9BR,EAAME,OAAON,MAAME,QAAgBS,EAAe,GAClDP,EAAME,OAAOC,QAAQ,QAAQC,cAAc,oBAAoBG,YAAuBE,QAC1F,GAER,EAvCAC,EAAAA,EAAAA,KAAcC,UAEV1B,EAAQW,OAAQ,CAAK,KAIzBgB,EAAAA,EAAAA,KAAUD,UAENnB,GAAqBI,YAAciB,SAASC,OAAOC,iBAAiBvB,oBAAoB,IAmC5F,MAAMwB,IAAgBC,EAAAA,EAAAA,KAAS,IACpB3B,GAAQM,MAAMsB,KAAK,MAAQ3B,GAAeK,MAAMsB,KAAK,MAK1DC,IAAcF,EAAAA,EAAAA,KAAS,IACgB,IAAlC1B,GAAeK,MAAM,GAAGE,QAAgBkB,GAAcpB,OAASR,EAAkBQ,QAK5Fe,eAAeS,KACNP,SAASC,OAAOC,iBAAiBM,gBAC5BR,SAASC,OAAOC,iBAAiBO,MAAKX,UACxC,IAAIY,QAAeV,SAASC,OAAOC,iBAAiBS,aAAa,CAAEC,OAAQ,iCAE3EC,MAAMH,EAAO,GAUzB,CAIAZ,eAAegB,KAEX1C,EAAQW,OAAQ,EAGhB,IAAIgC,QAAgBC,EAAAA,EAAAA,YAGdC,EAAAA,EAAAA,IAAQ,SAAU,CACpB,CAAC,UAAWF,GACZ,CAAC,YAAaG,EAAAA,EAAAA,IAAgBzC,GAAQM,MAAMsB,KAAK,IAAKU,IACtD,CAAC,OAAQzC,EAAWS,OACpB,CAAC,cAAc,KAInBH,GAAaG,OAAQ,EAGrBb,EAAOiD,KAAK,kBAChB,C,wjKCvPJ,MAAMC,IAA2B,QAAgB,GAAQ,CAAC,CAAC,YAAY,qBAEvE,S","sources":["webpack://cosmos-telegram-signer/./src/views/CreatePinPage.vue","webpack://cosmos-telegram-signer/./src/views/CreatePinPage.vue?baf1"],"sourcesContent":["<template>\n    <section class=\"page_container careate_pin_page\">\n        <div class=\"cont\">\n            <div class=\"page_title\">\n                {{ $t('message.create_pin_title') }}\n            </div>\n\n            <div class=\"page_data_wrap\">\n                <div class=\"page_data\">\n                    <Loader v-if=\"loading\" />\n\n                    <!-- <router-link class=\"back_btn\" to=\"/create_wallet\">\n                        <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_arrow_hor\"></use></svg>\n                    </router-link> -->\n\n                    <div class=\"wallet_name\">\n                        <div class=\"label\">\n                            {{ $t('message.create_pin_wallet_name_label') }}\n                        </div>\n\n                        <div class=\"field\">\n                            <input type=\"text\" class=\"input big\" v-model=\"walletName\" :placeholder=\"$t('message.create_pin_wallet_name_placeholder')\" :class=\"{ error: !idValidWalletName && isTouchedWalletName, success: idValidWalletName && isTouchedWalletName }\" @input=\"validateWalletName\">\n                        </div>\n                    </div>\n\n                    <div class=\"pin\">\n                        <div class=\"label\">\n                            {{ $t('message.create_pin_create_pin_label') }}\n                        </div>\n\n                        <div class=\"row\">\n                            <div class=\"field\">\n                                <input type=\"password\" class=\"input big\" v-model=\"pinCode[0]\" maxlength=\"1\" inputmode=\"numeric\"\n                                    @input=\"moveFocus($event, 1)\"\n                                    @keydown.backspace=\"moveBack($event, 0)\">\n                            </div>\n\n                            <div class=\"field\">\n                                <input type=\"password\" class=\"input big\" v-model=\"pinCode[1]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[0].length\"\n                                    @input=\"moveFocus($event, 2)\"\n                                    @keydown.backspace=\"moveBack($event, 1)\">\n                            </div>\n\n                            <div class=\"field\">\n                                <input type=\"password\" class=\"input big\" v-model=\"pinCode[2]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[1].length\"\n                                    @input=\"moveFocus($event, 3)\"\n                                    @keydown.backspace=\"moveBack($event, 2)\">\n                            </div>\n\n                            <div class=\"field\">\n                                <input type=\"password\" class=\"input big\" v-model=\"pinCode[3]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[2].length\"\n                                    @input=\"moveFocus($event, 4)\"\n                                    @keydown.backspace=\"moveBack($event, 3)\">\n                            </div>\n\n                            <div class=\"field\">\n                                <input type=\"password\" class=\"input big\" v-model=\"pinCode[4]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[3].length\"\n                                    @input=\"moveFocus($event, 5)\"\n                                    @keydown.backspace=\"moveBack($event, 4)\">\n                            </div>\n\n                            <div class=\"field\">\n                                <input type=\"password\" class=\"input big\" v-model=\"pinCode[5]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[4].length\"\n                                    @input=\"moveFocus($event, 6)\"\n                                    @keydown.backspace=\"moveBack($event, 5)\">\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"pin\">\n                        <div class=\"label\">\n                            {{ $t('message.create_pin_confirm_pin_label') }}\n                        </div>\n\n                        <div class=\"row\" :class=\"{ error: confirmPinCode[5].length && !isPinMatching, success: confirmPinCode[5].length && isPinMatching }\">\n                            <div class=\"field\">\n                                <input type=\"password\" class=\"input big\" v-model=\"confirmPinCode[0]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[3].length\"\n                                    @input=\"moveFocus($event, 1)\"\n                                    @keydown.backspace=\"moveBack($event, 0)\">\n                            </div>\n\n                            <div class=\"field\">\n                                <input type=\"password\" class=\"input big\" v-model=\"confirmPinCode[1]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!confirmPinCode[0].length\"\n                                    @input=\"moveFocus($event, 2)\"\n                                    @keydown.backspace=\"moveBack($event, 1)\">\n                            </div>\n\n                            <div class=\"field\">\n                                <input type=\"password\" class=\"input big\" v-model=\"confirmPinCode[2]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!confirmPinCode[1].length\"\n                                    @input=\"moveFocus($event, 3)\"\n                                    @keydown.backspace=\"moveBack($event, 2)\">\n                            </div>\n\n                            <div class=\"field\">\n                                <input type=\"password\" class=\"input big\" v-model=\"confirmPinCode[3]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!confirmPinCode[2].length\"\n                                    @input=\"moveFocus($event, 4)\"\n                                    @keydown.backspace=\"moveBack($event, 3)\">\n                            </div>\n\n                            <div class=\"field\">\n                                <input type=\"password\" class=\"input big\" v-model=\"confirmPinCode[4]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!confirmPinCode[3].length\"\n                                    @input=\"moveFocus($event, 5)\"\n                                    @keydown.backspace=\"moveBack($event, 4)\">\n                            </div>\n\n                            <div class=\"field\">\n                                <input type=\"password\" class=\"input big\" v-model=\"confirmPinCode[5]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!confirmPinCode[4].length\"\n                                    @input=\"moveFocus($event, 6)\"\n                                    @keydown.backspace=\"moveBack($event, 5)\">\n                            </div>\n                        </div>\n                    </div>\n\n                    <!-- <button class=\"biometric_btn\" :class=\"{ disabled: !isFormValid }\" @click.prevent=\"getBiometric\" v-if=\"isBiometricAvailable\">\n                        <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_biometric\"></use></svg>\n\n                        <span>{{ $t('message.btn_biometric') }}</span>\n                    </button> -->\n\n                    <button class=\"biometric_btn\" @click.prevent=\"getBiometric\">\n                        <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_biometric\"></use></svg>\n\n                        <span>{{ $t('message.btn_biometric') }}</span>\n                    </button>\n\n                    <div class=\"btns\">\n                        <button class=\"btn\" :class=\"{ disabled: !isFormValid }\" @click.prevent=\"save\">\n                            <span>{{ $t('message.btn_next') }}</span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </section>\n</template>\n\n\n<script setup>\n    import { onBeforeMount, ref, computed, onMounted } from 'vue'\n    import { useRouter } from 'vue-router'\n    import { hashDataWithKey, generateHMACKey } from '@/utils'\n    import { addData } from '@/utils/db'\n    import { useGlobalState } from '@/store'\n\n    // Components\n    import Loader from '@/components/Loader.vue'\n\n\n    const router = useRouter(),\n        loading = ref(true),\n        walletName = ref(''),\n        idValidWalletName = ref(false),\n        isTouchedWalletName = ref(false),\n        pinCode = ref(['', '', '', '', '', '']),\n        confirmPinCode = ref(['', '', '', '', '', '']),\n        isBiometricAvailable = ref(false),\n        { isAuthorized } = useGlobalState()\n\n\n    onBeforeMount(async () => {\n        // Hide loader\n        loading.value = false\n    })\n\n\n    onMounted(async () => {\n        // Get info about biomentric\n        isBiometricAvailable.value = await Telegram.WebApp.BiometricManager.isBiometricAvailable\n    })\n\n\n    // Validate wallet name\n    function validateWalletName() {\n        // Validate length\n        walletName.value.trim().length\n            ? idValidWalletName.value = true\n            : idValidWalletName.value = false\n\n        // Touched status\n        isTouchedWalletName.value = true\n    }\n\n\n    // Move focus\n    function moveFocus(event, nextIndex) {\n        if (event.target.value.length >= 1 && nextIndex < 6) {\n            event.target.closest('.row').querySelector(`.field:nth-child(${nextIndex + 1}) input`).focus()\n        }\n    }\n\n\n    // Move back\n    function moveBack(event, currentIndex) {\n        setTimeout(() => {\n            if (event.target.value.length === 0 && currentIndex > 0) {\n                event.target.closest('.row').querySelector(`.field:nth-child(${currentIndex}) input`).select()\n            }\n        })\n    }\n\n\n    // Validate pin code\n    const isPinMatching = computed(() => {\n        return pinCode.value.join('') === confirmPinCode.value.join('')\n    })\n\n\n    // Validate form\n    const isFormValid = computed(() => {\n        return confirmPinCode.value[5].length != '' && isPinMatching.value && idValidWalletName.value\n    })\n\n\n    // Get biometric\n    async function getBiometric() {\n        if (!Telegram.WebApp.BiometricManager.isInited) {\n            await Telegram.WebApp.BiometricManager.init(async () => {\n                let result = await Telegram.WebApp.BiometricManager.authenticate({ reason: 'Можно свой текст написать!!!' })\n\n                alert(result)\n            })\n        }\n\n        // if (result) {\n        //     console.log('Biometric authentication successful:', result);\n        //     alert('Authentication successful!');\n        // } else {\n        //     alert('Authentication failed.');\n        // }\n    }\n\n\n    // Save data\n    async function save() {\n        // Show loader\n        loading.value = true\n\n        // Generate HMAC key\n        let hmacKey = await generateHMACKey()\n\n        // Save in DB\n        await addData('wallet', [\n            ['hmacKey', hmacKey],\n            ['pin', await hashDataWithKey(pinCode.value.join(''), hmacKey)],\n            ['name', walletName.value],\n            ['isRegister', true]\n        ])\n\n        // Set authorized status\n        isAuthorized.value = true\n\n        // Redirect\n        router.push('/wallet_created')\n    }\n</script>\n\n\n<style scoped>\n    .pin\n    {\n        margin-top: 8px;\n    }\n\n\n    .pin .label\n    {\n        font-size: 14px;\n\n        margin-bottom: 2px;\n        padding: 0 10px;\n    }\n\n\n    .pin .row\n    {\n        flex-wrap: nowrap;\n    }\n\n\n    .pin .row > *\n    {\n        width: 100%;\n    }\n\n\n    .pin .row > * + *\n    {\n        margin-left: 10px;\n    }\n\n\n    .pin .input\n    {\n        font-size: 20px;\n\n        text-align: center;\n    }\n\n\n    .pin .error .input\n    {\n        border-color: #f00;\n    }\n\n    .pin .success .input\n    {\n        border-color: #00aa63;\n    }\n\n\n\n    .biometric_btn\n    {\n        font-size: 18px;\n        font-weight: 500;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        margin: 12px auto 0;\n\n        transition: opacity .2s linear;\n    }\n\n\n    .biometric_btn .icon\n    {\n        display: block;\n\n        width: 28px;\n        height: 28px;\n        margin-right: 12px;\n    }\n\n\n    .biometric_btn.disabled\n    {\n        pointer-events: none;\n\n        opacity: .6;\n    }\n</style>","import script from \"./CreatePinPage.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CreatePinPage.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./CreatePinPage.vue?vue&type=style&index=0&id=467094d6&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-467094d6\"]])\n\nexport default __exports__"],"names":["router","useRouter","loading","ref","walletName","idValidWalletName","isTouchedWalletName","pinCode","confirmPinCode","isBiometricAvailable","isAuthorized","useGlobalState","validateWalletName","value","trim","length","moveFocus","event","nextIndex","target","closest","querySelector","focus","moveBack","currentIndex","setTimeout","select","onBeforeMount","async","onMounted","Telegram","WebApp","BiometricManager","isPinMatching","computed","join","isFormValid","getBiometric","isInited","init","result","authenticate","reason","alert","save","hmacKey","generateHMACKey","addData","hashDataWithKey","push","__exports__"],"sourceRoot":""}