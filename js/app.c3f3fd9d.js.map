{"version":3,"file":"js/app.c3f3fd9d.js","mappings":"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","sources":["webpack://cosmos-telegram-signer/./src/locale/messages.js","webpack://cosmos-telegram-signer/./src/locale/index.js","webpack://cosmos-telegram-signer/./src/App.vue","webpack://cosmos-telegram-signer/./src/App.vue?7ccd","webpack://cosmos-telegram-signer/./src/layouts/Default.vue","webpack://cosmos-telegram-signer/./src/layouts/Default.vue?3951","webpack://cosmos-telegram-signer/./src/layouts/Account.vue","webpack://cosmos-telegram-signer/./src/layouts/Account.vue?f612","webpack://cosmos-telegram-signer/./src/router/index.js","webpack://cosmos-telegram-signer/./src/directives/v-focus.js","webpack://cosmos-telegram-signer/./src/directives/v-parallax.js","webpack://cosmos-telegram-signer/./src/directives/v-odometer.js","webpack://cosmos-telegram-signer/./src/main.js","webpack://cosmos-telegram-signer/./src/store/networks/cosmoshub.js","webpack://cosmos-telegram-signer/./src/store/networks/osmosis.js","webpack://cosmos-telegram-signer/./src/store/networks/bostrom.js","webpack://cosmos-telegram-signer/./src/store/networks/dymension.js","webpack://cosmos-telegram-signer/./src/store/networks/gravitybridge.js","webpack://cosmos-telegram-signer/./src/store/networks/neutron.js","webpack://cosmos-telegram-signer/./src/store/networks/omniflix.js","webpack://cosmos-telegram-signer/./src/store/networks/pion.js","webpack://cosmos-telegram-signer/./src/store/networks/stride.js","webpack://cosmos-telegram-signer/./src/store/index.js","webpack://cosmos-telegram-signer/./src/utils/db.js","webpack://cosmos-telegram-signer/./src/utils/generateWallet.js","webpack://cosmos-telegram-signer/./src/utils/importWalletFromMnemonic.js","webpack://cosmos-telegram-signer/./src/utils/importWalletFromPrivateKey.js","webpack://cosmos-telegram-signer/./src/utils/hashDataWithKey.js","webpack://cosmos-telegram-signer/./src/utils/generateAESKey.js","webpack://cosmos-telegram-signer/./src/utils/generateHMACKey.js","webpack://cosmos-telegram-signer/./src/utils/encryptData.js","webpack://cosmos-telegram-signer/./src/utils/decryptData.js","webpack://cosmos-telegram-signer/./src/utils/getAddress.js","webpack://cosmos-telegram-signer/./src/utils/createSinger.js","webpack://cosmos-telegram-signer/./src/utils/denomTraces.js","webpack://cosmos-telegram-signer/./src/utils/formatTokenAmount.js","webpack://cosmos-telegram-signer/./src/utils/formatTokenCost.js","webpack://cosmos-telegram-signer/./src/utils/formatTokenName.js","webpack://cosmos-telegram-signer/./src/utils/getPriceByDenom.js","webpack://cosmos-telegram-signer/./src/utils/currencyConversion.js","webpack://cosmos-telegram-signer/./src/utils/calcTokenCost.js","webpack://cosmos-telegram-signer/./src/utils/calcBalancesCost.js","webpack://cosmos-telegram-signer/./src/utils/calcStakedBalancesCost.js","webpack://cosmos-telegram-signer/./src/utils/calcRewardsBalancesCost.js","webpack://cosmos-telegram-signer/./src/utils/calcAvailableAmount.js","webpack://cosmos-telegram-signer/./src/utils/calcStakedAmount.js","webpack://cosmos-telegram-signer/./src/utils/calcUnstakingAmount.js","webpack://cosmos-telegram-signer/./src/utils/getNetworkLogo.js","webpack://cosmos-telegram-signer/./src/utils/simulateTx.js","webpack://cosmos-telegram-signer/./src/utils/signTx.js","webpack://cosmos-telegram-signer/./src/utils/sendTx.js","webpack://cosmos-telegram-signer/./src/utils/getExplorerLink.js","webpack://cosmos-telegram-signer/./src/utils/imageLoadError.js","webpack://cosmos-telegram-signer/./src/utils/imageLoadSuccess.js","webpack://cosmos-telegram-signer/./src/utils/dateCalc.js","webpack://cosmos-telegram-signer/./src/utils/convertAddress.js","webpack://cosmos-telegram-signer/./src/utils/tgInit.js","webpack://cosmos-telegram-signer/./src/components/Loader.vue","webpack://cosmos-telegram-signer/./src/components/Loader.vue?b8fd","webpack://cosmos-telegram-signer/webpack/bootstrap","webpack://cosmos-telegram-signer/webpack/runtime/amd options","webpack://cosmos-telegram-signer/webpack/runtime/chunk loaded","webpack://cosmos-telegram-signer/webpack/runtime/compat get default export","webpack://cosmos-telegram-signer/webpack/runtime/define property getters","webpack://cosmos-telegram-signer/webpack/runtime/ensure chunk","webpack://cosmos-telegram-signer/webpack/runtime/get javascript chunk filename","webpack://cosmos-telegram-signer/webpack/runtime/get mini-css chunk filename","webpack://cosmos-telegram-signer/webpack/runtime/global","webpack://cosmos-telegram-signer/webpack/runtime/hasOwnProperty shorthand","webpack://cosmos-telegram-signer/webpack/runtime/load script","webpack://cosmos-telegram-signer/webpack/runtime/make namespace object","webpack://cosmos-telegram-signer/webpack/runtime/node module decorator","webpack://cosmos-telegram-signer/webpack/runtime/publicPath","webpack://cosmos-telegram-signer/webpack/runtime/css loading","webpack://cosmos-telegram-signer/webpack/runtime/jsonp chunk loading","webpack://cosmos-telegram-signer/webpack/startup"],"sourcesContent":["export default {\n    // English\n    en: {\n        message: {\n            // Page title\n            'page_title': 'Bro wallet',\n            'create_wallet_title': 'New Recovery Phrase',\n            'create_wallet_confirm_title': 'Verify Your Recovery Phrase',\n            'create_pin_title': 'Name your wallet',\n            'wallet_created_title': 'Wallet created!',\n            'wallet_title': 'Wallet page',\n            'import_wallet_title': 'Import Existing Wallet',\n\n\n            // Age modal\n            'age_modal_text': 'Are you 18 years old?',\n\n\n            // Index page\n            'index_page_title': 'Сreation of a new wallet',\n\n\n            // Create page\n            'create_wallet_agree_label1': 'Do not share your recovery phrase with ANYONE.',\n            'create_wallet_agree_label2': 'Back up the phrase safely.',\n\n            'create_wallet_agree_checkbox1': \"I understand that I have access to my wallet solely because I possess the recovery phrase. If this phrase falls into someone else's hands, I will lose my funds.\",\n            'create_wallet_agree_checkbox2': 'I also understand that if I lose my recovery phrase, I will lose all the funds in this wallet.',\n\n\n            // Confirm page\n            'confirm_label': 'Word',\n            'confirm_exp': 'Fill out the words according to their numbers to verify that you have stored your phrase safely.',\n\n\n            // Create pin page\n            'create_pin_wallet_name_label': 'Wallet name:',\n            'create_pin_create_pin_label': 'Create pin:',\n            'create_pin_confirm_pin_label': 'Repeat pin:',\n\n            'create_pin_wallet_name_placeholder': 'Name',\n\n\n            // Auth\n            'auth_title': 'Welcome!',\n            'auth_enter_pin_label': 'Enter pin:',\n            'auth_error_warning': 'You have {count} attempts left',\n\n\n            // User lock\n            'user_lock_title': 'Account blocked!',\n            'user_lock_desc': 'Your account has been blocked for {time} minutes due to multiple authorization errors. Unlocking will occur automatically after a period of time, you do not need to do anything for this.',\n            'user_lock_timer_label': 'Time left:',\n\n\n            // Mnemonic\n            'mnemonic_tab1': '12 words',\n            'mnemonic_tab2': '24 words',\n            'mnemonic_tab3': 'Private Key',\n\n\n            // Import page\n            'import_wallet_exp': 'Enter your recovery phrase here to restore your wallet.<br> Or click on any blank and paste the entire phrase.',\n            'import_wallet_exp2': 'Enter your private key here to restore your wallet.<br> Or click on any blank and paste the entire phrase.',\n\n\n            // Account page\n            'current_balance_title': 'Current balance',\n            'stacked_balance_title': 'Total Staked',\n\n            'available_tokens_title': 'Available Balance',\n            'staked_tokens_title': 'Staked Balance',\n\n            'staked_tokens_validator_label': 'By:',\n\n\n            // Claim rewards\n            'claim_rewards_page_title': 'Claimable Staking Reward',\n            'claim_rewards_title': 'Claim Rewards',\n            'claim_rewards_not_enought': 'You don’t have enough {denom} to pay Fee',\n\n\n            // Claim confirm\n            'calim_confirm_title': 'Confirm transction',\n\n\n            // Stake\n            'stake_page_title': 'Stake',\n            'stake_confirm_page_title': 'Confirm',\n\n            'stake_current_staked_label': 'Token:',\n            'stake_APR_label': 'APR',\n            'stake_validator_label': 'Select validator:',\n            'stake_amount_label': 'Amount:',\n            'stake_unbonding_period_label': 'Unbonding Period:',\n            'stake_available_label': 'Available',\n            'stake_staked_label': 'Total Staked',\n\n            'stake_unbonding_time_unit': 'days',\n\n            'stake_validator_placeholder': 'Choose your validator',\n\n            'stake_confirm_voting_power': 'of voting power',\n            'stake_confirm_token_label': 'Token:',\n            'stake_confirm_amount_label': 'Amount:',\n            'stake_confirm_daily_profit_label': 'Daily profit:',\n            'stake_confirm_commission_label': 'Commission:',\n            'stake_confirm_unbonding_period_label': 'Unbonding Period:',\n            'stake_confirm_fee_label': 'Fee:',\n\n\n            // Unstake\n            'unstake_page_title': 'Unstake',\n            'unstake_confirm_page_title': 'Confirm',\n\n\n            // Unstaking tokens\n            'unstaking_tokens_title': 'Unstaking process',\n            'unstaking_tokens_label': 'Unstaking in progress:',\n            'unstaking_tokens_count_label': 'Unstakings:',\n            'unstaking_tokens_finish_label': 'Available in:',\n\n            'unstaking_tokens_finish_days': 'Days',\n            'unstaking_tokens_finish_day': 'Day',\n\n\n            // Send\n            'send_confirm_page_title': 'Confirm',\n\n            'send_page_tab1': 'Send',\n            'send_page_tab2': 'IBC send',\n\n            'send_destination_chain_label': 'Destination Chain:',\n            'send_address_label': 'Address:',\n            'send_amount_label': 'Amount:',\n\n            'send_destination_chain_placeholder': 'Select Chain',\n\n            'send_confirm_chain_from_label': 'From the network:',\n            'send_confirm_chain_to_label': 'To the network:',\n            'send_confirm_receiver_label': 'Receiver:',\n            'send_confirm_fee_label': 'Fee:',\n\n\n            // Receive\n            'receive_page_title': 'Receive',\n            'receive_amount_title': 'Choose your amount',\n            'receive_amount_label': 'Amount:',\n\n\n            // Redelegate\n            'redelegate_page_title': 'Switch validator',\n            'redelegate_confirm_page_title': 'Confirm',\n            'redelegate_validator_from_label': 'From:',\n            'redelegate_validator_to_label': 'To:',\n            'redelegate_confirm_token_label': 'Token:',\n            'redelegate_confirm_amount_label': 'Amount:',\n\n\n            // Tx warning\n            'tx_warning_title': 'Warning',\n            'tx_warning_desc': \"You can still try to make the transaction, but since you don't have enough tokens for gas, it may fail, or it might still go through\",\n\n\n            // Validators\n            'validators_page_title': 'Validators:',\n            'validatoes_staked_label': 'Staked:',\n            'validatoes_available_label': 'Available:',\n\n\n            // Chains\n            'chains_page_title': 'Select Chain',\n\n\n            // Stats\n            'stats_title': 'Staking Profit',\n            'stats_token_label': 'Token:',\n            'stats_available_label': 'Available:',\n            'stats_staked_label': 'Staked:',\n            'stats_personal_apr_label': 'Personal APR:',\n            'stats_daily_profit_label': 'Est. daily profit:',\n\n\n            // Profile\n            'profile_title': 'My wallets',\n\n\n            // Remove wallet\n            'remove_wallet_title': 'You are deleting wallet:',\n            'remove_wallet_desc': 'Enter the name of the wallet you want to delete. We warn you that you will not be able to return it.',\n\n            'remove_wallet_confirm_title': 'Confirm by pin',\n\n\n            // Redelegations\n            'redelegations_title': 'Active redelegations',\n\n            'redelegations_finish_days': 'Days',\n            'redelegations_finish_day': 'Day',\n\n\n            // Tokens\n            'tokens_page_title': 'Tokens:',\n\n\n            // Tx fee\n            'tx_fee_label': 'Tx Fee:',\n\n\n            // Tx fee modal\n            'tx_fee_modal_title': 'Fee Options',\n\n            'tx_fee_fee_tier_label': 'Fee tier',\n            'tx_fee_fee_token_label': 'Fee Token:',\n            'tx_fee_gas_adjustment_label': 'Gas Adjustment:',\n            'tx_fee_gas_amount_label': 'Gas Amount',\n\n            'tx_fee_remember_label': 'Remember my choise',\n            'tx_fee_auto_label': 'Auto',\n\n            'tx_fee_low_label': 'Low',\n            'tx_fee_average_label': 'Average',\n            'tx_fee_high_label': 'High',\n\n\n            // Transaction info\n            'details_label': 'Details:',\n            'memo_label': 'Memo:',\n\n\n            // Sign transaction fee\n            'sign_tx_title': 'Sign transaction',\n\n            'sign_tx_error_title': 'Incorrect pin!',\n            'sign_tx_error_desc': 'You have entered an incorrect PIN 4 times. For security reasons, you will be returned to the main screen to protect your account and prevent unauthorized access.',\n\n\n            // Add IBC channek modal\n            'add_IBC_channel_title': 'Add IBC Channel',\n\n            'add_IBC_channel_chain_label': 'Destination Channel ID',\n            'add_IBC_channel_id_label': 'Source Channel ID:',\n\n            'add_IBC_channel_error_already_exists': 'Such a pair chain_id and channel_id already exists.',\n\n\n            // Search\n            'search_placeholder': 'Search...',\n            'search_empty': 'Token not found...',\n            'search_empty_validator': 'Validator not found...',\n            'search_empty_chains': 'Chain not found...',\n\n\n            // Placeholders\n            'placeholder_address': 'Enter address',\n            'placeholder_amount': '{token} Amount',\n            'placeholder_memo': 'Required for sending to CEX',\n            'placeholder_memo2': 'Your Custom Memo',\n            'placeholder_wallet_name': 'Wallet Name',\n\n            'placeholder_chain_ID': 'Chain ID',\n            'placeholder_source_channel_ID': 'Source Channel ID',\n\n\n            // Notifications\n            'notification_copied_title': 'Copied to clipboard',\n            'notification_offline_title': 'You are offline',\n\n            'notification_wallet_added_success': 'Wallet added successfully.',\n            'notification_wallet_update_success': 'Wallet updated successfully.',\n            'notification_wallet_remove_success': '{name} deleted successfully.',\n\n            'notification_add_user_channel_success': 'IBC channel saved successfully.',\n\n            'notification_tx_pending_title': 'Transaction is pending',\n            'notification_tx_success_title': 'Success',\n            'notification_tx_error_title': 'Error:',\n\n            'notification_error_title': 'Something went wrong, try again later',\n            'notification_error_invalid_paste_title': 'Incorrect address in the clipboard',\n\n            'notification_explorer_link': 'Explorer',\n\n\n            // Buttons\n            'btn_add_new_wallet': 'Add New Wallet',\n            'btn_from_exist_wallet': 'Create from existing wallet',\n            'btn_create_wallet': 'Create new wallet',\n            'btn_import_wallet': 'Import wallet',\n            'btn_show': 'Ok. Show my phrases',\n            'btn_next': 'Next',\n            'btn_copy': 'Copy to clipboard',\n            'btn_copy_small': 'Copy',\n            'btn_join': 'Join',\n            'btn_biometric': 'Turn on biometric security',\n            'btn_biometric2': 'Use biometric',\n            'btn_login': 'Log in',\n            'btn_send': 'Send',\n            'btn_receive': 'Receive',\n            'btn_stake': 'Earn',\n            'btn_confirm_stake': 'Confirm Staking',\n            'btn_confirm_unstake': 'Confirm Unstake',\n            'btn_confirm_send': 'Confirm Send',\n            'btn_confirm_redelegate': 'Confirm',\n            'btn_confirm': 'Confirm',\n            'btn_unstake': 'Unstake',\n            'btn_redelegate': 'Switch validator',\n            'btn_claim': 'Claim',\n            'btn_approve': 'Approve',\n            'btn_reject': 'Reject',\n            'btn_json': 'View JSON',\n            'btn_close': 'Close',\n            'btn_sign': 'Sign',\n            'btn_understood': 'Understood',\n            'btn_waiting_tx': 'Waiting tx',\n            'btn_MAX': 'MAX',\n            'btn_OK': 'Ok',\n            'btn_cancel': 'Cancel',\n            'btn_amount': 'Amount',\n            'btn_share': 'Share',\n            'btn_accept': 'Accept',\n            'btn_paste': 'Paste',\n            'btn_remove': 'Delete',\n            'btn_add_chain': 'Add Chain',\n            'btn_save': 'Save',\n\n\n            'notification_tx_error_-32603': \"tx already exists in cache\",\n            'notification_tx_error_2': \"tx parse error\",\n            'notification_tx_error_3': \"invalid sequence\",\n            'notification_tx_error_4': \"unauthorized\",\n            'notification_tx_error_5': \"insufficient funds\",\n            'notification_tx_error_6': \"unknown request\",\n            'notification_tx_error_7': \"invalid address\",\n            'notification_tx_error_8': \"invalid pubkey\",\n            'notification_tx_error_9': \"unknown address\",\n            'notification_tx_error_10': \"invalid coins\",\n            'notification_tx_error_11': \"Broadcasting transaction failed: out of gas try again and increase gas amount\",\n            'notification_tx_error_12': \"memo too large\",\n            'notification_tx_error_13': \"insufficient fee\",\n            'notification_tx_error_14': \"maximum number of signatures exceeded\",\n            'notification_tx_error_15': \"no signatures supplied\",\n            'notification_tx_error_16': \"failed to marshal JSON bytes\",\n            'notification_tx_error_17': \"failed to unmarshal JSON bytes\",\n            'notification_tx_error_18': \"invalid request\",\n            'notification_tx_error_19': \"tx already in mempool\",\n            'notification_tx_error_20': \"mempool is full\",\n            'notification_tx_error_21': \"tx too large\",\n            'notification_tx_error_22': \"key not found\",\n            'notification_tx_error_23': \"invalid account password\",\n            'notification_tx_error_24': \"tx intended signer does not match the given signer\",\n            'notification_tx_error_25': \"invalid gas adjustment\",\n            'notification_tx_error_26': \"invalid height\",\n            'notification_tx_error_27': \"invalid version\",\n            'notification_tx_error_28': \"invalid chain-id\",\n            'notification_tx_error_29': \"invalid type\",\n            'notification_tx_error_30': \"tx timeout height\",\n            'notification_tx_error_31': \"unknown extension options\",\n            'notification_tx_error_32': \"incorrect account sequence\",\n            'notification_tx_error_33': \"failed packing protobuf message to Any\",\n            'notification_tx_error_34': \"failed unpacking protobuf message from Any\",\n            'notification_tx_error_35': \"internal logic error\",\n            'notification_tx_error_36': \"conflict\",\n            'notification_tx_error_37': \"feature not supported\",\n            'notification_tx_error_38': \"not found\",\n            'notification_tx_error_39': \"Internal IO error\",\n            'notification_tx_error_40': \"error in app.toml\",\n            'notification_tx_error_41': \"invalid gas limit\",\n\n            'notification_tx_error_rejected': \"The transaction has been rejected\",\n        }\n    }\n}","import { createI18n } from 'vue-i18n'\nimport VueI18nMessages from '../locale/messages'\n\n\nconst i18n = createI18n({\n    locale: 'en',\n    fallbackLocale: 'en',\n    messages: VueI18nMessages\n})\n\n\nexport default i18n","<template>\n    <!-- Loader -->\n    <Loader v-if=\"isReseting || layout === 'default-layout'\" :class=\"{ no_bg: layout === 'default-layout' }\" />\n\n    <!-- Main component -->\n    <component :is=\"layout\" v-else />\n\n    <!-- Notifications -->\n    <notifications position=\"top left\" group=\"default\" width=\"100%\" animation-type=\"velocity\" :animation=\"notificationAnimation\"\n        @start=\"notificationsOnStart($event)\"\n        @destroy=\"notificationsOnDestroy()\"\n    >\n        <template #body=\"props\">\n            <div class=\"notification\" :class=\"{\n                pending: props.item.type == 'pending',\n                success: props.item.type == 'success',\n                error: props.item.type == 'error',\n                collapsible: props.item.data.isCollapsible\n            }\">\n                <!-- Notifications icon -->\n                <div class=\"icon\" v-if=\"props.item.type == 'copied'\">\n                    <svg><use xlink:href=\"@/assets/sprite.svg#ic_notification_copied\"></use></svg>\n                </div>\n\n                <!-- Notifications icon -->\n                <div class=\"icon\" v-if=\"props.item.type == 'pending'\">\n                    <div class=\"loader\"></div>\n                </div>\n\n                <!-- Notifications icon -->\n                <div class=\"icon\" v-if=\"props.item.type == 'success'\">\n                    <svg><use xlink:href=\"@/assets/sprite.svg#ic_notification_success\"></use></svg>\n                </div>\n\n                <!-- Notifications icon -->\n                <div class=\"icon\" v-if=\"props.item.type == 'error'\">\n                    <svg><use xlink:href=\"@/assets/sprite.svg#ic_notification_error\"></use></svg>\n                </div>\n\n                <div>\n                    <!-- Notifications title -->\n                    <div class=\"title\">\n                        {{ props.item.title }} {{ props.item.text }}\n                    </div>\n\n                    <!-- Notifications explorer link -->\n                    <div class=\"explorer\" v-if=\"props.item.data.explorer_link\">\n                        <a :href=\"props.item.data.explorer_link\" target=\"_blank\" rel=\"noopener nofollow\">\n                            {{ $t('message.notification_explorer_link') }}\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </template>\n    </notifications>\n</template>\n\n\n<script setup>\n    import { ref, reactive, onBeforeMount, inject, watch, computed } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { useNotification } from '@kyvg/vue3-notification'\n    import { useRoute } from 'vue-router'\n    import { useTitle, useNetwork } from '@vueuse/core'\n    import { tgInit } from '@/utils'\n    import { DBgetData } from '@/utils/db'\n\n    // Components\n    import Loader from '@/components/Loader.vue'\n\n\n    const store = useGlobalStore(),\n        i18n = inject('i18n'),\n        route = useRoute(),\n        emitter = inject('emitter'),\n        title = useTitle(),\n        isReseting = ref(false),\n        layout = computed(() => route.meta.layout || 'default-layout'),\n        notification = useNotification(),\n        notificationTimeout = ref(null),\n        notificationAnimation = {\n            enter: { translateY: '0%' },\n            leave: { translateY: '-100%' }\n        },\n        network = reactive(useNetwork())\n\n\n    onBeforeMount(() => {\n        // Set page title\n        title.value = i18n.global.t('message.page_title')\n\n        // Telegram WebApp init\n        tgInit()\n    })\n\n\n    // Wallet change\n    watch(computed(() => store.currentWalletID), async (newValue, oldValue) => {\n        if (oldValue) {\n            // Get wallets\n            let DBWallets = await DBgetData('global', 'wallets')\n\n            if (DBWallets !== undefined) {\n                // Clean notifications\n                notification.notify({\n                    group: 'default',\n                    clean: true\n                })\n\n                // Reinit APP\n                await store.initApp()\n            }\n        }\n    })\n\n\n    // Network change\n    watch(computed(() => store.currentNetwork), async () => {\n        if (store.isInitialized || store.forcedUnlock) {\n            // Clean notifications\n            notification.notify({\n                group: 'default',\n                clean: true\n            })\n\n            // Reinit APP\n            await store.initApp()\n        }\n    })\n\n\n    // Offline mode\n    watch(computed(() => network.isOnline), async () => {\n        // Clean notifications\n        notification.notify({\n            group: 'default',\n            clean: true\n        })\n\n        // Offline\n        if (!network.isOnline) {\n            // Show notification\n            notification.notify({\n                group: 'default',\n                speed: 200,\n                duration: -100,\n                title: i18n.global.t('message.notification_offline_title'),\n                type: 'error'\n            })\n        }\n    })\n\n\n    // Notifications start event\n    function notificationsOnStart(params) {\n        // Is collapsible\n        if (params.data.isCollapsible) {\n            notificationTimeout.value = setTimeout(() => {\n                // Show collapsible notification\n                let notification = document.querySelector('.notification.collapsible')\n\n                if (notification) {\n                    // Add notification class\n                    notification.classList.add('small')\n                }\n\n                // Clear timeout\n                notificationTimeout.value = null\n            }, store.notificationsCollapsingDelay)\n        }\n    }\n\n\n    // Notifications destroy event\n    function notificationsOnDestroy() {\n        // Clear timeout\n        notificationTimeout.value = null\n    }\n\n\n    // Event \"show_collapsible_notification\"\n    emitter.on('show_collapsible_notification', () => {\n        if (!notificationTimeout.value) {\n            let notification = document.querySelector('.notification.collapsible')\n\n            if (notification) {\n                // Show collapsible notification\n                notification.classList.remove('small')\n\n                // Hide collapsible notification\n                notificationTimeout.value = setTimeout(() => {\n                    if (notification) {\n                        // Add notification class\n                        notification.classList.add('small')\n                    }\n\n                    // Clear timeout\n                    notificationTimeout.value = null\n                }, store.notificationsCollapsingDelay)\n            }\n        }\n    })\n\n\n    // Event \"start_reseting\"\n    emitter.on('start_reseting', () => {\n        // Show loader\n        isReseting.value = true\n\n        // Hide loader\n        setTimeout(() => isReseting.value = false, 300)\n    })\n</script>","import script from \"./App.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./App.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <div class=\"main\">\n        <router-view v-slot=\"{ Component }\">\n            <component :is=\"Component\" />\n        </router-view>\n    </div>\n</template>\n","import { render } from \"./Default.vue?vue&type=template&id=66ab4ff8\"\nconst script = {}\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n    <div class=\"main\">\n        <router-view v-slot=\"{ Component }\">\n            <component :is=\"Component\" />\n        </router-view>\n    </div>\n</template>\n\n\n<script setup>\n    import { ref, inject, onMounted, onUnmounted } from 'vue'\n    import { useGlobalStore } from '@/store'\n\n\n    const store = useGlobalStore(),\n        emitter = inject('emitter'),\n        startY = ref(0),\n        isPulling = ref(false),\n        threshold = 70,\n        hasUpdated = ref(false)\n\n\n    onMounted(() => {\n        // Overscroll\n        window.addEventListener('touchstart', handleTouchStart, { passive: false })\n        window.addEventListener('touchmove', handleTouchMove, { passive: false })\n        window.addEventListener('touchend', handleTouchEnd, { passive: false })\n    })\n\n\n    onUnmounted(() => {\n        window.removeEventListener('touchstart', handleTouchStart, { passive: false })\n        window.removeEventListener('touchmove', handleTouchMove, { passive: false })\n        window.removeEventListener('touchend', handleTouchEnd, { passive: false })\n    })\n\n\n    // Handle touch start\n    function handleTouchStart(e) {\n        if (window.scrollY === 0) {\n            startY.value = e.touches[0].pageY\n            isPulling.value = true\n            hasUpdated.value = false\n        }\n    }\n\n\n    // Handle touch move\n    function handleTouchMove(e) {\n        if (isPulling.value && (store.networks[store.currentNetwork].currentTxHash || store.forcedUnlock)) {\n            // Event \"show_collapsible_notification\"\n            emitter.emit('show_collapsible_notification')\n\n            return\n        }\n\n        if (!isPulling.value || hasUpdated.value) return\n\n        let currentY = e.touches[0].pageY,\n            distance = currentY - startY.value\n\n\n        if (distance > 0 && distance >= threshold) {\n            e.preventDefault()\n            e.stopPropagation()\n\n            // Close any modal\n            if (store.isAnyModalOpen) {\n                // Set event \"close_any_modal\"\n                emitter.emit('close_any_modal')\n\n                isPulling.value = false\n\n                return\n            }\n\n            // Updating flag\n            hasUpdated.value = true\n\n            // Top loader\n            let account = document.querySelector('.account_page')\n\n            if (account) {\n                account.classList.add('updating')\n\n                setTimeout(() => account.classList.remove('updating'), 500)\n\n                // Update all balances\n                store.updateAllBalances()\n            }\n        }\n    }\n\n\n    // Handle touch end\n    function handleTouchEnd(e) {\n        isPulling.value = false\n    }\n</script>\n","import script from \"./Account.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Account.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { createRouter, createWebHistory } from 'vue-router'\nimport { DBgetMultipleData } from '@/utils/db'\nimport { useGlobalStore } from '@/store'\n\nimport defaultLayout from '@/layouts/Default.vue'\nimport accountLayout from '@/layouts/Account.vue'\n\n\nconst routes = [\n    {\n\t\tpath: '/',\n\t\tname: 'MainPage',\n\t\tcomponent: () => import('../views/IndexPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['register', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/create_wallet',\n\t\tname: 'CreateWallet',\n\t\tcomponent: () => import('../views/CreateWallet/IndexPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['register', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/confirm_wallet',\n\t\tname: 'CreateWalletConfirm',\n\t\tcomponent: () => import('../views/CreateWallet/ConfirmPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['register', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/create_pin',\n\t\tname: 'CreatePin',\n\t\tcomponent: () => import('../views/CreateWallet/PinPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['register', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/wallet_created',\n\t\tname: 'CreatedWallet',\n\t\tcomponent: () => import('../views/CreateWallet/CreatedPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['not_register', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/import_wallet',\n\t\tname: 'ImportWallet',\n\t\tcomponent: () => import('../views/CreateWallet/ImportPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['register', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/auth',\n\t\tname: 'Auth',\n\t\tcomponent: () => import('../views/AuthPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['not_register', 'authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/lock',\n\t\tname: 'Lock',\n\t\tcomponent: () => import('../views/UserLockPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['not_register']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account',\n\t\tname: 'Account',\n\t\tcomponent: () => import('../views/Account/IndexPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/claim_confirm',\n\t\tname: 'ClaimConfirm',\n\t\tcomponent: () => import('../views/Account/ClaimConfirmPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/stake',\n\t\tname: 'Stake',\n\t\tcomponent: () => import('../views/Account/StakePage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/unstake',\n\t\tname: 'Unstake',\n\t\tcomponent: () => import('../views/Account/UnstakePage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/redelegate',\n\t\tname: 'Redelegate',\n\t\tcomponent: () => import('../views/Account/RedelegatePage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/receive',\n\t\tname: 'Receive',\n\t\tcomponent: () => import('../views/Account/ReceivePage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/send',\n\t\tname: 'Send',\n\t\tcomponent: () => import('../views/Account/SendPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/add_wallet',\n\t\tname: 'AddWallet',\n\t\tcomponent: () => import('../views/AddWallet/IndexPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/add_wallet/create',\n\t\tname: 'AddWalletCreate',\n\t\tcomponent: () => import('../views/AddWallet/CreatePage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/add_wallet/confirm',\n\t\tname: 'AddWalletConfirm',\n\t\tcomponent: () => import('../views/AddWallet/ConfirmPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/add_wallet/import',\n\t\tname: 'AddWalletImport',\n\t\tcomponent: () => import('../views/AddWallet/ImportPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n]\n\n\nconst router = createRouter({\n    history: createWebHistory(),\n    routes\n})\n\n\nrouter.beforeResolve(async (to, from, next) => {\n\tlet store = useGlobalStore(),\n\t\tDBData = await DBgetMultipleData('global', ['isRegister', 'isUserLock', 'userLockTimestamp', 'authTimestamp'])\n\n\t// Auto auth\n\tif (from.name !== 'Auth' && DBData.authTimestamp !== undefined && new Date() - new Date(DBData.authTimestamp) < store.authTime) {\n\t\tif (!store.isAuthorized) {\n\t\t\t// Auth\n\t\t\tawait store.auth()\n        }\n\n\t\tif (!store.isInitialized) {\n            // Init app\n            await store.initApp()\n        }\n\t}\n\n\t// Check access\n\tto.matched.some(record => {\n\t\tlet access = record.meta.accessDenied\n\n\t\tif(access.length) {\n\t\t\t// Not register\n\t\t\tif (access.includes('not_register') && DBData.isRegister == undefined) {\n\t\t\t\t// Redirect\n\t\t\t\tnext({ name: 'MainPage' })\n\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\t// Lock\n\t\t\telse if (access.includes('locked') && DBData.isUserLock && (new Date() - new Date(DBData.userLockTimestamp) < store.userLockTime)) {\n\t\t\t\t// Redirect\n\t\t\t\tnext({ name: 'Lock' })\n\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\t// Register\n\t\t\telse if (access.includes('register') && DBData.isRegister) {\n\t\t\t\t// Redirect\n\t\t\t\tnext({ name: 'Auth' })\n\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\t// Not authorized\n\t\t\telse if (access.includes('not_authorized') && !store.isAuthorized) {\n\t\t\t\t// Redirect\n\t\t\t\tnext({ name: 'Auth' })\n\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\t// Authorized\n\t\t\telse if (access.includes('authorized') && store.isAuthorized) {\n\t\t\t\t// Redirect\n\t\t\t\tnext({ name: 'Account' })\n\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tnext()\n\t\t\t}\n\t\t}\n\t})\n})\n\n\nrouter.afterEach((to) => {\n\t// Set analytics\n\tif (window._paq && process.env.VUE_APP_IS_PRODUCTION === 'true') {\n\t  // Set custom URL\n\t  window._paq.push(['setCustomUrl', window.location.href])\n\n\t  // Send page view to Matomo\n\t  window._paq.push(['trackPageView'])\n\n\t  // (Optional) Dispatch a custom event for Tag Manager\n\t  const event = new Event('matomo_spa_url_change')\n\n\t  window.dispatchEvent(event)\n\t}\n})\n\nexport default router\n","export const vFocus = {\n    mounted(el) {\n        el.focus()\n    }\n}","export const vParallax = {\n    mounted(el) {\n        window.addEventListener('scroll', function () {\n            if (window.scrollY <= el.offsetHeight) {\n                el.style.opacity = (1 - window.scrollY / (el.offsetHeight * 0.6))\n\n                el.style.transform = `translateY(-${(window.scrollY / el.offsetHeight) * 0.6 * 100}%)`\n            }\n        })\n    }\n}","export const vOdometer = {\n    mounted(el, number) {\n        if (number) {\n            // Get array\n            let numberArr = number.value.toFixed(10).split('')\n\n            // Generate base html\n            el.innerHTML = numberArr.map(char => `\n                <div class=\"digit\">\n                    <span class=\"old\">${char}</span>\n                </div>\n            `).join('')\n        }\n    },\n\n    updated(el, number) {\n        // Get array\n        let numberArr = number.value.toFixed(10).split(''),\n            oldNumberArr = number.oldValue?.toFixed(10).split('') || [],\n            maxLength = Math.max(numberArr.length, oldNumberArr.length),\n            html = '',\n            mismatchIndex = null,\n            mismatchCount = 0,\n            animationDuration = 1500,\n            animationDelay = 50\n\n\n        // Pad arrays with empty strings to maximum length\n        numberArr = numberArr.concat(Array(maxLength - numberArr.length).fill(''))\n        oldNumberArr = oldNumberArr.concat(Array(maxLength - oldNumberArr.length).fill(''))\n\n\n        // Generate html\n        el.innerHTML = numberArr.map((char, i) => {\n            // Get mismatch\n            if (mismatchIndex === null && char !== oldNumberArr[i]) {\n                mismatchIndex = i\n                mismatchCount = maxLength - i\n                animationDuration = animationDuration - animationDelay * mismatchCount\n            }\n\n            // Calc animation\n            let duration = 0\n\n            if (mismatchIndex !== null) {\n                duration = animationDuration / mismatchCount / 1000\n            }\n\n            html += `<div class=\"digit ${mismatchIndex !== null && i >= mismatchIndex ? 'animate' : ''}\">\n                        <span class=\"new\" style=\"animation-duration: ${parseFloat(duration.toFixed(2))}s; animation-delay: ${animationDelay * (i - mismatchIndex) / 1000}s;\">\n                            ${char}\n                        </span>\n\n                        <span class=\"old\" style=\"animation-duration: ${parseFloat(duration.toFixed(2))}s; animation-delay: ${animationDelay * (i - mismatchIndex) / 1000}s;\">\n                            ${oldNumberArr[i]}\n                        </span>\n                    </div>`\n        })\n\n\n        // Inner html\n        el.innerHTML = html\n    }\n}","import { createApp } from 'vue'\nimport { createPinia } from 'pinia'\n\nimport App from './App.vue'\nimport router from './router'\nimport i18n from './locale'\nimport mitt from 'mitt'\nimport Notifications from '@kyvg/vue3-notification'\nimport velocity from 'velocity-animate'\nimport { register } from 'swiper/element/bundle'\nimport VueCountdown from '@chenfengyuan/vue-countdown'\nimport VueMatomo from 'vue-matomo'\n\nimport { vFocus } from './directives/v-focus'\nimport { vParallax } from './directives/v-parallax'\nimport { vOdometer } from './directives/v-odometer'\n\n\n// Events\nconst emitter = mitt()\n\n\n// Create App\nconst app = createApp(App)\n\n\n// Pinia\nconst pinia = createPinia()\n\n\n// Vue use\napp.use(pinia)\napp.use(router)\napp.use(i18n)\napp.use(Notifications, { velocity })\napp.use(VueMatomo, {\n    host: 'https://metrics.jetwallet.app/',\n    siteId: 1\n})\n\n\n// Vue provide\napp.provide('i18n', i18n)\napp.provide('emitter', emitter)\n\n\n// Directives\napp.directive('focus', vFocus)\napp.directive('parallax', vParallax)\napp.directive('odometer', vOdometer)\n\n\n// Swiper - register\nregister()\n\n\n// VueCountdown\napp.component(VueCountdown.name, VueCountdown)\n\n\n// Mount\napp.mount('#app')","const network = {\n    name: 'Cosmos Hub',\n    lcd_api: 'https://lcd.cosmoshub-4.bronbro.io',\n    rpc_api: 'https://rpc.cosmoshub-4.bronbro.io',\n    websocket_url: 'wss://rpc.cosmoshub-4.bronbro.io:443/websocket',\n\n    denom: 'uatom',\n    token_name: 'ATOM',\n    chain_id: 'cosmoshub-4',\n    prefix: 'cosmos',\n    explorer_link: 'https://www.mintscan.io/cosmos/tx/{tx_hash}',\n    alias: 'cosmoshub',\n    exponent: 6,\n    gas_adjustment: 1.6,\n    address_length: 20,\n    gas_amount_send: 100000,\n    gas_amount_claim: 1000000,\n    gas_amount_stake: 500000,\n    gas_amount_unstake: 500000,\n    gas_amount_redelegate: 1000000,\n    is_staking_available: true\n}\n\nexport default network","const network = {\n    name: 'Osmosis',\n    lcd_api: 'https://lcd.osmosis-1.bronbro.io',\n    rpc_api: 'https://rpc.osmosis-1.bronbro.io',\n    websocket_url: 'wss://rpc.osmosis-1.bronbro.io:443/websocket',\n\n    denom: 'uosmo',\n    token_name: 'OSMO',\n    chain_id: 'osmosis-1',\n    prefix: 'osmo',\n    explorer_link: 'https://www.mintscan.io/osmosis/tx/{tx_hash}',\n    alias: 'osmosis',\n    exponent: 6,\n    gas_adjustment: 1.3,\n    address_length: 20,\n    gas_amount_send: 100000,\n    gas_amount_claim: 1000000,\n    gas_amount_stake: 500000,\n    gas_amount_unstake: 500000,\n    gas_amount_redelegate: 1000000,\n    is_staking_available: true\n}\n\nexport default network","const network = {\n    name: 'Bostrom',\n    lcd_api: 'https://lcd.bostrom.bronbro.io',\n    rpc_api: 'https://rpc.bostrom.bronbro.io',\n    websocket_url: 'wss://rpc.bostrom.bronbro.io:443/websocket',\n\n    denom: 'boot',\n    token_name: 'BOOT',\n    chain_id: 'bostrom',\n    prefix: 'bostrom',\n    explorer_link: 'https://ping.pub/bostrom/tx/{tx_hash}',\n    alias: 'bostrom',\n    exponent: 0,\n    gas_adjustment: 1.3,\n    address_length: 20,\n    gas_amount_send: 300000,\n    gas_amount_claim: 300000,\n    gas_amount_stake: 250000,\n    gas_amount_unstake: 250000,\n    gas_amount_redelegate: 300000,\n    is_staking_available: true\n}\n\nexport default network","const network = {\n    name: 'Dymension Hub',\n    lcd_api: 'https://lcd.dymension.bronbro.io',\n    rpc_api: 'https://rpc.dymension.bronbro.io',\n    websocket_url: 'wss://rpc.dymension.bronbro.io:443/websocket',\n\n    denom: 'adym',\n    token_name: 'DYM',\n    chain_id: 'dymension_1100-1',\n    prefix: 'dym',\n    explorer_link: 'https://www.mintscan.io/dymension/tx/{tx_hash}',\n    alias: 'dymension',\n    exponent: 6,\n    gas_adjustment: 1.3,\n    address_length: 20,\n    gas_amount_send: 300000,\n    gas_amount_claim: 300000,\n    gas_amount_stake: 250000,\n    gas_amount_unstake: 250000,\n    gas_amount_redelegate: 300000,\n    is_staking_available: true\n}\n\nexport default network","const network = {\n    name: 'Gravity bridge',\n    lcd_api: 'https://lcd.gravity-bridge-3.bronbro.io',\n    rpc_api: 'https://rpc.gravity-bridge-3.bronbro.io',\n    websocket_url: 'wss://rpc.gravity-bridge-3.bronbro.io:443/websocket',\n\n    denom: 'ugraviton',\n    token_name: 'GRAV',\n    chain_id: 'gravity-bridge-3',\n    prefix: 'gravity',\n    explorer_link: 'https://www.mintscan.io/gravity-bridge/tx/{tx_hash}',\n    alias: 'gravitybridge',\n    exponent: 6,\n    gas_adjustment: 1.3,\n    address_length: 20,\n    gas_amount_send: 300000,\n    gas_amount_claim: 300000,\n    gas_amount_stake: 250000,\n    gas_amount_unstake: 250000,\n    gas_amount_redelegate: 300000,\n    is_staking_available: true\n}\n\nexport default network","const network = {\n    name: 'Neutron',\n    lcd_api: 'https://lcd.neutron-1.bronbro.io',\n    rpc_api: 'https://rpc.neutron-1.bronbro.io',\n    websocket_url: 'wss://rpc.neutron-1.bronbro.io:443/websocket',\n\n    denom: 'untrn',\n    token_name: 'NTRN',\n    chain_id: 'neutron-1',\n    prefix: 'neutron',\n    explorer_link: 'https://www.mintscan.io/neutron/tx/{tx_hash}',\n    alias: 'neutron',\n    exponent: 6,\n    gas_adjustment: 1.6,\n    address_length: 20,\n    gas_amount_send: 300000,\n    gas_amount_claim: 300000,\n    gas_amount_stake: 250000,\n    gas_amount_unstake: 250000,\n    gas_amount_redelegate: 300000,\n    is_staking_available: false\n}\n\nexport default network","const network = {\n    name: 'OmniFlix',\n    lcd_api: 'https://lcd.omniflix.bronbro.io',\n    rpc_api: 'https://rpc.omniflix.bronbro.io',\n    websocket_url: 'wss://rpc.omniflix.bronbro.io:443/websocket',\n\n    denom: 'uflix',\n    token_name: 'FLIX',\n    chain_id: 'omniflixhub-1',\n    prefix: 'omniflix',\n    explorer_link: 'https://www.mintscan.io/omniflix/tx/{tx_hash}',\n    alias: 'omniflix',\n    exponent: 6,\n    gas_adjustment: 1.3,\n    address_length: 20,\n    gas_amount_send: 300000,\n    gas_amount_claim: 300000,\n    gas_amount_stake: 250000,\n    gas_amount_unstake: 250000,\n    gas_amount_redelegate: 300000,\n    is_staking_available: true\n}\n\nexport default network","const network = {\n    name: 'Pion',\n    lcd_api: 'https://lcd.pion-1.bronbro.io',\n    rpc_api: 'https://rpc.pion-1.bronbro.io',\n    websocket_url: 'wss://rpc.pion-1.bronbro.io:443/websocket',\n\n    logo: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/neutron/images/neutron-raw.svg',\n    denom: 'untrn',\n    token_name: 'NTRN',\n    chain_id: 'pion-1',\n    prefix: 'neutron',\n    explorer_link: 'https://neutron.celat.one/pion-1/txs/{tx_hash}',\n    alias: 'pion',\n    exponent: 6,\n    gas_adjustment: 1.6,\n    address_length: 20,\n    gas_amount_send: 300000,\n    gas_amount_claim: 300000,\n    gas_amount_stake: 250000,\n    gas_amount_unstake: 250000,\n    gas_amount_redelegate: 300000,\n    is_staking_available: false\n}\n\nexport default network","const network = {\n    name: 'Stride',\n    lcd_api: 'https://lcd.stride.bronbro.io',\n    rpc_api: 'https://rpc.stride.bronbro.io',\n    websocket_url: 'wss://rpc.stride.bronbro.io:443/websocket',\n\n    denom: 'ustrd',\n    token_name: 'STRD',\n    chain_id: 'stride-1',\n    prefix: 'stride',\n    explorer_link: 'https://www.mintscan.io/stride/tx/{tx_hash}',\n    alias: 'stride',\n    exponent: 6,\n    gas_adjustment: 1.3,\n    address_length: 20,\n    gas_amount_send: 300000,\n    gas_amount_claim: 300000,\n    gas_amount_stake: 250000,\n    gas_amount_unstake: 250000,\n    gas_amount_redelegate: 300000,\n    is_staking_available: true\n}\n\nexport default network","import { defineStore } from 'pinia'\nimport { getAddress, denomTraces, hashDataWithKey, generateHMACKey, generateAESKey, getPriceByDenom, getExplorerLink, encryptData, decryptData } from '@/utils'\nimport { chains, assets } from 'chain-registry'\nimport { DBaddData, DBgetMultipleData, DBgetData, DBclearAllData, DBclearStore, DBcheckStoreName, DBdeleteData } from '@/utils/db'\nimport { useNotification } from '@kyvg/vue3-notification'\nimport sss from 'shamirs-secret-sharing'\nimport i18n from '@/locale'\n\n\n// Networks\nimport cosmoshub from '@/store/networks/cosmoshub'\nimport osmosis from '@/store/networks/osmosis'\nimport bostrom from '@/store/networks/bostrom'\nimport dymension from '@/store/networks/dymension'\nimport gravitybridge from '@/store/networks/gravitybridge'\n// import localbostrom from '@/store/networks/localbostrom'\nimport neutron from '@/store/networks/neutron'\n// import mocha from '@/store/networks/mocha'\nimport omniflix from '@/store/networks/omniflix'\nimport pion from '@/store/networks/pion'\nimport stride from '@/store/networks/stride'\n\n\n// Networks additional optionsupdateUserAuthErrorLimit\nconst networksAdditionalOptions = {\n    websocket: null,\n    currentTxHash: null,\n    unbondingTime: 0,\n    totalBondedTokens: 0,\n    totalUnstakingTokens: 0,\n    isUnstakingCancelSupport: false\n}\n\n\n// Notifications\nconst notification = useNotification()\n\n\nexport const useGlobalStore = defineStore('global', {\n    state: () => ({\n        isInitializing: false,\n        isInitialized: false,\n        isBalancesGot: false,\n        isStakedBalancesGot: false,\n        isRewardsGot: false,\n        isUnstakingBalancesGot: false,\n        isAuthorized: false,\n        isAnyModalOpen: false,\n        isAgeConfirmed: false,\n\n        defaultDerivationPath: \"m/44'/118'/0'/0/0\",\n        forcedUnlock: false,\n        authErrorLimit: 4,\n        DBVersion: 1,\n\n        currentWalletID: null,\n        currentWalletDerivationPath: null,\n        currentWalletName: '',\n        currentNetwork: '',\n        currentAddress: '',\n        currentCurrency: '',\n        currentCurrencySymbol: '',\n\n        IBCSendCurrentChain: null,\n        stakeCurrentValidator: null,\n        unstakeCurrentValidator: null,\n\n        redelegateValidatorFrom: null,\n        redelegateValidatorTo: null,\n\n        wallets: [],\n        prices: [],\n        balances: [],\n        stakedBalances: [],\n        rewardsBalances: [],\n        unstakingBalances: [],\n        redelegations: [],\n\n        defaultWalletName: 'MyJetWallet',\n\n        authTime: 60 * 60 * 1000,\n        cacheTime: 15 * 60 * 1000,\n        userLockTime: 15 * 60 * 1000,\n        notificationsCollapsingDelay: 2000,\n\n        TxFee: {\n            balance: {},\n            currentLevel: 'average',\n            userGasAmount: 0,\n            gasAmount: 0,\n            isRemember: false,\n            isGasAdjustmentAuto: true,\n            isEnough: false\n        },\n\n        networks: {\n            cosmoshub: Object.assign(cosmoshub, networksAdditionalOptions),\n            osmosis: Object.assign(osmosis, networksAdditionalOptions),\n            bostrom: Object.assign(bostrom, networksAdditionalOptions),\n            dymension: Object.assign(dymension, networksAdditionalOptions),\n            gravitybridge: Object.assign(gravitybridge, networksAdditionalOptions),\n            neutron: Object.assign(neutron, networksAdditionalOptions),\n            // mocha: Object.assign(mocha, networksAdditionalOptions),\n            // localbostrom: Object.assign(localbostrom, networksAdditionalOptions)\n            omniflix: Object.assign(omniflix, networksAdditionalOptions),\n            pion: Object.assign(pion, networksAdditionalOptions),\n            stride: Object.assign(stride, networksAdditionalOptions),\n        },\n\n        formatableTokens: [\n            {\n                token_name: 'USD',\n                format_token_name: 'usdt',\n                exponent: 0\n            },\n            {\n                token_name: 'BTC',\n                format_token_name: 'wbtc',\n                exponent: 0\n            },\n            {\n                token_name: 'ETH',\n                format_token_name: 'axleth',\n                exponent: 0\n            }\n        ]\n    }),\n\n\n    actions: {\n        // Get current DB version\n        getCurrentDBVersion() {\n            // Get data from DB\n            let DBCurrentVersion = localStorage.getItem('DBVersion')\n\n            if (!DBCurrentVersion) {\n                // Save data in localStorage\n                localStorage.setItem('DBVersion', this.DBVersion)\n            } else {\n                // Set data from localStorage\n                this.DBVersion = DBCurrentVersion\n            }\n        },\n\n\n        // Set new DB version\n        setNewDBVersion() {\n            // Increase by 1\n            this.DBVersion++\n\n            // Save data in localStorage\n            localStorage.setItem('DBVersion', this.DBVersion)\n        },\n\n\n        // Get current wallet ID\n        async getCurrentWalletID() {\n            // Get data from DB\n            let DBCurrentWalletID = await DBgetData('global', 'currentWalletID')\n\n            if (DBCurrentWalletID !== undefined) {\n                // Set data from DB\n                this.currentWalletID = DBCurrentWalletID\n            }\n        },\n\n\n        // Set current wallet ID\n        async setCurrentWalletID(walletID = null) {\n            if (this.currentWalletID !== walletID) {\n                // Save in DB\n                await DBaddData('global', [\n                    ['currentWalletID', walletID]\n                ])\n\n                // Set data\n                this.currentWalletID = walletID\n            }\n        },\n\n\n        // Auth\n        async auth() {\n            let promises = []\n\n            // Сhange auth limit\n            promises.push(this.updateUserAuthErrorLimit(this.authErrorLimit))\n\n            // Save in DB\n            promises.push(DBaddData('global', [\n                ['authTimestamp', new Date().toISOString()]\n            ]))\n\n            await Promise.all(promises)\n\n            // Set authorized status\n            this.isAuthorized = true\n        },\n\n\n        // Init APP\n        async initApp() {\n            // Init status\n            this.isInitializing = true\n            this.isInitialized = false\n\n            // Forced unlock\n            this.forcedUnlock = false\n\n            // Reset data\n            this.currentAddress = ''\n\n            // Get current wallet ID\n            await this.getCurrentWalletID()\n\n            // Get DB data\n            let DBData = await DBgetMultipleData(`wallet${this.currentWalletID}`, ['derivationPath', 'name', 'currentCurrency', 'currentNetwork', 'TxFeeCurrentLevel', 'TxFeeIsRemember'])\n\n            // Set data from DB\n            this.currentWalletDerivationPath = DBData.derivationPath\n            this.currentWalletName = DBData.name\n            this.currentCurrency = DBData.currentCurrency\n            this.TxFee.currentLevel = DBData.TxFeeCurrentLevel !== undefined ? DBData.TxFeeCurrentLevel : 'average'\n            this.TxFee.isRemember = DBData.TxFeeIsRemember !== undefined ? DBData.TxFeeIsRemember : false\n\n            // Set current network\n            // Set data from DB\n            this.networks[DBData.currentNetwork]\n                ? this.currentNetwork = DBData.currentNetwork\n                : this.currentNetwork = 'cosmoshub'\n\n            try {\n                // Get current address / check cache\n                let cacheCurrentAddress = await DBgetData(`wallet${this.currentWalletID}`, `${this.currentNetwork}_currentAddress`)\n\n                if (cacheCurrentAddress === undefined) {\n                    // Get address\n                    let address = await getAddress()\n\n                    // Set current address\n                    this.currentAddress = address\n\n                    // Save in DB\n                    await DBaddData(`wallet${this.currentWalletID}`, [\n                        [`${this.currentNetwork}_currentAddress`, address]\n                    ])\n                } else {\n                    // Set current address\n                    this.currentAddress = cacheCurrentAddress\n                }\n\n\n                // Set current currency symbol\n                switch (this.currentCurrency) {\n                    case 'BTC':\n                        // Set current currency symbol\n                        this.currentCurrencySymbol = 'BTC'\n                        break\n\n                    case 'ETH':\n                        // Set current currency symbol\n                        this.currentCurrencySymbol = 'ETH'\n                        break\n\n                    default:\n                        // Set current currency symbol\n                        this.currentCurrencySymbol = '$'\n                        break\n                }\n\n\n                // Get currencies price / check cache\n                await this.getCurrenciesPrice()\n\n                // Get APR for current networke / check cache\n                await this.getCurrentNetworkAPR()\n\n                // Connect to websocket\n                await this.connectWebsocket()\n\n                // Is cosmos SDK version support unstaking cancel / check cache\n                await this.isUnstakingCancelSupport()\n\n                // Wait balances\n                if (this.networks[this.currentNetwork].is_staking_available) {\n                    Promise.all([await this.getBalances(), await this.getStakedBalances()]).then(() => {\n                        // Init status\n                        this.isInitialized = true\n                    })\n                } else {\n                    Promise.all([await this.getBalances()]).then(() => {\n                        // Init status\n                        this.isInitializing = false\n                        this.isInitialized = true\n                    })\n                }\n            } catch(error) {\n                console.log(error)\n\n                // Clean notifications\n                notification.notify({\n                    group: 'default',\n                    clean: true\n                })\n\n                // Show notification\n                notification.notify({\n                    group: 'default',\n                    speed: 200,\n                    duration: -100,\n                    title: i18n.global.t('message.notification_error_title'),\n                    type: 'error',\n                    data: {\n                        isCollapsible: true\n                    }\n                })\n\n                // Forced unlock\n                this.forcedUnlock = true\n            }\n        },\n\n\n        // Currencies price\n        async getCurrenciesPrice() {\n            // Get from DB\n            let cachePrices = await DBgetData('global', 'prices')\n\n            if (cachePrices === undefined || (new Date() - new Date(cachePrices.timestamp) > this.cacheTime)) {\n                try {\n                    // Send request\n                    await fetch('https://rpc.bronbro.io/price_feed_api/tokens/')\n                        .then(response => response.json())\n                        .then(async data => {\n                            // Set data\n                            this.prices = data\n\n                            // Save in DB\n                            await DBaddData('global', [\n                                ['prices', { data, timestamp: new Date().toISOString() }]\n                            ])\n                        })\n                } catch (error) {\n                    console.error(error)\n                }\n            } else{\n                // Set from cache\n                this.prices = cachePrices.data\n            }\n        },\n\n\n        // Get APR for current network\n        async getCurrentNetworkAPR() {\n            // Get from DB\n            let cacheAPR = await DBgetData(`wallet${this.currentWalletID}`, `${this.currentNetwork}_APR`)\n\n            // Check\n            if (cacheAPR === undefined || (new Date() - new Date(cacheAPR.timestamp) > this.cacheTime)) {\n                try {\n                    // Send request\n                    await fetch('https://rpc.bronbro.io/networks/')\n                        .then(response => response.json())\n                        .then(async data => {\n                            // Find chain\n                            let chain = data.infos.find(chain => chain.denom === (this.networks[this.currentNetwork].token_name).toLowerCase())\n\n                            if (chain) {\n                                // Set network APR\n                                this.networks[this.currentNetwork].APR = chain.apr\n\n                                // Save in DB\n                                await DBaddData(`wallet${this.currentWalletID}`, [\n                                    [`${this.currentNetwork}_APR`, JSON.parse(JSON.stringify({\n                                        value: chain.apr,\n                                        timestamp: new Date().toISOString()\n                                    }))]\n                                ])\n                            }\n                        })\n                } catch (error) {\n                    console.log(error)\n                }\n            } else {\n                // Set from cache\n                this.networks[this.currentNetwork].APR = cacheAPR.value\n            }\n        },\n\n\n        // Get balances\n        async getBalances(forceUpdate = false) {\n            // Balances status\n            this.isBalancesGot = false\n\n            // Reset data\n            this.balances = []\n\n            // Get from DB\n            let cacheBalances = await DBgetData(`wallet${this.currentWalletID}`, `${this.currentNetwork}_balances`)\n\n            if (forceUpdate || cacheBalances === undefined || (new Date() - new Date(cacheBalances.timestamp) > this.cacheTime)) {\n                // Send request\n                try {\n                    await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/bank/v1beta1/balances/${this.currentAddress}`)\n                        .then(response => response.json())\n                        .then(async data => {\n                            if (data.balances.length) {\n                                // Set data\n                                this.balances = data.balances\n\n                                for (let balance of this.balances) {\n                                    // Get balance info\n                                    await this.getBalanceInfo(balance)\n                                }\n\n                                // Clear balances\n                                this.balances = this.balances.filter(obj => obj.hasOwnProperty('exponent'))\n\n                                // Save in DB\n                                await DBaddData(`wallet${this.currentWalletID}`, [\n                                    [`${this.currentNetwork}_balances`, JSON.parse(JSON.stringify({\n                                        value: this.balances,\n                                        timestamp: new Date().toISOString()\n                                    }))]\n                                ])\n                            }\n                        })\n                } catch (error) {\n                    console.error(error)\n                }\n            } else {\n                // Set from cache\n                this.balances = cacheBalances.value\n            }\n\n            // Balances status\n            this.isBalancesGot = true\n        },\n\n\n        // Get staked balances\n        async getStakedBalances(forceUpdate = false) {\n            // Balances status\n            this.isStakedBalancesGot = false\n\n            // Reset data\n            this.stakedBalances = []\n\n            // Get from DB\n            let cacheStakedBalances = await DBgetData(`wallet${this.currentWalletID}`, `${this.currentNetwork}_stakedBalances`)\n\n            if (forceUpdate || cacheStakedBalances === undefined || (new Date() - new Date(cacheStakedBalances.timestamp) > this.cacheTime)) {\n                // Send request\n                try {\n                    await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/delegations/${this.currentAddress}`)\n                        .then(response => response.json())\n                        .then(async data => {\n                            if (data.delegation_responses) {\n                                // Set data\n                                this.stakedBalances = data.delegation_responses.filter(el => el.balance.amount > 0)\n\n                                for (let item of this.stakedBalances) {\n                                    // Get balance info\n                                    await this.getBalanceInfo(item.balance)\n\n                                    // Get validator info\n                                    await this.getValidatorInfo(item, item.delegation.validator_address)\n                                }\n\n                                // Clear balances\n                                this.stakedBalances = this.stakedBalances.filter(item => item.balance.hasOwnProperty('exponent'))\n\n                                // Save in DB\n                                await DBaddData(`wallet${this.currentWalletID}`, [\n                                    [`${this.currentNetwork}_stakedBalances`, JSON.parse(JSON.stringify({\n                                        value: this.stakedBalances,\n                                        timestamp: new Date().toISOString()\n                                    }))]\n                                ])\n                            }\n                        })\n                } catch (error) {\n                    console.error(error)\n                }\n            } else {\n                // Set from cache\n                this.stakedBalances = cacheStakedBalances.value\n            }\n\n            // Staked balances status\n            this.isStakedBalancesGot = true\n        },\n\n\n        // Get rewards\n        async getRewards() {\n            // Rewards status\n            this.isRewardsGot = false\n\n            // Reset data\n            this.rewardsBalances = []\n\n            // Request\n            try {\n                await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/distribution/v1beta1/delegators/${this.currentAddress}/rewards`)\n                    .then(response => response.json())\n                    .then(async data => {\n                        if (data.total.length) {\n                            // Set data\n                            this.rewardsBalances = data.total\n\n                            for (let balance of this.rewardsBalances) {\n                                // Get balance info\n                                await this.getBalanceInfo(balance)\n                            }\n\n                            // Clear rewards\n                            this.rewardsBalances = this.rewardsBalances.filter(balance => balance.hasOwnProperty('exponent'))\n\n                            // Filter rewards\n                            this.rewardsBalances = this.rewardsBalances.filter(balance => balance.chain_info.chain_id == this.networks[this.currentNetwork].chain_id)\n                        }\n                    })\n            } catch (error) {\n                console.error(error)\n            }\n\n            // Rewards status\n            this.isRewardsGot = true\n        },\n\n\n        // Get unstaking balances\n        async getUnstakingBalances () {\n            // Unstaking balances status\n            this.isUnstakingBalancesGot = false\n\n            // Reset data\n            this.unstakingBalances = []\n            this.networks[this.currentNetwork].totalUnstakingTokens = 0\n\n            // Request\n            try {\n                await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/delegators/${this.currentAddress}/unbonding_delegations`)\n                    .then(response => response.json())\n                    .then(async data => {\n                        // Set data\n                        this.unstakingBalances = data.unbonding_responses\n\n                        for (let item of this.unstakingBalances) {\n                            // Calc total unstaking tokens\n                            item.entries.forEach(entry => this.networks[this.currentNetwork].totalUnstakingTokens += parseInt(entry.balance))\n\n                            // Get validator info\n                            await this.getValidatorInfo(item, item.validator_address)\n                        }\n                    })\n            } catch (error) {\n                console.error(error)\n            }\n\n            // Unstaking balances status\n            this.isUnstakingBalancesGot = true\n        },\n\n\n        // Get redelegations\n        async getRedelegations() {\n            // Request\n            try {\n                await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/delegators/${this.currentAddress}/redelegations`)\n                    .then(response => response.json())\n                    .then(async data => {\n                        // Set data\n                        this.redelegations = data.redelegation_responses\n                    })\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Get balance info\n        async getBalanceInfo(balance) {\n            // Denom traces\n            let { base_denom } = await denomTraces(balance.denom, this.currentNetwork)\n\n            // Old base denom\n            balance.old_base_denom = base_denom\n\n            if (base_denom === 'share') {\n                return\n            }\n\n            // Get (token info/chain name) from assets\n            for (let asset of assets) {\n                // Exceptions\n                switch (base_denom) {\n                    case 'uusdc':\n                        var currentAsset = assets.find(el => el.chain_name === 'noble')\n                        break;\n\n                    // case 'utia':\n                    //     var currentAsset = assets.find(el => el.chain_name === 'celestiatestnet3')\n                    //     break;\n\n                    case 'udatom':\n                        var currentAsset = assets.find(el => el.chain_name === 'cosmoshub')\n\n                        base_denom = 'uatom'\n                        break;\n\n                    case 'drop':\n                        var currentAsset = assets.find(el => el.chain_name === 'celestia')\n\n                        base_denom = 'utia'\n                        break;\n\n                    case 'uboom':\n                        var currentAsset = assets.find(el => el.chain_name === 'neutron')\n\n                        base_denom = 'untrn'\n                        break;\n\n                    default:\n                        var currentAsset = asset\n                        break;\n                }\n\n                // Token info\n                let tokenInfo = currentAsset.assets.find(token => token.base === base_denom)\n\n                if (tokenInfo) {\n                    // Set data\n                    balance.token_info = tokenInfo\n                    balance.chain_name = currentAsset.chain_name\n\n                    break\n                }\n            }\n\n            if (balance.token_info) {\n                // Format denom exponent\n                let formatableToken = this.formatableTokens.find(el => el.token_name === balance.token_info.base.toUpperCase())\n\n                // Set exponent for denom\n                formatableToken\n                    ? balance.exponent = formatableToken.exponent\n                    : balance.exponent = balance.token_info.denom_units[1]?.exponent || 0\n\n                // Get chain info\n                balance.chain_info = chains.find(el => el.chain_name === balance.chain_name)\n\n                // Get price\n                balance.price = getPriceByDenom(balance.token_info.symbol)\n            }\n        },\n\n\n        // Has native token\n        hasNativeToken() {\n            return this.balances.some(balance => balance.denom == this.networks[this.currentNetwork].denom)\n        },\n\n\n        // Get validator info\n        async getValidatorInfo(item, validator_address) {\n            try {\n                await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/validators/${validator_address}`)\n                    .then(res => res.json())\n                    .then(response => {\n                        // Set data\n                        item.validator_info = response.validator\n                    })\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Get secret from DB\n        async getSecret(current = false) {\n            let DBWallets = null,\n                walletID = 0\n\n            if (!current) {\n                // Get wallets\n                DBWallets = await DBgetData('global', 'wallets')\n\n                // Get wallet ID\n                walletID = DBWallets !== undefined ? DBWallets.length + 1 : 1\n            } else {\n                walletID = this.currentWalletID\n            }\n\n            // Get from DB\n            let DBSecret = await DBgetMultipleData('secret', [\n                `wallet${walletID}_aesKey`,\n                `wallet${walletID}_secret`,\n                `wallet${walletID}_secretIV`\n            ])\n\n            // Get wallet secret part two\n            let DBSecretPartTwo = await DBgetData(`wallet${walletID}`, 'secret')\n\n            // Restore the original secret\n            let restoredSecret = sss.combine([DBSecret[`wallet${walletID}_secret`], DBSecretPartTwo])\n\n            // Convert back to Uint8Array\n            let restoredUint8Array = new Uint8Array(restoredSecret)\n\n            // Return memo\n            return await decryptData(restoredUint8Array, DBSecret[`wallet${walletID}_secretIV`], DBSecret[`wallet${walletID}_aesKey`])\n        },\n\n\n        // Get private key from DB\n        async getPrivateKey(current = false) {\n            let DBWallets = null,\n                walletID = 0\n\n            if (!current) {\n                // Get wallets\n                DBWallets = await DBgetData('global', 'wallets')\n\n                // Get wallet ID\n                walletID = DBWallets !== undefined ? DBWallets.length + 1 : 1\n            } else {\n                walletID = this.currentWalletID\n            }\n\n            // Get from DB\n            let DBSecret = await DBgetMultipleData('secret', [\n                `wallet${walletID}_aesKey`,\n                `wallet${walletID}_privateKey`,\n                `wallet${walletID}_secretIV`\n            ])\n\n            // Get wallet secret part two\n            let DBSecretPartTwo = await DBgetData(`wallet${walletID}`, 'privateKey')\n\n            // Restore the original secret\n            let restoredSecret = sss.combine([DBSecret[`wallet${walletID}_privateKey`], DBSecretPartTwo])\n\n            // Convert back to Uint8Array\n            let restoredUint8Array = new Uint8Array(restoredSecret)\n\n            // Return memo\n            return await decryptData(restoredUint8Array, DBSecret[`wallet${walletID}_secretIV`], DBSecret[`wallet${walletID}_aesKey`])\n        },\n\n\n        // Find missing wallet ID\n        async findMissingId(DBWallets = null) {\n            if (!DBWallets) {\n                // Get wallets\n                DBWallets = await DBgetData('global', 'wallets')\n            }\n\n            // Find the minimum missing value\n            let missingId = 1\n\n            if (DBWallets !== undefined) {\n                // Set IDs\n                let ids = DBWallets.map(el => el.id)\n\n                while (ids.includes(missingId)) {\n                    missingId++\n                }\n            }\n\n            // Return value\n            return missingId\n        },\n\n\n        // Find next available wallet name\n        async findNextAvailableWalletName(DBWallets = null) {\n            let i = 2,\n                name = this.defaultWalletName + i\n\n            if (!DBWallets) {\n                // Get wallets\n                DBWallets = await DBgetData('global', 'wallets')\n            }\n\n            if (DBWallets !== undefined) {\n                while (true) {\n                    name = this.defaultWalletName + i\n\n                    // Check if a wallet with this name exists\n                    if (!DBWallets.some(el => el.name === name)) {\n                        return name\n                    }\n\n                    i++\n                }\n            }\n\n            // Return value\n            return name\n        },\n\n\n        // Set secret\n        async setSecret(secret) {\n            // Generate AES key\n            let aesKey = await generateAESKey()\n\n            // Encryption\n            let { ciphertext, iv } = await encryptData(secret, aesKey)\n\n            // Split into 2 parts, both parts are required for recovery\n            let shares = sss.split(Buffer.from(ciphertext), {\n                shares: 2,\n                threshold: 2\n            })\n\n            // Get wallet ID\n            let walletID = await this.findMissingId()\n\n            // Save in DB\n            await DBaddData('secret', [\n                [`wallet${walletID}_aesKey`, aesKey],\n                [`wallet${walletID}_secret`, shares[0]],\n                [`wallet${walletID}_secretIV`, iv]\n            ])\n\n            // Check DB storeName\n            await DBcheckStoreName(`wallet${walletID}`)\n\n            // Save in DB\n            await DBaddData(`wallet${walletID}`, [\n                ['secret', shares[1]],\n                ['createdBy', 'secret']\n            ])\n        },\n\n\n        // Set private key\n        async setPrivateKey(privateKey) {\n            // Generate AES key\n            let aesKey = await generateAESKey()\n\n            // Encryption\n            let { ciphertext, iv } = await encryptData(privateKey, aesKey)\n\n            // Split into 2 parts, both parts are required for recovery\n            let shares = sss.split(Buffer.from(ciphertext), {\n                shares: 2,\n                threshold: 2\n            })\n\n            // Get wallet ID\n            let walletID = await this.findMissingId()\n\n            // Save in DB\n            await DBaddData('secret', [\n                [`wallet${walletID}_aesKey`, aesKey],\n                [`wallet${walletID}_privateKey`, shares[0]],\n                [`wallet${walletID}_secretIV`, iv]\n            ])\n\n            await DBaddData(`wallet${walletID}`, [\n                ['privateKey', shares[1]],\n                ['createdBy', 'privateKey']\n            ])\n        },\n\n\n        // Set current network\n        setCurrentNetwork(chain) {\n            // Update current network\n            this.currentNetwork = chain\n\n            // Save in DB\n            DBaddData(`wallet${this.currentWalletID}`, [\n                ['currentNetwork', chain]\n            ])\n        },\n\n\n        // Create wallet\n        async createWallet({ pinCode = null, walletName = null, isBiometricEnabled = null, isAdding = false, relativeWallet = null, derivationPath = this.defaultDerivationPath }) {\n            // Get all wallets\n            let DBWallets = await DBgetData('global', 'wallets')\n\n            if (DBWallets === undefined) {\n                // Set array type\n                DBWallets = []\n            }\n\n            // Get wallet ID\n            let walletID = await this.findMissingId(DBWallets)\n\n            // Available wallet name\n            let availableWalletName = await this.findNextAvailableWalletName()\n\n            // Update wallets\n            DBWallets.push({\n                id: walletID,\n                name: walletName || availableWalletName\n            })\n\n            // Add data to wallet DB\n            await DBaddData(`wallet${walletID}`, [\n                ['id', walletID],\n                ['name', walletName || availableWalletName],\n                ['currentNetwork', 'cosmoshub'],\n                ['currentCurrency', 'USD'],\n                ['derivationPath', derivationPath],\n                ['subWallets', JSON.parse(JSON.stringify([]))],\n                ['relativeWallet', relativeWallet]\n            ])\n\n            // Add data to global DB\n            if (!isAdding) {\n                // Generate HMAC key\n                let hmacKey = await generateHMACKey()\n\n                await DBaddData('global', [\n                    ['isRegister', true],\n                    ['currentWalletID', walletID],\n                    ['hmacKey', hmacKey],\n                    ['pin', await hashDataWithKey(pinCode.join(''), hmacKey)],\n                    ['isBiometric', isBiometricEnabled],\n                    ['authErrorLimit', this.authErrorLimit],\n                    ['wallets', DBWallets]\n                ])\n            } else {\n                await DBaddData('global', [\n                    ['wallets', DBWallets]\n                ])\n            }\n\n            // Set authorized status\n            this.isAuthorized = true\n\n            // Return wallet ID\n            return walletID\n        },\n\n\n        // Create from exist wallet\n        async createFromExistWallet() {\n            // Get secret from DB\n            let currentWalletSecret = await this.getSecret(true)\n\n            // Get sub wallets of current wallet\n            let subWallets = await DBgetData(`wallet${this.currentWalletID}`, 'subWallets')\n\n            // Set secret\n            await this.setSecret(currentWalletSecret)\n\n            // Create wallet\n            let newWalletID = await this.createWallet({\n                isAdding: true,\n                relativeWallet: this.currentWalletID,\n                derivationPath: this.defaultDerivationPath.replace(/\\/\\d+$/, `/${(subWallets.length + 1)}`)\n            })\n\n            // Add new subwallet\n            subWallets.push(newWalletID)\n\n            // Update current wallet\n            await DBaddData(`wallet${this.currentWalletID}`, [\n                ['subWallets', JSON.parse(JSON.stringify(subWallets))]\n            ])\n        },\n\n\n        // Get current wallet created by\n        async getCurrentWalletCreatedBy() {\n            // Get data from DB\n            return await DBgetData(`wallet${this.currentWalletID}`, 'createdBy')\n        },\n\n\n        // Update auth error limit\n        async updateUserAuthErrorLimit(limit) {\n            await DBaddData('global', [\n                ['authErrorLimit', limit]\n            ])\n        },\n\n\n        // Update TxFee info\n        async updateTxFeeInfo() {\n            await DBaddData(`wallet${this.currentWalletID}`, [\n                ['TxFeeCurrentLevel', this.TxFee.currentLevel],\n                ['TxFeeIsRemember', this.TxFee.isRemember]\n            ])\n        },\n\n\n        // Update current currency\n        async updateCurrentCurrency() {\n            switch (this.currentCurrency) {\n                case 'BTC':\n                    // Set current currency\n                    this.currentCurrency = 'ETH'\n\n                    // Set current currency symbol\n                    this.currentCurrencySymbol = 'ETH'\n\n                    // Update in DB\n                    DBaddData(`wallet${this.currentWalletID}`, [\n                        ['currentCurrency', 'ETH']\n                    ])\n\n                    break;\n\n                case 'ETH':\n                    // Set current currency\n                    this.currentCurrency = 'USD'\n\n                    // Set current currency symbol\n                    this.currentCurrencySymbol = '$'\n\n                    // Update in DB\n                    DBaddData(`wallet${this.currentWalletID}`, [\n                        ['currentCurrency', 'USD']\n                    ])\n\n                    break;\n\n                default:\n                    // Set current currency\n                    this.currentCurrency = 'BTC'\n\n                    // Set current currency symbol\n                    this.currentCurrencySymbol = 'BTC'\n\n                    // Update in DB\n                    DBaddData(`wallet${this.currentWalletID}`, [\n                        ['currentCurrency', 'BTC']\n                    ])\n\n                    break;\n            }\n        },\n\n\n        // Connect to websocket\n        async connectWebsocket() {\n            // Close previous connections\n            Object.values(this.networks).forEach(network => {\n                if (network.websocket) {\n                    // Remove onmessage listener\n                    network.websocket.onopen = null\n                    network.websocket.onmessage = null\n\n                    // Close connection\n                    network.websocket.close()\n                }\n            })\n\n            // Connect\n            this.networks[this.currentNetwork].websocket = new WebSocket(this.networks[this.currentNetwork].websocket_url)\n\n            // Listening events\n            this.networks[this.currentNetwork].websocket.onopen = () => {\n                // Event Tx with recipient\n                this.networks[this.currentNetwork].websocket.send(JSON.stringify({\n                    jsonrpc: '2.0',\n                    method: 'subscribe',\n                    id: '1',\n                    params: {\n                        query: `tm.event='Tx' AND transfer.recipient='${this.currentAddress}'`\n                    }\n                }))\n            }\n\n            // WSS message event\n            this.networks[this.currentNetwork].websocket.onmessage = async msg => {\n                let parsedMsg = JSON.parse(msg.data)\n\n                // If the result object is not empty\n                if (parsedMsg.result && Object.keys(parsedMsg.result).length > 0) {\n                    // User recipient\n                    if (parsedMsg.id == '1') {\n                        // Update all balances\n                        this.updateAllBalances()\n\n                        // Reset Tx Fee\n                        this.resetTxFee()\n                    }\n\n                    // Transaction\n                    if (parsedMsg.id == '2') {\n                        // Check Tx result\n                        this.checkTxResult()\n                    }\n                }\n            }\n        },\n\n\n        // Set current balance\n        TxFeeGetCurrentBalance(baseDenom) {\n            // Set data\n            this.TxFee.balance = this.balances.find(balance => balance.denom === baseDenom) || { amount: 0 }\n        },\n\n\n        // Get minimum gas price\n        TxFeeSetGasPrices() {\n            // Get chain info\n            let chain = chains.find(el => el.chain_id === this.networks[this.currentNetwork].chain_id)\n\n            // Set data\n            this.TxFee.lowPrice = chain.fees.fee_tokens[0].fixed_min_gas_price ? chain.fees.fee_tokens[0].fixed_min_gas_price * 1.1 : chain.fees.fee_tokens[0].low_gas_price\n            this.TxFee.averagePrice = this.TxFee.lowPrice * 1.15\n            this.TxFee.highPrice = this.TxFee.lowPrice * 1.30\n        },\n\n\n        // Enough status\n        TxFeeIsEnough() {\n            // Set status\n            if (this.isBalancesGot) {\n                this.TxFee.isEnough = this.TxFee.balance.amount > this.TxFee.userGasAmount * this.TxFee[`${this.TxFee.currentLevel}Price`]\n            }\n        },\n\n\n        // Set listener current tx\n        setListenerCurrentTx() {\n            // Event Tx with hash\n            this.networks[this.currentNetwork].websocket.send(JSON.stringify({\n                jsonrpc: '2.0',\n                method: 'subscribe',\n                id: '2',\n                params: {\n                    query: `tm.event='Tx' AND tx.hash='${(this.networks[this.currentNetwork].currentTxHash).toUpperCase()}'`\n                }\n            }))\n        },\n\n\n        // Get Tx info\n        async getTxInfo(txHash) {\n            try {\n                // Request\n                return await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/tx/v1beta1/txs/${txHash.toUpperCase()}`).then(res => res.json())\n            } catch (error) {\n                // Throwing an exception\n                throw error\n            }\n        },\n\n\n        // Check Tx result\n        async checkTxResult() {\n            try {\n                let txResult = await this.getTxInfo(this.networks[this.currentNetwork].currentTxHash)\n\n                if (txResult.code !== 5) {\n                    // Clean notifications\n                    notification.notify({\n                        group: 'default',\n                        clean: true\n                    })\n\n                    if (txResult.tx_response?.code === 0) {\n                        // Show notification\n                        notification.notify({\n                            group: 'default',\n                            speed: 200,\n                            duration: 4000,\n                            title: i18n.global.t('message.notification_tx_success_title'),\n                            type: 'success',\n                            data: {\n                                explorer_link: getExplorerLink(this.currentNetwork)\n                            }\n                        })\n                    } else {\n                        // Get error code\n                        let errorText = ''\n\n                        // Get error title\n                        txResult.tx_response?.code\n                            ? errorText = i18n.global.t(`message.notification_tx_error_${txResult.tx_response?.code}`)\n                            : errorText = i18n.global.t('message.notification_tx_error_rejected')\n\n                        // Show notification\n                        notification.notify({\n                            group: 'default',\n                            speed: 200,\n                            duration: 6000,\n                            title: i18n.global.t('message.notification_tx_error_title'),\n                            text: errorText,\n                            type: 'error'\n                        })\n                    }\n\n                    // Clear tx hash\n                    this.networks[this.currentNetwork].currentTxHash = null\n\n                    // Update all balances\n                    this.updateAllBalances()\n\n                    // Reset Tx Fee\n                    this.resetTxFee()\n                }\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Update all balances\n        async updateAllBalances() {\n            let promises = []\n\n            // Update balances\n            if (this.isBalancesGot) {\n                promises.push(this.getBalances(true))\n            }\n\n            // Update staked balances\n            if (this.isStakedBalancesGot) {\n                promises.push(this.getStakedBalances(true))\n            }\n\n            // Update rewards\n            if (this.isRewardsGot) {\n                promises.push(this.getRewards())\n            }\n\n            // Update unstaking balances\n            if (this.isUnstakingBalancesGot) {\n                promises.push(this.getUnstakingBalances())\n            }\n\n            // Wait balances\n            await Promise.all(promises)\n        },\n\n\n        // Reset Tx Fee\n        async resetTxFee() {\n            // Get DB data\n            let DBData = await DBgetMultipleData(`wallet${this.currentWalletID}`, ['TxFeeCurrentLevel', 'TxFeeIsRemember'])\n\n            // Reset data\n            this.TxFee = {\n                balance: {},\n                currentLevel: DBData.TxFeeCurrentLevel || 'average',\n                userGasAmount: 0,\n                gasAmount: 0,\n                isRemember: DBData.TxFeeIsRemember || false,\n                isGasAdjustmentAuto: true,\n                isEnough: false\n            }\n        },\n\n\n        // Get network unbonding period\n        async getNetworkUnbondingTime() {\n            try {\n                await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/params`)\n                    .then(res => res.json())\n                    .then(response => {\n                        // Set data\n                        this.networks[this.currentNetwork].unbondingTime = parseInt(response.params.unbonding_time) / 86400\n                    })\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Get all validators\n        async getAllValidators() {\n            try {\n                // Request\n                let result = await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/validators?status=BOND_STATUS_BONDED&pagination.limit=200`).then(res => res.json())\n\n                return result.validators\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Get user validators\n        async getUserValidators() {\n            try {\n                // Request\n                let result = await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/delegators/${this.currentAddress}/validators?status=BOND_STATUS_BONDED&pagination.limit=200`).then(res => res.json())\n\n                return result.validators\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Get total bonded tokens\n        async getTotalBondedTokens() {\n            try {\n                await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/pool`)\n                    .then(res => res.json())\n                    .then(response => {\n                        // Set data\n                        this.networks[this.currentNetwork].totalBondedTokens = parseInt(response.pool.bonded_tokens)\n                    })\n            } catch (error) {\n                console.error(error)\n            }\n        },\n\n\n        // Is unstaking cancel support\n        async isUnstakingCancelSupport() {\n            let result = false,\n                cacheIsUnstakingCancelSupport = await DBgetData(`wallet${this.currentWalletID}`, `${this.currentNetwork}_isUnstakingCancelSupport`)\n\n            // Check\n            if (cacheIsUnstakingCancelSupport === undefined || (new Date() - new Date(cacheIsUnstakingCancelSupport.timestamp) > this.cacheTime)) {\n                try {\n                    let response = await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/base/tendermint/v1beta1/node_info`),\n                        data = await response.json(),\n                        cosmos_sdk_version = data.application_version.cosmos_sdk_version,\n                        min_version = 'v0.46'\n\n                    // Parsing versions\n                    let cosmos_sdk_version_parsed = cosmos_sdk_version.replace('v', '').split('-')[0].split('.').map(Number),\n                        min_version_parsed = min_version.replace('v', '').split('-')[0].split('.').map(Number)\n\n                    // Fill in the missing with zeros\n                    while (cosmos_sdk_version_parsed.length < 3) cosmos_sdk_version_parsed.push(0)\n                    while (min_version_parsed.length < 3) min_version_parsed.push(0)\n\n                    // Compare versions\n                    for (let i = 0; i < 3; i++) {\n                        if (cosmos_sdk_version_parsed[i] > min_version_parsed[i]) result = true // Version above minimum\n                        if (cosmos_sdk_version_parsed[i] < min_version_parsed[i]) result = false // Version is less than minimum\n                    }\n\n                    // Save in DB\n                    await DBaddData(`wallet${this.currentWalletID}`, [\n                        [this.currentNetwork + '_isUnstakingCancelSupport', JSON.parse(JSON.stringify({\n                            value: result,\n                            timestamp: new Date().toISOString()\n                        }))]\n                    ])\n                } catch (error) {\n                    console.error(error)\n                }\n\n                // Set data\n                this.networks[this.currentNetwork].isUnstakingCancelSupport = result\n            } else {\n                // Set from cache\n                this.networks[this.currentNetwork].isUnstakingCancelSupport = cacheIsUnstakingCancelSupport.value\n            }\n        },\n\n\n        // Get wallets\n        async getWallets() {\n            try {\n                // Get from DB\n                this.wallets = await DBgetData('global', 'wallets')\n            } catch (error) {\n                console.log(error)\n            }\n        },\n\n\n        // Update wallet\n        async updateWallet({ wallet, new_name }) {\n            try {\n                // Find wallet\n                let currentWallet = this.wallets.find(el => el.id === wallet.id)\n\n                // Update name\n                if (currentWallet) {\n                    currentWallet.name = new_name\n\n                    // Update in DB\n                    await DBaddData('global', [\n                        ['wallets', JSON.parse(JSON.stringify(this.wallets))]\n                    ])\n\n                    await DBaddData(`wallet${this.currentWalletID}`, [\n                        ['name', currentWallet.name]\n                    ])\n\n                    // Update in state\n                    if (this.currentWalletID === wallet.id) {\n                        this.currentWalletName = currentWallet.name\n                    }\n\n                    // Get wallets\n                    await this.getWallets()\n                }\n            } catch (error) {\n                console.log(error)\n            }\n        },\n\n\n        // Remove wallet\n        async removeWallet(wallet) {\n            try {\n                // Update wallets\n                this.wallets = this.wallets.filter(el => el.id !== wallet.id)\n\n                // Set default wallet if deleted current\n                if (wallet.id === this.currentWalletID) {\n                    // Set second wallet like default\n                    await this.setCurrentWalletID(this.wallets[0].id)\n                }\n\n                // Cleare store in DB\n                await DBclearStore(`wallet${wallet.id}`)\n\n                // Remove in secret DB\n                await DBdeleteData('secret', [\n                    `wallet${wallet.id}_aesKey`,\n                    `wallet${wallet.id}_privateKey`,\n                    `wallet${wallet.id}_secret`,\n                    `wallet${wallet.id}_secretIV`\n                ])\n\n                // Update wallets in DB\n                await DBaddData('global', [\n                    ['wallets', JSON.parse(JSON.stringify(this.wallets))]\n                ])\n            } catch (error) {\n                console.log(error)\n            }\n        },\n\n\n        // Set age confirmed\n        async setAgeConfirmed() {\n            // Save in DB\n            await DBaddData('global', [\n                ['ageConfirmed', true]\n            ])\n        },\n\n\n        // Get age confirmed\n        async getAgeConfirmed() {\n            try {\n                // Get from DB\n                let DBAgeConfirmed = await DBgetData('global', 'ageConfirmed')\n\n                if (DBAgeConfirmed !== undefined) {\n                    // Set result\n                    this.isAgeConfirmed = DBAgeConfirmed\n                }\n            } catch (error) {\n                console.log(error)\n            }\n        },\n\n\n        // Set user lock\n        async setUserLock() {\n            // Save in DB\n            await DBaddData('global', [\n                ['isUserLock', true],\n                ['userLockTimestamp', new Date().toISOString()]\n            ])\n        },\n\n\n        // Set user unlock\n        async setUserUnlock() {\n            // Save in DB\n            await DBaddData('global', [\n                ['isUserLock', false],\n                ['userLockTimestamp', '']\n            ])\n\n            // Сhange auth limit\n            await this.updateUserAuthErrorLimit(this.authErrorLimit)\n        },\n\n\n        // Set user channel\n        async setUserChannel(channel) {\n            try {\n                // Get from DB\n                let userChannels = await DBgetData('global', 'userChannels') || []\n\n                // Add new channel\n                userChannels.push(channel)\n\n                // Save in DB\n                await DBaddData('global', [\n                    ['userChannels', JSON.parse(JSON.stringify(userChannels))]\n                ])\n            } catch (error) {\n                console.log(error)\n            }\n        },\n\n\n        // Update user channel\n        async updateUserChannel(channel) {\n            try {\n                // Get from DB\n                let userChannels = await DBgetData('global', 'userChannels') || []\n\n                // Add new channel\n                let oldChannel = userChannels.find(el => el.info.pretty_name === channel.old.info.pretty_name)\n\n                // Update data\n                oldChannel.info = channel.info\n                oldChannel.channel_id = channel.channel_id\n\n                // Save in DB\n                await DBaddData('global', [\n                    ['userChannels', JSON.parse(JSON.stringify(userChannels))]\n                ])\n            } catch (error) {\n                console.log(error)\n            }\n        },\n\n\n        // Get all user channels\n        async getAllUserChannels() {\n            try {\n                // Get from DB\n                return await DBgetData('global', 'userChannels')\n            } catch (error) {\n                console.log(error)\n            }\n        },\n\n\n        // Delete user channel\n        async deleteUserChannel(chainName) {\n            try {\n                // Get from DB\n                let userChannels = await DBgetData('global', 'userChannels')\n\n                // Delete channel\n                userChannels = userChannels.filter(el => el.info.pretty_name !== chainName)\n\n                // Update in DB\n                await DBaddData('global', [\n                    ['userChannels', userChannels],\n                ])\n            } catch (error) {\n                console.log(error)\n            }\n        },\n\n\n        // Clear all data\n        async clearAllData() {\n            try {\n                // Clear in DB\n                await DBclearAllData()\n\n                // Reset all state\n                this.$reset()\n            } catch (error) {\n                console.log(error)\n            }\n        }\n    }\n})","import { openDB, deleteDB } from 'idb'\n\n\nvar DB = null\n\n\n// Get store\nasync function getStore() {\n    // Import\n    const { useGlobalStore } = await import('@/store')\n\n    // Return instance\n    return useGlobalStore()\n}\n\n\n// DB promise\nconst dbPromise = (async () => {\n    let store = await getStore(),\n        isFirstRun = localStorage.getItem('firstRun') === null\n\n    deleteDB('bro_db')\n\n    if (isFirstRun) {\n        deleteDB('jetWallet')\n\n        localStorage.setItem('firstRun', 'false')\n    }\n\n    // Get current DB version\n    store.getCurrentDBVersion()\n\n    // Open DB\n    return openDB('jetWallet', store.DBVersion, {\n        upgrade(db) {\n            // Create store if it does not exist\n            if (!db.objectStoreNames.contains('global')) {\n                db.createObjectStore('global')\n            }\n\n            // Create store if it does not exist\n            if (!db.objectStoreNames.contains('secret')) {\n                db.createObjectStore('secret')\n            }\n\n            // Create store if it does not exist\n            if (!db.objectStoreNames.contains('wallet1')) {\n                db.createObjectStore('wallet1')\n            }\n        }\n    })\n})()\n\n\nexport async function DBcheckStoreName(name) {\n    let store = await getStore()\n\n    if (!DB) {\n        // Check DB\n        DB = await dbPromise\n    }\n\n    if (!DB.objectStoreNames.contains(name)) {\n        // Set new DB version\n        store.setNewDBVersion()\n\n        // Close DB\n        DB.close()\n\n        // Open DB\n        DB = await openDB('jetWallet', store.DBVersion, {\n            upgrade(db) {\n                // Create store if it does not exist\n                if (!db.objectStoreNames.contains(name)) {\n                    db.createObjectStore(name)\n                }\n            }\n        })\n    }\n}\n\n\nexport async function DBgetAllData(storeName) {\n    if (!DB) {\n        // Check DB\n        DB = await dbPromise\n    }\n\n    return DB.getAll(storeName)\n}\n\n\nexport async function DBgetData(storeName, key) {\n    if (!DB) {\n        // Check DB\n        DB = await dbPromise\n    }\n\n    return DB.get(storeName, key)\n}\n\n\nexport async function DBgetMultipleData(storeName, keys) {\n    if (!DB) {\n        // Check DB\n        DB = await dbPromise\n    }\n\n    let results = await Promise.all(keys.map(key => DB.get(storeName, key))),\n        keyValueMap = {}\n\n    keys.forEach((key, index) => keyValueMap[key] = results[index])\n\n    return keyValueMap\n}\n\n\nexport async function DBaddData(storeName, data) {\n    if (!DB) {\n        // Check DB\n        DB = await dbPromise\n    }\n\n    let tx = DB.transaction(storeName, 'readwrite'),\n        store = tx.objectStore(storeName)\n\n    for (let [key, value] of data) {\n        await store.put(value, key)\n    }\n\n    await tx.done\n}\n\n\nexport async function DBdeleteData(storeName, keys) {\n    if (!DB) {\n        // Check DB\n        DB = await dbPromise\n    }\n\n    let tx = DB.transaction(storeName, 'readwrite'),\n        store = tx.objectStore(storeName)\n\n    await Promise.all(keys.map(key => store.delete(key)))\n\n    return tx.done\n}\n\n\nexport async function DBclearStore(storeName) {\n    if (!DB) {\n        // Check DB\n        DB = await dbPromise\n    }\n\n    let tx = DB.transaction(storeName, 'readwrite'),\n        store = tx.objectStore(storeName)\n\n    await store.clear()\n    await tx.done\n}\n\n\nexport async function DBclearAllData() {\n    if (!DB) {\n        // Check DB\n        DB = await dbPromise\n    }\n\n    for (let storeName of DB.objectStoreNames) {\n        let tx = DB.transaction(storeName, 'readwrite'),\n            store = tx.objectStore(storeName)\n\n        await store.clear()\n        await tx.done\n    }\n}","import { DirectSecp256k1HdWallet } from '@cosmjs/proto-signing'\n\n\n// Generate wallet\nexport const generateWallet = async count => {\n    return await DirectSecp256k1HdWallet.generate(count)\n}\n\n\nexport default generateWallet","import { DirectSecp256k1HdWallet } from '@cosmjs/proto-signing'\nimport { stringToPath } from '@cosmjs/crypto'\nimport { useGlobalStore } from '@/store'\n\n\n// Import wallet from mnemonic\nexport const importWalletFromMnemonic = async (mnemonic, prefix = null, derivationPath = null) => {\n    let store = useGlobalStore(),\n        path = !derivationPath ? store.currentWalletDerivationPath : derivationPath\n\n    return await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {\n        hdPaths: [stringToPath(path)],\n        prefix\n    })\n}\n\n\nexport default importWalletFromMnemonic","import { DirectSecp256k1Wallet } from '@cosmjs/proto-signing'\nimport { fromHex } from '@cosmjs/encoding'\n\n\n// Import wallet from private key\nexport const importWalletFromPrivateKey = async (privateKey, prefix = null) => {\n    return await DirectSecp256k1Wallet.fromKey(fromHex(privateKey), prefix)\n}\n\n\nexport default importWalletFromPrivateKey","// Hash data with key\nexport const hashDataWithKey = async (data, key) => {\n    let encoder = new TextEncoder(),\n        encodedData = encoder.encode(data)\n\n    let cryptoKey = await crypto.subtle.importKey(\n        'jwk',\n        key,\n        {\n            name: 'HMAC',\n            hash: { name: 'SHA-256' }\n        },\n        false,\n        ['sign']\n    )\n\n    let signature = await crypto.subtle.sign('HMAC', cryptoKey, encodedData),\n        hashArray = Array.from(new Uint8Array(signature)),\n        hashHex = hashArray.map(byte => ('00' + byte.toString(16)).slice(-2)).join('')\n\n    return hashHex\n}\n\n\nexport default hashDataWithKey","// Generate AES key\nexport const generateAESKey = async () => {\n    let key = await crypto.subtle.generateKey(\n        {\n            name: 'AES-GCM',\n            length: 256\n        },\n        true,\n        ['encrypt', 'decrypt']\n    )\n\n    return key\n}\n\n\nexport default generateAESKey","// Generate HMAC key\nexport const generateHMACKey = async () => {\n    // Key params\n    let key = await crypto.subtle.generateKey(\n        {\n            name: 'HMAC',\n            hash: { name: 'SHA-256' },\n            length: 256\n        },\n        true,\n        ['sign']\n    )\n\n    // Export key in JWK (JSON Web Key) format\n    let exportedKey = await crypto.subtle.exportKey('jwk', key)\n\n    return exportedKey\n}\n\n\nexport default generateHMACKey","// Encryption\nexport const encryptData = async (text, key) => {\n    let iv = crypto.getRandomValues(new Uint8Array(12)),\n        encoder = new TextEncoder(),\n        encodedText = encoder.encode(text)\n\n    let ciphertext = await crypto.subtle.encrypt(\n        {\n            name: \"AES-GCM\",\n            iv: iv,\n        },\n        key,\n        encodedText\n    );\n\n    return {\n        ciphertext: new Uint8Array(ciphertext),\n        iv: iv\n    }\n}\n\n\nexport default encryptData","// Decryption\nexport const decryptData = async (ciphertext, iv, key) => {\n    let decrypted = await crypto.subtle.decrypt(\n        {\n            name: \"AES-GCM\",\n            iv: iv,\n        },\n        key,\n        ciphertext\n    )\n\n    let decoder = new TextDecoder()\n\n    return decoder.decode(decrypted)\n}\n\n\nexport default decryptData","import { useGlobalStore } from '@/store'\n\nimport { DBgetMultipleData } from '@/utils/db'\nimport { importWalletFromMnemonic } from './importWalletFromMnemonic'\nimport { importWalletFromPrivateKey } from './importWalletFromPrivateKey'\n\n\n// Get address\nexport const getAddress = async () => {\n    let store = useGlobalStore(),\n        wallet = null\n\n    // Get from DB\n    let DBSecret = await DBgetMultipleData('secret', [\n        `wallet${store.currentWalletID}_secret`,\n        `wallet${store.currentWalletID}_privateKey`\n    ])\n\n    // Wallet\n    if (DBSecret[`wallet${store.currentWalletID}_secret`]) {\n        // Get secret from DB\n        let secret = await store.getSecret(true)\n\n        // Get wallet\n        wallet = await importWalletFromMnemonic(secret, store.networks[store.currentNetwork].prefix)\n    }\n\n    if (DBSecret[`wallet${store.currentWalletID}_privateKey`]) {\n        // Get secret from DB\n        let privateKey = await store.getPrivateKey(true)\n\n        // Get wallet\n        wallet = await importWalletFromPrivateKey(privateKey, store.networks[store.currentNetwork].prefix)\n    }\n\n    // Current address\n    let address = (await wallet.getAccounts())[0].address\n\n    return address\n}\n\n\nexport default getAddress","import { useGlobalStore } from '@/store'\nimport { SigningCosmWasmClient } from '@cosmjs/cosmwasm-stargate'\nimport { SigningStargateClient } from '@cosmjs/stargate'\n\nimport { DBgetMultipleData } from '@/utils/db'\nimport { importWalletFromMnemonic } from './importWalletFromMnemonic'\nimport { importWalletFromPrivateKey } from './importWalletFromPrivateKey'\n\n\n// Create singer\nexport const createSinger = async () => {\n    let store = useGlobalStore(),\n        wallet = null\n\n    // Get from DB\n    let DBSecret = await DBgetMultipleData('secret', [\n        `wallet${store.currentWalletID}_secret`,\n        `wallet${store.currentWalletID}_privateKey`\n    ])\n\n    // Wallet\n    if (DBSecret[`wallet${store.currentWalletID}_secret`]) {\n        // Get secret from DB\n        let secret = await store.getSecret(true)\n\n        // Get wallet\n        wallet = await importWalletFromMnemonic(secret, store.networks[store.currentNetwork].prefix)\n    }\n\n    if (DBSecret[`wallet${store.currentWalletID}_privateKey`]) {\n        // Get secret from DB\n        let privateKey = await store.getPrivateKey(true)\n\n        // Get wallet\n        wallet = await importWalletFromPrivateKey(privateKey, store.networks[store.currentNetwork].prefix)\n    }\n\n    // Stargate client\n    let signingClient = await SigningStargateClient.connectWithSigner(store.networks[store.currentNetwork].rpc_api, wallet)\n\n    // Stargate Cosm wasm client\n    let signingCosmWasmClient = await SigningCosmWasmClient.connectWithSigner(store.networks[store.currentNetwork].rpc_api, wallet)\n\n    return { signingClient, signingCosmWasmClient }\n}\n\n\nexport default createSinger","import { useGlobalStore } from '@/store'\n\n\n// Denom traces\nexport const denomTraces = async (string) => {\n    let store = useGlobalStore(),\n        result = {\n            path: null,\n            base_denom: string\n        },\n        hash = string.split('/')\n\n    if (hash[0] == 'ibc') {\n        try {\n            // Request\n            await fetch(`${store.networks[store.currentNetwork].lcd_api}/ibc/apps/transfer/v1/denom_traces/${hash[1]}`)\n                .then(response => response.json())\n                .then(response => result = response.denom_trace)\n        } catch (error) {\n            console.error(error)\n        }\n    } else if (hash[0] == 'factory') {\n        result.ingnoreTraces = true\n        result.base_denom = hash[hash.length - 1]\n    }\n\n    return result\n}\n\n\nexport default denomTraces","// Format token amount\nexport const formatTokenAmount = (amount, exponent) => amount / Math.pow(10, exponent)\n\n\nexport default formatTokenAmount","import { useGlobalStore } from '@/store'\n\n\n// Format token cost\nexport const formatTokenCost = (cost, currency = null) => {\n    let store = useGlobalStore(),\n        currentCurrency = currency || store.currentCurrency\n\n    // Rounding\n    switch (currentCurrency) {\n        case 'BTC':\n            return cost > 0.0000000001 || cost == 0 ? cost.toLocaleString('ru-RU', { maximumFractionDigits: 10, minimumFractionDigits: 2 }).replace(',', '.') : '<0.0000000001'\n\n        case 'ETH':\n            return cost > 0.0000001 || cost == 0 ? cost.toLocaleString('ru-RU', { maximumFractionDigits: 7, minimumFractionDigits: 2 }).replace(',', '.') : '<0.0000001'\n\n        default:\n            return cost > 0.01 || cost == 0 ? cost.toLocaleString('ru-RU', { maximumFractionDigits: 2, minimumFractionDigits: 2 }).replace(',', '.') : '<0.01'\n    }\n}\n\n\nexport default formatTokenCost","import { useGlobalStore } from '@/store'\n\n\n// Format token name\nexport const formatTokenName = tokenName => {\n    let store = useGlobalStore(),\n        formatableToken = store.formatableTokens.find(el => el.token_name === tokenName),\n        formatTokenName = formatableToken ? formatableToken.format_token_name : tokenName\n\n    return formatTokenName\n}\n\n\nexport default formatTokenName","import { useGlobalStore } from '@/store'\n\n\n// Get price by denom\nexport const getPriceByDenom = denom => {\n    let store = useGlobalStore(),\n        price = store.prices.find(el => el.symbol.toLowerCase() === denom.toLowerCase())?.price || 0,\n        formatableToken = store.formatableTokens.find(el => el.token_name == denom),\n        formatPrice = formatableToken ? price * Math.pow(10, formatableToken.exponent) : price\n\n    return formatPrice\n}\n\n\nexport default getPriceByDenom","import { useGlobalStore } from '@/store'\nimport { formatTokenName } from './formatTokenName'\nimport { getPriceByDenom } from './getPriceByDenom'\n\n\n// Currency conversion\nexport const currencyConversion = (amount, denom, currency) => {\n    let store = useGlobalStore(),\n        currentCurrencyPrice = 1\n\n    currency\n        ? currentCurrencyPrice = store.prices.find(el => el.symbol.toLowerCase() === formatTokenName(currency).toLowerCase()).price\n        : currentCurrencyPrice = store.prices.find(el => el.symbol.toLowerCase() === formatTokenName(store.currentCurrency).toLowerCase()).price\n\n    return amount * (getPriceByDenom(denom) / currentCurrencyPrice)\n}\n\n\nexport default currencyConversion","import { formatTokenAmount } from './formatTokenAmount'\nimport { currencyConversion } from './currencyConversion'\n\n\n// Calc token cost in current cucrrency\nexport const calcTokenCost = (denom, amount, exponent, currency = null) => {\n    let formatAmount = formatTokenAmount(amount, exponent)\n\n    return currencyConversion(formatAmount, denom, currency)\n}\n\n\nexport default calcTokenCost","import { useGlobalStore } from '@/store'\nimport { calcTokenCost } from './calcTokenCost'\n\n\n// Calc balances cost in current cucrrency\nexport const calcBalancesCost = (currency = null) => {\n    let store = useGlobalStore(),\n        totalPrice = 0\n\n    // Calc total cost\n    if (store.balances.length) {\n        store.balances.forEach(balance => totalPrice += calcTokenCost(balance.token_info.symbol, balance.amount, balance.exponent, currency))\n    }\n\n    return parseFloat(totalPrice)\n}\n\n\nexport default calcBalancesCost","import { useGlobalStore } from '@/store'\nimport { calcTokenCost } from './calcTokenCost'\n\n\n// Calc Staked balances cost in current cucrrency\nexport const calcStakedBalancesCost = (currency = null) => {\n    let store = useGlobalStore(),\n        totalPrice = 0\n\n    // Calc total cost\n    if (store.stakedBalances.length) {\n        store.stakedBalances.forEach(el => totalPrice += calcTokenCost(el.balance.token_info.symbol, el.balance.amount, el.balance.exponent, currency))\n    }\n\n    return parseFloat(totalPrice)\n}\n\n\nexport default calcStakedBalancesCost","import { useGlobalStore } from '@/store'\nimport { calcTokenCost } from './calcTokenCost'\n\n\n// Calc rewards balances cost in current cucrrency\nexport const calcRewardsBalancesCost = (currency = null) => {\n    let store = useGlobalStore(),\n        totalPrice = 0\n\n    // Calc total cost\n    if (store.rewardsBalances.length) {\n        store.rewardsBalances.forEach(balance => totalPrice += calcTokenCost(balance.token_info.symbol, balance.amount, balance.exponent, currency))\n    }\n\n    return parseFloat(totalPrice)\n}\n\n\nexport default calcRewardsBalancesCost","import { useGlobalStore } from '@/store'\n\n\n// Calc stake available amount\nexport const calcAvailableAmount = () => {\n    let store = useGlobalStore(),\n        balance = store.balances.find(balance => balance.denom === store.networks[store.currentNetwork].denom)\n\n    return balance ? parseFloat(balance.amount) : 0\n}\n\n\nexport default calcAvailableAmount","import { useGlobalStore } from '@/store'\n\n\n// Calc staked amount\nexport const calcStakedAmount = () => {\n    let store = useGlobalStore(),\n        totalAmount = 0\n\n    // Calc total amount\n    if (store.stakedBalances.length) {\n        store.stakedBalances.forEach(item => totalAmount += parseFloat(item.balance.amount))\n    }\n\n    return totalAmount\n}\n\n\nexport default calcStakedAmount","import { useGlobalStore } from '@/store'\n\n\n// Calc unstaking amount\nexport const calcUnstakingAmount = () => {\n    let store = useGlobalStore(),\n        totalAmount = 0\n\n    // Calc total amount\n    if (store.unstakingBalances.length) {\n        store.unstakingBalances.forEach(item => {\n            item.entries.forEach(el => totalAmount += parseFloat(el.balance))\n        })\n    }\n\n    return totalAmount\n}\n\n\nexport default calcUnstakingAmount","import { useGlobalStore } from '@/store'\nimport { chains } from 'chain-registry'\n\n\n// Get metwork logo\nexport const getNetworkLogo = chainId => {\n    let store = useGlobalStore(),\n        logo = ''\n\n    if (chainId) {\n        let chain = Object.values(store.networks).find(el => el.chain_id === chainId)\n\n        if (chain !== undefined && chain.logo) {\n            logo = chain.logo\n        } else {\n            chain = chains.find(el => el.chain_id === chainId)\n\n            if (chain) {\n                if (chain.logo_URIs) {\n                    logo = chain.logo_URIs.svg || chain.logo_URIs.png\n                } else if (chain.images) {\n                    logo = chain.images[chain.images.length - 1].svg || chain.images[chain.images.length - 1].png\n                }\n            }\n        }\n    }\n\n    return logo\n}\n\n\nexport default getNetworkLogo","import { useGlobalStore } from '@/store'\n\nimport { createSinger } from './createSinger'\n\n\n// Simulate Tx\nexport const simulateTx = async (msg, memo = '') => {\n    let store = useGlobalStore(),\n        { signingCosmWasmClient } = await createSinger()\n\n    // Simulate gas\n    let gasUsed = await signingCosmWasmClient.simulate(store.currentAddress, msg, memo)\n\n    // Set gas amount\n    store.TxFee.gasAmount = parseInt(gasUsed * store.networks[store.currentNetwork].gas_adjustment)\n\n    // Set user gas amount\n    store.TxFee.userGasAmount = store.TxFee.gasAmount\n}\n\n\nexport default simulateTx","import { useGlobalStore } from '@/store'\nimport { TxRaw } from 'cosmjs-types/cosmos/tx/v1beta1/tx'\nimport { sha256 } from '@cosmjs/crypto'\n\nimport { createSinger } from './createSinger'\n\n\n// Sign Tx\nexport const signTx = async (msg, memo) => {\n    let store = useGlobalStore(),\n        { signingCosmWasmClient } = await createSinger()\n\n    // Fee\n    let fee = {\n        amount: [{\n            denom: store.networks[store.currentNetwork].denom,\n            amount: parseInt(store.TxFee.userGasAmount * store.TxFee[`${store.TxFee.currentLevel}Price`]).toString()\n        }],\n        gas: store.TxFee.userGasAmount.toString()\n    }\n\n    // Sign\n    let txRaw = await signingCosmWasmClient.sign(store.currentAddress, msg, fee, memo)\n\n    // Encode TxRaw\n    let txBytes = TxRaw.encode(txRaw).finish()\n\n    // Hash transaction bytes\n    let txHash = sha256(txBytes)\n\n    // Convert hash bytes to hex string\n    store.networks[store.currentNetwork].currentTxHash = Buffer.from(txHash).toString('hex')\n\n    return txBytes\n}\n\n\nexport default signTx","import { createSinger } from './createSinger'\n\n\n// Send Tx\nexport const sendTx = async txBytes => {\n    let { signingCosmWasmClient } = await createSinger()\n\n    // Broadcast\n    await signingCosmWasmClient.broadcastTx(txBytes, signingCosmWasmClient.broadcastTimeoutMs, signingCosmWasmClient.broadcastPollIntervalMs)\n}\n\n\nexport default sendTx","import { useGlobalStore } from '@/store'\n\n\n// Get explorer link\nexport const getExplorerLink = (network) => {\n    let store = useGlobalStore()\n\n    return (store.networks[network].explorer_link).replace('{tx_hash}', store.networks[network].currentTxHash)\n}\n\n\nexport default getExplorerLink","// Image load error\nexport const imageLoadError = e => e.target.classList.add('hide')\n\n\nexport default imageLoadError","// Image load error\nexport const imageLoadSuccess = e => e.target.classList.remove('hide')\n\n\nexport default imageLoadSuccess","// Date calc\nexport const dateCalc = date => {\n    let currentDate = new Date(date),\n        userTimeZone = new Date().getTimezoneOffset() / 60 * -1\n\n    return new Date(currentDate.setHours(currentDate.getHours() + userTimeZone))\n}\n\n\nexport default dateCalc","import { fromBech32, toBech32 } from '@cosmjs/encoding'\n\n\n// Convert address\nexport const convertAddress = (address, prefix) => {\n    // Decoding the address in Bech32\n    const { data } = fromBech32(address)\n\n    // Encode the address with a new prefix\n    return toBech32(prefix, data)\n}\n\n\nexport default convertAddress","import { inject, watch, computed } from 'vue'\nimport { useGlobalStore } from '@/store'\nimport { useRouter } from 'vue-router'\n\n\n// Redirect to send\nfunction redirectToSend(parsedData) {\n    let store = useGlobalStore(),\n        router = useRouter()\n\n    // Change network\n    if (store.currentNetwork !== parsedData[1]) {\n        // Redirect\n        router.push({ path: '/account' })\n\n        // Set new current network\n        store.setCurrentNetwork(parsedData[1])\n\n        // Wait isInitialized\n        let stopWatch = watch(computed(() => store.isInitialized), () => {\n            if (store.isInitialized && parsedData[0] === 'send') {\n                // Stop watch\n                stopWatch()\n\n                // Redirect to send page\n                router.push({\n                    path: '/account/send',\n                    query: {\n                        denom: store.networks[store.currentNetwork].denom,\n                        address: parsedData[2],\n                        amount: parsedData[3]\n                    }\n                })\n            }\n        })\n    } else {\n        // Redirect to send\n        if (parsedData[0] === 'send') {\n            router.push({\n                path: '/account/send',\n                query: {\n                    denom: store.networks[store.currentNetwork].denom,\n                    address: parsedData[2],\n                    amount: parsedData[3]\n                }\n            })\n        }\n    }\n}\n\n\n// Telegram WebApp init\nexport const tgInit = async () => {\n    let store = useGlobalStore(),\n        i18n = inject('i18n')\n\n    if (window.Telegram && window.Telegram.WebApp) {\n        // Initialize the mini-application\n        await Telegram.WebApp.ready()\n\n        // Call the expand method to open to full height\n        Telegram.WebApp.expand()\n\n        // Set header color\n        Telegram.WebApp.setHeaderColor('#5b3895')\n\n        // Show progress\n        Telegram.WebApp.MainButton.showProgress(true)\n\n        // Disable vertical swipes\n        Telegram.WebApp.disableVerticalSwipes()\n\n        // Init biometric\n        Telegram.WebApp.BiometricManager.init()\n\n        // Age modal\n        await store.getAgeConfirmed()\n\n        if (!store.isAgeConfirmed) {\n            Telegram.WebApp.showConfirm(i18n.global.t('message.age_modal_text'), async result => {\n                result\n                    ? await store.setAgeConfirmed() // Approve age\n                    : Telegram.WebApp.close() // Reject age\n            })\n        }\n\n        // Qr code received\n        Telegram.WebApp.onEvent('qrTextReceived', data => {\n            // Close QR popup\n            Telegram.WebApp.closeScanQrPopup()\n\n            // Parse data\n            let parsedData = data.data.split('|')\n\n            // Redirect to send\n            redirectToSend(parsedData)\n        })\n    }\n}\n\n\nexport default tgInit","<template>\n    <!-- Loader wrap -->\n    <div class=\"loader_wrap\">\n        <!-- Loader -->\n        <div class=\"loader\"><span></span></div>\n    </div>\n</template>","import { render } from \"./Loader.vue?vue&type=template&id=ba5ac374\"\nconst script = {}\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.amdO = {};","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"js/\" + chunkId + \".\" + {\"8\":\"af777415\",\"17\":\"093bbcd6\",\"70\":\"4de3997b\",\"135\":\"1a4153c3\",\"139\":\"719f22be\",\"183\":\"8ae1f045\",\"316\":\"f9118367\",\"411\":\"fe803b14\",\"449\":\"53143699\",\"520\":\"0da1ba36\",\"523\":\"78225d1d\",\"578\":\"8342cdd8\",\"590\":\"b813b7af\",\"593\":\"9cc2f1bb\",\"601\":\"492a1fdb\",\"659\":\"df193380\",\"749\":\"14a153d6\",\"779\":\"cfef3458\",\"874\":\"c97e7028\",\"968\":\"b3685346\",\"983\":\"b2186245\"}[chunkId] + \".js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"css/\" + chunkId + \".\" + {\"8\":\"f875b7c4\",\"17\":\"a3578cc9\",\"70\":\"f5a30594\",\"135\":\"b62c6c90\",\"139\":\"258f6011\",\"183\":\"ee1d6a22\",\"316\":\"d07cef2b\",\"411\":\"ee1d6a22\",\"449\":\"6a04af31\",\"523\":\"f5a30594\",\"578\":\"0ad71660\",\"590\":\"857b1825\",\"601\":\"33dda0da\",\"659\":\"78391c79\",\"749\":\"f875b7c4\",\"779\":\"a37b1565\",\"874\":\"9635a80b\",\"968\":\"6e771422\",\"983\":\"1a79a7c7\"}[chunkId] + \".css\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var inProgress = {};\nvar dataWebpackPrefix = \"cosmos-telegram-signer:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = function(url, done, key, chunkId) {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = function(prev, event) {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach(function(fn) { return fn(event); });\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/\";","if (typeof document === \"undefined\") return;\nvar createStylesheet = function(chunkId, fullhref, oldTag, resolve, reject) {\n\tvar linkTag = document.createElement(\"link\");\n\n\tlinkTag.rel = \"stylesheet\";\n\tlinkTag.type = \"text/css\";\n\tif (__webpack_require__.nc) {\n\t\tlinkTag.nonce = __webpack_require__.nc;\n\t}\n\tvar onLinkComplete = function(event) {\n\t\t// avoid mem leaks.\n\t\tlinkTag.onerror = linkTag.onload = null;\n\t\tif (event.type === 'load') {\n\t\t\tresolve();\n\t\t} else {\n\t\t\tvar errorType = event && event.type;\n\t\t\tvar realHref = event && event.target && event.target.href || fullhref;\n\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + errorType + \": \" + realHref + \")\");\n\t\t\terr.name = \"ChunkLoadError\";\n\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n\t\t\terr.type = errorType;\n\t\t\terr.request = realHref;\n\t\t\tif (linkTag.parentNode) linkTag.parentNode.removeChild(linkTag)\n\t\t\treject(err);\n\t\t}\n\t}\n\tlinkTag.onerror = linkTag.onload = onLinkComplete;\n\tlinkTag.href = fullhref;\n\n\n\tif (oldTag) {\n\t\toldTag.parentNode.insertBefore(linkTag, oldTag.nextSibling);\n\t} else {\n\t\tdocument.head.appendChild(linkTag);\n\t}\n\treturn linkTag;\n};\nvar findStylesheet = function(href, fullhref) {\n\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n\tfor(var i = 0; i < existingLinkTags.length; i++) {\n\t\tvar tag = existingLinkTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return tag;\n\t}\n\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n\tfor(var i = 0; i < existingStyleTags.length; i++) {\n\t\tvar tag = existingStyleTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\");\n\t\tif(dataHref === href || dataHref === fullhref) return tag;\n\t}\n};\nvar loadStylesheet = function(chunkId) {\n\treturn new Promise(function(resolve, reject) {\n\t\tvar href = __webpack_require__.miniCssF(chunkId);\n\t\tvar fullhref = __webpack_require__.p + href;\n\t\tif(findStylesheet(href, fullhref)) return resolve();\n\t\tcreateStylesheet(chunkId, fullhref, null, resolve, reject);\n\t});\n}\n// object to store loaded CSS chunks\nvar installedCssChunks = {\n\t524: 0\n};\n\n__webpack_require__.f.miniCss = function(chunkId, promises) {\n\tvar cssChunks = {\"8\":1,\"17\":1,\"70\":1,\"135\":1,\"139\":1,\"183\":1,\"316\":1,\"411\":1,\"449\":1,\"523\":1,\"578\":1,\"590\":1,\"601\":1,\"659\":1,\"749\":1,\"779\":1,\"874\":1,\"968\":1,\"983\":1};\n\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n\t\tpromises.push(installedCssChunks[chunkId] = loadStylesheet(chunkId).then(function() {\n\t\t\tinstalledCssChunks[chunkId] = 0;\n\t\t}, function(e) {\n\t\t\tdelete installedCssChunks[chunkId];\n\t\t\tthrow e;\n\t\t}));\n\t}\n};\n\n// no hmr\n\n// no prefetching\n\n// no preloaded","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n__webpack_require__.f.j = function(chunkId, promises) {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise(function(resolve, reject) { installedChunkData = installedChunks[chunkId] = [resolve, reject]; });\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = function(event) {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkcosmos_telegram_signer\"] = self[\"webpackChunkcosmos_telegram_signer\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(95578); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["en","message","i18n","createI18n","locale","fallbackLocale","messages","VueI18nMessages","store","useGlobalStore","inject","route","useRoute","emitter","title","useTitle","isReseting","ref","layout","computed","meta","notification","useNotification","notificationTimeout","notificationAnimation","enter","translateY","leave","network","reactive","useNetwork","notificationsOnStart","params","data","isCollapsible","value","setTimeout","document","querySelector","classList","add","notificationsCollapsingDelay","notificationsOnDestroy","onBeforeMount","global","t","tgInit","watch","currentWalletID","async","newValue","oldValue","DBWallets","DBgetData","undefined","notify","group","clean","initApp","currentNetwork","isInitialized","forcedUnlock","isOnline","speed","duration","type","on","remove","__exports__","class","_createElementBlock","_hoisted_1","_createVNode","_component_router_view","default","_withCtx","Component","_createBlock","_resolveDynamicComponent","_","script","render","startY","isPulling","threshold","hasUpdated","handleTouchStart","e","window","scrollY","touches","pageY","handleTouchMove","networks","currentTxHash","emit","currentY","distance","preventDefault","stopPropagation","isAnyModalOpen","account","updateAllBalances","handleTouchEnd","onMounted","addEventListener","passive","onUnmounted","removeEventListener","routes","path","name","component","defaultLayout","accessDenied","accountLayout","router","createRouter","history","createWebHistory","beforeResolve","to","from","next","DBData","DBgetMultipleData","authTimestamp","Date","authTime","isAuthorized","auth","matched","some","record","access","length","includes","isRegister","isUserLock","userLockTimestamp","userLockTime","afterEach","_paq","push","location","href","event","Event","dispatchEvent","vFocus","mounted","el","focus","vParallax","offsetHeight","style","opacity","transform","vOdometer","number","numberArr","toFixed","split","innerHTML","map","char","join","updated","oldNumberArr","maxLength","Math","max","html","mismatchIndex","mismatchCount","animationDuration","animationDelay","concat","Array","fill","i","parseFloat","mitt","app","createApp","App","pinia","createPinia","use","Notifications","velocity","VueMatomo","host","siteId","provide","directive","register","VueCountdown","mount","lcd_api","rpc_api","websocket_url","denom","token_name","chain_id","prefix","explorer_link","alias","exponent","gas_adjustment","address_length","gas_amount_send","gas_amount_claim","gas_amount_stake","gas_amount_unstake","gas_amount_redelegate","is_staking_available","logo","networksAdditionalOptions","websocket","unbondingTime","totalBondedTokens","totalUnstakingTokens","isUnstakingCancelSupport","defineStore","state","isInitializing","isBalancesGot","isStakedBalancesGot","isRewardsGot","isUnstakingBalancesGot","isAgeConfirmed","defaultDerivationPath","authErrorLimit","DBVersion","currentWalletDerivationPath","currentWalletName","currentAddress","currentCurrency","currentCurrencySymbol","IBCSendCurrentChain","stakeCurrentValidator","unstakeCurrentValidator","redelegateValidatorFrom","redelegateValidatorTo","wallets","prices","balances","stakedBalances","rewardsBalances","unstakingBalances","redelegations","defaultWalletName","cacheTime","TxFee","balance","currentLevel","userGasAmount","gasAmount","isRemember","isGasAdjustmentAuto","isEnough","cosmoshub","Object","assign","osmosis","bostrom","dymension","gravitybridge","neutron","omniflix","pion","stride","formatableTokens","format_token_name","actions","getCurrentDBVersion","DBCurrentVersion","localStorage","getItem","this","setItem","setNewDBVersion","getCurrentWalletID","DBCurrentWalletID","setCurrentWalletID","walletID","DBaddData","promises","updateUserAuthErrorLimit","toISOString","Promise","all","derivationPath","TxFeeCurrentLevel","TxFeeIsRemember","cacheCurrentAddress","address","getAddress","getCurrenciesPrice","getCurrentNetworkAPR","connectWebsocket","getBalances","getStakedBalances","then","error","console","log","cachePrices","timestamp","fetch","response","json","cacheAPR","chain","infos","find","toLowerCase","APR","apr","JSON","parse","stringify","forceUpdate","cacheBalances","getBalanceInfo","filter","obj","hasOwnProperty","cacheStakedBalances","delegation_responses","amount","item","getValidatorInfo","delegation","validator_address","getRewards","total","chain_info","getUnstakingBalances","unbonding_responses","entries","forEach","entry","parseInt","getRedelegations","redelegation_responses","base_denom","denomTraces","old_base_denom","asset","assets","currentAsset","chain_name","tokenInfo","token","base","token_info","formatableToken","toUpperCase","denom_units","chains","price","getPriceByDenom","symbol","hasNativeToken","res","validator_info","validator","getSecret","current","DBSecret","DBSecretPartTwo","restoredSecret","sss","restoredUint8Array","Uint8Array","decryptData","getPrivateKey","findMissingId","missingId","ids","id","findNextAvailableWalletName","setSecret","secret","aesKey","generateAESKey","ciphertext","iv","encryptData","shares","Buffer","DBcheckStoreName","setPrivateKey","privateKey","setCurrentNetwork","createWallet","pinCode","walletName","isBiometricEnabled","isAdding","relativeWallet","availableWalletName","hmacKey","generateHMACKey","hashDataWithKey","createFromExistWallet","currentWalletSecret","subWallets","newWalletID","replace","getCurrentWalletCreatedBy","limit","updateTxFeeInfo","updateCurrentCurrency","values","onopen","onmessage","close","WebSocket","send","jsonrpc","method","query","parsedMsg","msg","result","keys","resetTxFee","checkTxResult","TxFeeGetCurrentBalance","baseDenom","TxFeeSetGasPrices","lowPrice","fees","fee_tokens","fixed_min_gas_price","low_gas_price","averagePrice","highPrice","TxFeeIsEnough","setListenerCurrentTx","getTxInfo","txHash","txResult","code","tx_response","getExplorerLink","errorText","text","getNetworkUnbondingTime","unbonding_time","getAllValidators","validators","getUserValidators","getTotalBondedTokens","pool","bonded_tokens","cacheIsUnstakingCancelSupport","cosmos_sdk_version","application_version","min_version","cosmos_sdk_version_parsed","Number","min_version_parsed","getWallets","updateWallet","wallet","new_name","currentWallet","removeWallet","DBclearStore","DBdeleteData","setAgeConfirmed","getAgeConfirmed","DBAgeConfirmed","setUserLock","setUserUnlock","setUserChannel","channel","userChannels","updateUserChannel","oldChannel","info","pretty_name","old","channel_id","getAllUserChannels","deleteUserChannel","chainName","clearAllData","DBclearAllData","$reset","DB","getStore","dbPromise","isFirstRun","deleteDB","openDB","upgrade","db","objectStoreNames","contains","createObjectStore","storeName","key","get","results","keyValueMap","index","tx","transaction","objectStore","put","done","delete","clear","generateWallet","DirectSecp256k1HdWallet","generate","count","importWalletFromMnemonic","mnemonic","fromMnemonic","hdPaths","stringToPath","importWalletFromPrivateKey","DirectSecp256k1Wallet","fromKey","fromHex","encoder","TextEncoder","encodedData","encode","cryptoKey","crypto","subtle","importKey","hash","signature","sign","hashArray","hashHex","byte","toString","slice","generateKey","exportedKey","exportKey","getRandomValues","encodedText","encrypt","decrypted","decrypt","decoder","TextDecoder","decode","getAccounts","createSinger","signingClient","SigningStargateClient","connectWithSigner","signingCosmWasmClient","SigningCosmWasmClient","string","denom_trace","ingnoreTraces","formatTokenAmount","pow","formatTokenCost","cost","currency","toLocaleString","maximumFractionDigits","minimumFractionDigits","formatTokenName","tokenName","formatPrice","currencyConversion","currentCurrencyPrice","calcTokenCost","formatAmount","calcBalancesCost","totalPrice","calcStakedBalancesCost","calcRewardsBalancesCost","calcAvailableAmount","calcStakedAmount","totalAmount","calcUnstakingAmount","getNetworkLogo","chainId","logo_URIs","svg","png","images","simulateTx","memo","gasUsed","simulate","signTx","fee","gas","txRaw","txBytes","TxRaw","finish","sha256","sendTx","broadcastTx","broadcastTimeoutMs","broadcastPollIntervalMs","imageLoadError","target","imageLoadSuccess","dateCalc","date","currentDate","userTimeZone","getTimezoneOffset","setHours","getHours","convertAddress","fromBech32","toBech32","redirectToSend","parsedData","useRouter","stopWatch","Telegram","WebApp","ready","expand","setHeaderColor","MainButton","showProgress","disableVerticalSwipes","BiometricManager","init","showConfirm","onEvent","closeScanQrPopup","_cache","_createElementVNode","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","call","m","amdO","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","f","chunkId","reduce","u","miniCssF","g","globalThis","Function","prop","prototype","inProgress","dataWebpackPrefix","l","url","needAttach","scripts","getElementsByTagName","s","getAttribute","createElement","charset","timeout","nc","setAttribute","src","onScriptComplete","prev","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","bind","head","appendChild","Symbol","toStringTag","nmd","paths","children","p","createStylesheet","fullhref","oldTag","resolve","reject","linkTag","rel","nonce","onLinkComplete","errorType","realHref","err","Error","request","insertBefore","nextSibling","findStylesheet","existingLinkTags","tag","dataHref","existingStyleTags","loadStylesheet","installedCssChunks","miniCss","cssChunks","installedChunks","installedChunkData","promise","loadingEnded","realSrc","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","self","__webpack_exports__"],"sourceRoot":""}