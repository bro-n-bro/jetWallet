{"version":3,"file":"js/148.0448ec94.js","mappings":"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","sources":["webpack://cosmos-telegram-signer/./node_modules/bip39/src/_wordlists.js","webpack://cosmos-telegram-signer/./node_modules/bip39/src/index.js","webpack://cosmos-telegram-signer/./src/components/modal/WrongSeedsModal.vue","webpack://cosmos-telegram-signer/./src/components/modal/WrongSeedsModal.vue?2ff9","webpack://cosmos-telegram-signer/./src/components/modal/SeedPhraseHintModal.vue","webpack://cosmos-telegram-signer/./src/components/modal/SeedPhraseHintModal.vue?0f3c","webpack://cosmos-telegram-signer/./src/components/createWallet/ConfirmPage.vue","webpack://cosmos-telegram-signer/./src/components/createWallet/ConfirmPage.vue?9d85"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// browserify by default only pulls in files that are hard coded in requires\n// In order of last to first in this file, the default wordlist will be chosen\n// based on what is present. (Bundles may remove wordlists they don't need)\nconst wordlists = {};\nexports.wordlists = wordlists;\nlet _default;\nexports._default = _default;\ntry {\n    exports._default = _default = require('./wordlists/czech.json');\n    wordlists.czech = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/chinese_simplified.json');\n    wordlists.chinese_simplified = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/chinese_traditional.json');\n    wordlists.chinese_traditional = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/korean.json');\n    wordlists.korean = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/french.json');\n    wordlists.french = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/italian.json');\n    wordlists.italian = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/spanish.json');\n    wordlists.spanish = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/japanese.json');\n    wordlists.japanese = _default;\n    wordlists.JA = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/portuguese.json');\n    wordlists.portuguese = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/english.json');\n    wordlists.english = _default;\n    wordlists.EN = _default;\n}\ncatch (err) { }\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst sha512_1 = require(\"@noble/hashes/sha512\");\nconst pbkdf2_1 = require(\"@noble/hashes/pbkdf2\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst _wordlists_1 = require(\"./_wordlists\");\nlet DEFAULT_WORDLIST = _wordlists_1._default;\nconst INVALID_MNEMONIC = 'Invalid mnemonic';\nconst INVALID_ENTROPY = 'Invalid entropy';\nconst INVALID_CHECKSUM = 'Invalid mnemonic checksum';\nconst WORDLIST_REQUIRED = 'A wordlist is required but a default could not be found.\\n' +\n    'Please pass a 2048 word array explicitly.';\nfunction normalize(str) {\n    return (str || '').normalize('NFKD');\n}\nfunction lpad(str, padString, length) {\n    while (str.length < length) {\n        str = padString + str;\n    }\n    return str;\n}\nfunction binaryToByte(bin) {\n    return parseInt(bin, 2);\n}\nfunction bytesToBinary(bytes) {\n    return bytes.map((x) => lpad(x.toString(2), '0', 8)).join('');\n}\nfunction deriveChecksumBits(entropyBuffer) {\n    const ENT = entropyBuffer.length * 8;\n    const CS = ENT / 32;\n    const hash = sha256_1.sha256(Uint8Array.from(entropyBuffer));\n    return bytesToBinary(Array.from(hash)).slice(0, CS);\n}\nfunction salt(password) {\n    return 'mnemonic' + (password || '');\n}\nfunction mnemonicToSeedSync(mnemonic, password) {\n    const mnemonicBuffer = Uint8Array.from(Buffer.from(normalize(mnemonic), 'utf8'));\n    const saltBuffer = Uint8Array.from(Buffer.from(salt(normalize(password)), 'utf8'));\n    const res = pbkdf2_1.pbkdf2(sha512_1.sha512, mnemonicBuffer, saltBuffer, {\n        c: 2048,\n        dkLen: 64,\n    });\n    return Buffer.from(res);\n}\nexports.mnemonicToSeedSync = mnemonicToSeedSync;\nfunction mnemonicToSeed(mnemonic, password) {\n    const mnemonicBuffer = Uint8Array.from(Buffer.from(normalize(mnemonic), 'utf8'));\n    const saltBuffer = Uint8Array.from(Buffer.from(salt(normalize(password)), 'utf8'));\n    return pbkdf2_1.pbkdf2Async(sha512_1.sha512, mnemonicBuffer, saltBuffer, {\n        c: 2048,\n        dkLen: 64,\n    }).then((res) => Buffer.from(res));\n}\nexports.mnemonicToSeed = mnemonicToSeed;\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    if (!wordlist) {\n        throw new Error(WORDLIST_REQUIRED);\n    }\n    const words = normalize(mnemonic).split(' ');\n    if (words.length % 3 !== 0) {\n        throw new Error(INVALID_MNEMONIC);\n    }\n    // convert word indices to 11 bit binary strings\n    const bits = words\n        .map((word) => {\n        const index = wordlist.indexOf(word);\n        if (index === -1) {\n            throw new Error(INVALID_MNEMONIC);\n        }\n        return lpad(index.toString(2), '0', 11);\n    })\n        .join('');\n    // split the binary string into ENT/CS\n    const dividerIndex = Math.floor(bits.length / 33) * 32;\n    const entropyBits = bits.slice(0, dividerIndex);\n    const checksumBits = bits.slice(dividerIndex);\n    // calculate the checksum and compare\n    const entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);\n    if (entropyBytes.length < 16) {\n        throw new Error(INVALID_ENTROPY);\n    }\n    if (entropyBytes.length > 32) {\n        throw new Error(INVALID_ENTROPY);\n    }\n    if (entropyBytes.length % 4 !== 0) {\n        throw new Error(INVALID_ENTROPY);\n    }\n    const entropy = Buffer.from(entropyBytes);\n    const newChecksum = deriveChecksumBits(entropy);\n    if (newChecksum !== checksumBits) {\n        throw new Error(INVALID_CHECKSUM);\n    }\n    return entropy.toString('hex');\n}\nexports.mnemonicToEntropy = mnemonicToEntropy;\nfunction entropyToMnemonic(entropy, wordlist) {\n    if (!Buffer.isBuffer(entropy)) {\n        entropy = Buffer.from(entropy, 'hex');\n    }\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    if (!wordlist) {\n        throw new Error(WORDLIST_REQUIRED);\n    }\n    // 128 <= ENT <= 256\n    if (entropy.length < 16) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    if (entropy.length > 32) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    if (entropy.length % 4 !== 0) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    const entropyBits = bytesToBinary(Array.from(entropy));\n    const checksumBits = deriveChecksumBits(entropy);\n    const bits = entropyBits + checksumBits;\n    const chunks = bits.match(/(.{1,11})/g);\n    const words = chunks.map((binary) => {\n        const index = binaryToByte(binary);\n        return wordlist[index];\n    });\n    return wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093' // Japanese wordlist\n        ? words.join('\\u3000')\n        : words.join(' ');\n}\nexports.entropyToMnemonic = entropyToMnemonic;\nfunction generateMnemonic(strength, rng, wordlist) {\n    strength = strength || 128;\n    if (strength % 32 !== 0) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    rng = rng || ((size) => Buffer.from(utils_1.randomBytes(size)));\n    return entropyToMnemonic(rng(strength / 8), wordlist);\n}\nexports.generateMnemonic = generateMnemonic;\nfunction validateMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nexports.validateMnemonic = validateMnemonic;\nfunction setDefaultWordlist(language) {\n    const result = _wordlists_1.wordlists[language];\n    if (result) {\n        DEFAULT_WORDLIST = result;\n    }\n    else {\n        throw new Error('Could not find wordlist for language \"' + language + '\"');\n    }\n}\nexports.setDefaultWordlist = setDefaultWordlist;\nfunction getDefaultWordlist() {\n    if (!DEFAULT_WORDLIST) {\n        throw new Error('No Default Wordlist set');\n    }\n    return Object.keys(_wordlists_1.wordlists).filter((lang) => {\n        if (lang === 'JA' || lang === 'EN') {\n            return false;\n        }\n        return _wordlists_1.wordlists[lang].every((word, index) => word === DEFAULT_WORDLIST[index]);\n    })[0];\n}\nexports.getDefaultWordlist = getDefaultWordlist;\nvar _wordlists_2 = require(\"./_wordlists\");\nexports.wordlists = _wordlists_2.wordlists;\n","<template>\n    <!-- Wring seeds modal -->\n    <section class=\"modal\">\n        <div class=\"modal_content\">\n            <div class=\"data\" :class=\"{ closing: isClosing }\">\n                <!-- Close button -->\n                <button class=\"close_btn\" @click.prevent=\"closeHandler()\">\n                    <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_close\"></use></svg>\n                </button>\n\n                <!-- Modal title -->\n                <div class=\"modal_title\">\n                    {{ $t('message.wrong_seeds_title') }}\n                </div>\n\n                <!-- Modal image -->\n                <div class=\"image\">\n                    <img src=\"@/assets/wrong_seeds_img.svg\" alt=\"\">\n                </div>\n\n                <!-- Modal desc -->\n                <div class=\"modal_desc\">\n                    {{ $t('message.wrong_seeds_desc') }}\n                </div>\n\n                <!-- Modal buttons -->\n                <div class=\"btns\">\n                    <!-- Try button -->\n                    <button class=\"btn\" @click.prevent=\"closeHandler()\">\n                        <span>{{ $t('message.btn_try') }}</span>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </section>\n\n\n    <!-- Modal overlay -->\n    <div class=\"modal_overlay\" :class=\"{ closing: isClosing }\" @click.prevent=\"closeHandler()\"></div>\n</template>\n\n\n<script setup>\n    import { ref, inject, onMounted, onUnmounted } from 'vue'\n\n\n    const emitter = inject('emitter'),\n        isClosing = ref(false)\n\n\n    onMounted(() => {\n        // Event \"close_any_modal\"\n        emitter.on('close_any_modal', closeHandler)\n    })\n\n\n    onUnmounted(() => {\n        // Unlisten events\n        emitter.off('close_any_modal', closeHandler)\n    })\n\n\n    // Close modal\n    function closeHandler() {\n        // Closing animation\n        isClosing.value = true\n\n        setTimeout(() => {\n            // Event \"close_wrong_seeds_modal\"\n            emitter.emit('close_wrong_seeds_modal')\n        }, 200)\n    }\n</script>\n\n\n<style scoped>\n    .modal_content\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 100%;\n        height: 100%;\n        min-height: 0;\n        padding: 0;\n    }\n\n\n    .modal_content .data\n    {\n        width: 220px;\n        padding: 20px;\n\n        animation: .25s fadeIn forwards linear;\n\n        border-radius: 18px;\n    }\n\n\n    .modal_content .data.closing\n    {\n        animation: .2s fadeOut forwards linear;\n    }\n\n\n    .modal_content .data:before\n    {\n        display: none;\n    }\n\n\n    .modal_content .close_btn\n    {\n        top: 0;\n        right: 0;\n\n        width: 52px;\n        height: 52px;\n    }\n\n\n    .modal_content .modal_title\n    {\n        font-size: 18px;\n        font-weight: 700;\n\n        text-align: center;\n    }\n\n\n\n    .image\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        height: 120px;\n        margin-top: 22px;\n    }\n\n\n    .image img\n    {\n        display: block;\n\n        max-width: 100%;\n        max-height: 100%;\n\n        filter: drop-shadow(0px 0px 146.2px rgba(24, 0, 54, .55));\n    }\n\n\n    .modal_content .modal_desc\n    {\n        font-weight: 400;\n\n        margin-top: 17px;\n    }\n\n\n    .btns\n    {\n        margin-top: 20px;\n    }\n</style>","import script from \"./WrongSeedsModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./WrongSeedsModal.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./WrongSeedsModal.vue?vue&type=style&index=0&id=63d3ffda&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-63d3ffda\"]])\n\nexport default __exports__","<template>\n    <!-- Seed phrase hint modal -->\n    <section class=\"modal\">\n        <div class=\"modal_content\">\n            <div class=\"data\" :class=\"{ closing: isClosing }\">\n                <!-- Close button -->\n                <button class=\"close_btn\" @click.prevent=\"closeHandler()\">\n                    <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_close\"></use></svg>\n                </button>\n\n                <!-- Modal title -->\n                <div class=\"modal_title\">\n                    {{ $t('message.seed_phrase_hint_title') }}\n                </div>\n\n                <!-- Seed phrase hin modal data -->\n                <div class=\"mnemonic_wrap\">\n                    <div class=\"mnemonic\">\n                        <div v-for=\"(word, index) in props.mnemonic.split(' ')\" :key=\"index\">\n                            {{ index + 1 }}. {{ word }}\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Seed phrase hin button -->\n                <div class=\"btns\">\n                    <!-- Copy button -->\n                    <button class=\"btn copy_btn\" @click.prevent=\"copyHandler()\">\n                        <span>\n                            {{ $t('message.btn_copy') }}\n                            <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_copy\"></use></svg>\n                        </span>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </section>\n\n\n    <!-- Modal overlay -->\n    <div class=\"modal_overlay\" :class=\"{ closing: isClosing }\" @click.prevent=\"closeHandler()\"></div>\n</template>\n\n\n<script setup>\n    import { ref, inject, onMounted, onUnmounted } from 'vue'\n    import { useNotification } from '@kyvg/vue3-notification'\n    import { useClipboard } from '@vueuse/core'\n\n\n    const props = defineProps(['mnemonic']),\n        emitter = inject('emitter'),\n        i18n = inject('i18n'),\n        notification = useNotification(),\n        { copy } = useClipboard(),\n        isClosing = ref(false)\n\n\n    onMounted(() => {\n        // Event \"close_any_modal\"\n        emitter.on('close_any_modal', closeHandler)\n    })\n\n\n    onUnmounted(() => {\n        // Unlisten events\n        emitter.off('close_any_modal', closeHandler)\n    })\n\n\n    // Close modal\n    function closeHandler() {\n        // Closing animation\n        isClosing.value = true\n\n        setTimeout(() => {\n            // Event \"close_seed_phrase_hint_modal\"\n            emitter.emit('close_seed_phrase_hint_modal')\n        }, 200)\n    }\n\n\n    // Copy handler\n    function copyHandler() {\n        // Copy\n        copy(props.mnemonic)\n\n        // Clean notifications\n        notification.notify({\n            group: 'default',\n            clean: true\n        })\n\n        // Show notification\n        notification.notify({\n            group: 'default',\n            speed: 200,\n            duration: 750,\n            title: i18n.global.t('message.notification_copied_title'),\n            type: 'copied'\n        })\n    }\n</script>\n\n\n<style scoped>\n    .modal_title\n    {\n        padding-left: 10px;\n    }\n\n\n    .mnemonic_wrap\n    {\n        margin-top: 15px;\n        padding: 1px;\n\n        border-radius: 10px;\n        background: linear-gradient(to bottom, #5d33ce 0%, #200750 100%);\n    }\n\n\n    .mnemonic\n    {\n        font-size: 16px;\n\n        padding: 7px 5px;\n\n        border-radius: 9px;\n        background: #06000e;\n\n        column-gap: 8px;\n        column-count: 2;\n    }\n\n\n    .mnemonic > *\n    {\n        padding: 2px 8px 2px 4px;\n\n        transform: translateZ(0);\n\n        --webkit-column-break-inside: avoid;\n        page-break-inside: avoid;\n        break-inside: avoid;\n    }\n\n\n    .mnemonic > * + *\n    {\n        margin-top: 8px;\n    }\n\n\n\n    .btns .btn span\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        gap: 10px;\n    }\n\n\n    .btns .btn .icon\n    {\n        display: block;\n\n        width: 24px;\n        height: 24px;\n    }\n</style>","import script from \"./SeedPhraseHintModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SeedPhraseHintModal.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./SeedPhraseHintModal.vue?vue&type=style&index=0&id=2755c238&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-2755c238\"]])\n\nexport default __exports__","<template>\n    <!-- Confirm create wallet page -->\n    <section class=\"page_container confirm_create_wallet_page\">\n        <div class=\"cont\">\n            <!-- Confirm create wallet page title -->\n            <div class=\"page_title\">\n                {{ $t('message.create_wallet_confirm_title') }}\n            </div>\n\n            <!-- Confirm create wallet page data -->\n            <div class=\"page_data_wrap\">\n                <div class=\"page_data\">\n                    <!-- Loader -->\n                    <Loader v-if=\"loading\" />\n\n                    <!-- Back button -->\n                    <router-link class=\"back_btn\" to=\"/create_wallet\">\n                        <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_arrow_hor\"></use></svg>\n                    </router-link>\n\n                    <!-- Confirm data -->\n                    <div class=\"confirm\">\n                        <!-- Confirm first word -->\n                        <div>\n                            <!-- Confirm word label -->\n                            <div class=\"label\">\n                                <span>{{ $t('message.confirm_label') }}</span>\n                                <span>{{ wordOneNumber }}.</span>\n                            </div>\n\n                            <!-- Confirm word options -->\n                            <div class=\"options\">\n                                <div v-for=\"(word, index) in wordOneOptions\" :key=\"index\">\n                                    <button class=\"btn\" :class=\"{ selected: wordOneAnswer === word }\" @click.prevent=\"wordOneAnswer = word\">\n                                        <span>{{ word }}</span>\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n\n                        <!-- Confirm second word -->\n                        <div>\n                            <!-- Confirm word label -->\n                            <div class=\"label\">\n                                <span>{{ $t('message.confirm_label') }}</span>\n                                <span>{{ wordTwoNumber }}.</span>\n                            </div>\n\n                            <!-- Confirm word options -->\n                            <div class=\"options\">\n                                <div v-for=\"(word, index) in wordTwoOptions\" :key=\"index\">\n                                    <button class=\"btn\" :class=\"{ selected: wordTwoAnswer === word }\" @click.prevent=\"wordTwoAnswer = word\">\n                                        <span>{{ word }}</span>\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <!-- Show seed phrase -->\n                    <div class=\"show_seed_phrase\" v-if=\"failures >= store.confirmSeedsErrorLimit\">\n                        <button class=\"btn\" @click.prevent=\"openSeedPhraseHintModal()\">\n                            {{ $t('message.btn_show_seed_phrase') }}\n                        </button>\n                    </div>\n\n                    <!-- Confirm create wallet page buttons -->\n                    <div class=\"btns\">\n                        <!-- Next button -->\n                        <div class=\"btn\" :class=\"{ disabled: !wordOneAnswer || !wordTwoAnswer }\" @click.prevent=\"check()\">\n                            <span>{{ $t('message.btn_next') }}</span>\n                        </div>\n                    </div>\n\n                    <!-- Confirm create wallet page text -->\n                    <div class=\"exp\">\n                        {{ $t('message.confirm_exp') }}\n                    </div>\n                </div>\n            </div>\n        </div>\n    </section>\n\n\n    <!-- Wrong seeds modal -->\n    <WrongSeedsModal v-if=\"showWrongSeedsModal\" />\n\n    <!-- Seed phrase hint modal -->\n    <SeedPhraseHintModal v-if=\"showSeedPhraseHintModal\" :mnemonic=\"mnemonic\" />\n</template>\n\n\n<script setup>\n    import { ref, onBeforeMount, onMounted, onUnmounted, inject } from 'vue'\n    import { useRouter } from 'vue-router'\n    import { useGlobalStore } from '@/store'\n    import { useNotification } from '@kyvg/vue3-notification'\n    import * as bip39 from 'bip39'\n\n    // Components\n    import Loader from '@/components/Loader.vue'\n    import WrongSeedsModal from '@/components/modal/WrongSeedsModal.vue'\n    import SeedPhraseHintModal from '@/components/modal/SeedPhraseHintModal.vue'\n\n\n    const props = defineProps(['isAdding']),\n        store = useGlobalStore(),\n        router = useRouter(),\n        emitter = inject('emitter'),\n        notification = useNotification(),\n        i18n = inject('i18n'),\n        loading = ref(true),\n        mnemonic = ref(null),\n        mnemonicArr = ref([]),\n        wordlist = bip39.wordlists.english,\n        wordOneOptions = ref([]),\n        wordTwoOptions = ref([]),\n        wordOneNumber = ref(null),\n        wordTwoNumber = ref(null),\n        wordOneAnswer = ref(null),\n        wordTwoAnswer = ref(null),\n        showWrongSeedsModal = ref(false),\n        showSeedPhraseHintModal = ref(false),\n        failures = ref(0)\n\n\n    onBeforeMount(async () => {\n        try {\n            // Get mnemonic\n            mnemonic.value = await store.getSecret()\n            mnemonicArr.value = mnemonic.value.split(' ')\n\n            // Get random words\n            getRandomWords()\n\n            // Generate options\n            wordOneOptions.value = generateOptions(mnemonicArr.value[wordOneNumber.value - 1])\n            wordTwoOptions.value = generateOptions(mnemonicArr.value[wordTwoNumber.value - 1])\n\n            // Hide loader\n            loading.value = false\n        } catch (error) {\n            console.error(`Components/CreateWallet/ConfirmPage.vue: ${error.message}`)\n        }\n    })\n\n\n    onMounted(() => {\n        // Event \"close_wrong_seeds_modal\"\n        emitter.on('close_wrong_seeds_modal', closeWrongSeedsModal)\n\n        // Event \"close_seed_phrase_hint_modal\"\n        emitter.on('close_seed_phrase_hint_modal', closeSeedPhraseHintModal)\n    })\n\n\n    onUnmounted(() => {\n        // Unlisten events\n        emitter.off('close_wrong_seeds_modal', closeWrongSeedsModal)\n        emitter.off('close_seed_phrase_hint_modal', closeSeedPhraseHintModal)\n    })\n\n\n    // Get random words\n    function getRandomWords() {\n        let min = 1,\n            max = mnemonicArr.value.length\n\n        // Generate the first random number\n        wordOneNumber.value = Math.floor(Math.random() * (max - min + 1)) + min\n\n        // Generate the second random number\n        do {\n            wordTwoNumber.value = Math.floor(Math.random() * (max - min + 1)) + min\n        } while (wordOneNumber.value === wordTwoNumber.value)\n    }\n\n\n    // Generate options\n    function generateOptions(word) {\n        let result = [],\n            randomIndex = Math.floor(Math.random() * 6),\n            usedWords = new Set()\n\n        // Set right option\n        result[randomIndex] = word\n        usedWords.add(word)\n\n        // Fill the remaining positions with random options\n        for (let i = 0; i < 6; i++) {\n            if (i !== randomIndex) {\n                let randomOption\n\n                // Get random option\n                do {\n                    let randomOptionIndex = Math.floor(Math.random() * wordlist.length)\n\n                    randomOption = wordlist[randomOptionIndex]\n                } while (usedWords.has(randomOption))\n\n                // Set option\n                result[i] = randomOption\n                usedWords.add(randomOption)\n            }\n        }\n\n        return result\n    }\n\n\n    // Validate answers\n    function validateAnswers() {\n        let result = true\n\n        // Check first word\n        if (wordOneAnswer.value !== mnemonicArr.value[wordOneNumber.value - 1]) {\n            result = false\n        }\n\n        // Check second word\n        if (wordTwoAnswer.value !== mnemonicArr.value[wordTwoNumber.value - 1]) {\n            result = false\n        }\n\n        return result\n    }\n\n\n    // Check\n    async function check() {\n        // Show loader\n        loading.value = true\n\n        // Validate answers\n        let result = validateAnswers()\n\n        if (result) {\n            try {\n                // Save\n                await save()\n            } catch (error) {\n                console.error(`Components/CreateWallet/ConfirmPage.vue: ${error.message}`)\n            }\n        } else {\n            // Set a failed attempt\n            failures.value++\n\n            // Show wrong seeds modal\n            showWrongSeedsModal.value = true\n\n            // Hide loader\n            loading.value = false\n        }\n    }\n\n\n    // Save\n    async function save() {\n        if (props.isAdding) {\n            try {\n                // Save in DB\n                await store.createWallet({\n                    isAdding: true\n                })\n\n                // Redirect\n                router.push('/account')\n\n                // Event \"show_wallets_modal\"\n                emitter.emit('show_wallets_modal')\n\n                // Show notification\n                notification.notify({\n                    group: 'default',\n                    speed: 200,\n                    duration: 1000,\n                    title: i18n.global.t('message.notification_wallet_added_success'),\n                    type: 'success',\n                })\n            } catch (error) {\n                console.error(`Components/CreateWallet/ConfirmPage.vue: ${error.message}`)\n            }\n        } else {\n            // Redirect\n            router.push('/create_pin')\n        }\n    }\n\n\n    // Close wrong seeds modal\n    function closeWrongSeedsModal() {\n        // Hide wrong seeds modal\n        showWrongSeedsModal.value = false\n\n        // Get random words\n        getRandomWords()\n\n        // Generate options\n        wordOneOptions.value = generateOptions(mnemonicArr.value[wordOneNumber.value - 1])\n        wordTwoOptions.value = generateOptions(mnemonicArr.value[wordTwoNumber.value - 1])\n    }\n\n\n    // Open seed phrase hint modal\n    function openSeedPhraseHintModal() {\n        // Show seed phrase hint modal\n        showSeedPhraseHintModal.value = true\n\n        // Update status\n        store.isAnyModalOpen = true\n    }\n\n\n    // Close seed phrase hint modal\n    function closeSeedPhraseHintModal() {\n        // Reset errors limit\n        failures.value = 0\n\n        // Get random words\n        getRandomWords()\n\n        // Generate options\n        wordOneOptions.value = generateOptions(mnemonicArr.value[wordOneNumber.value - 1])\n        wordTwoOptions.value = generateOptions(mnemonicArr.value[wordTwoNumber.value - 1])\n\n        // Hide seed phrase hint modal\n        showSeedPhraseHintModal.value = false\n\n        // Update status\n        store.isAnyModalOpen = false\n    }\n</script>\n\n\n<style scoped>\n    .back_btn\n    {\n        top: 10px;\n        left: 10px;\n    }\n\n\n\n    .confirm\n    {\n        display: flex;\n        flex-direction: column;\n\n        margin-top: 58px;\n\n        gap: 10px;\n    }\n\n\n    .confirm .label\n    {\n        font-size: 14px;\n\n        margin-bottom: 2px;\n        padding: 0 10px;\n    }\n\n\n    .confirm .options\n    {\n        display: flex;\n        align-content: flex-start;\n        align-items: flex-start;\n        flex-wrap: wrap;\n        justify-content: flex-start;\n\n        gap: 10px;\n    }\n\n\n    .confirm .options .btn\n    {\n        font-size: 14px;\n        font-weight: 500;\n\n        padding: 1px;\n\n        color: #fff;\n        border-radius: 6px;\n        background: linear-gradient(to bottom, #5c32cc 0%, #210750 100%);\n    }\n\n\n    .confirm .options .btn span\n    {\n        display: block;\n\n        padding: 5px 9px;\n\n        border-radius: 5px;\n        background: #170232;\n    }\n\n\n    .confirm .options .btn.selected\n    {\n        background: linear-gradient(to bottom, #6ae1fb 0%, #02294b 100%);\n    }\n\n\n    .confirm .options .btn.selected span\n    {\n        background: linear-gradient(to bottom, #59aaea 0%, #024390 100%);\n    }\n\n\n\n    .show_seed_phrase\n    {\n        font-size: 14px;\n        line-height: 100%;\n\n        margin-top: 18px;\n\n        text-align: center;\n    }\n\n\n    .show_seed_phrase .btn\n    {\n        padding: 3px 6px;\n\n        text-decoration: underline;\n\n        text-decoration-thickness: 1px;\n    }\n\n\n\n    .exp\n    {\n        font-size: 12px;\n\n        margin-top: 6px;\n    }\n</style>\n\n\n","import script from \"./ConfirmPage.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ConfirmPage.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./ConfirmPage.vue?vue&type=style&index=0&id=4b032524&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-4b032524\"]])\n\nexport default __exports__"],"names":["Object","defineProperty","exports","value","wordlists","_default","require","czech","err","chinese_simplified","chinese_traditional","korean","french","italian","spanish","japanese","JA","portuguese","english","EN","sha256_1","sha512_1","pbkdf2_1","utils_1","_wordlists_1","DEFAULT_WORDLIST","INVALID_MNEMONIC","INVALID_ENTROPY","INVALID_CHECKSUM","WORDLIST_REQUIRED","normalize","str","lpad","padString","length","binaryToByte","bin","parseInt","bytesToBinary","bytes","map","x","toString","join","deriveChecksumBits","entropyBuffer","ENT","CS","hash","sha256","Uint8Array","from","Array","slice","salt","password","mnemonicToSeedSync","mnemonic","mnemonicBuffer","Buffer","saltBuffer","res","pbkdf2","sha512","c","dkLen","mnemonicToSeed","pbkdf2Async","then","mnemonicToEntropy","wordlist","Error","words","split","bits","word","index","indexOf","dividerIndex","Math","floor","entropyBits","checksumBits","entropyBytes","match","entropy","newChecksum","entropyToMnemonic","isBuffer","TypeError","chunks","binary","generateMnemonic","strength","rng","size","randomBytes","validateMnemonic","e","setDefaultWordlist","language","result","getDefaultWordlist","keys","filter","lang","every","_wordlists_2","emitter","inject","isClosing","ref","closeHandler","setTimeout","emit","onMounted","on","onUnmounted","off","__exports__","props","__props","i18n","notification","useNotification","copy","useClipboard","copyHandler","notify","group","clean","speed","duration","title","global","t","type","store","useGlobalStore","router","useRouter","loading","mnemonicArr","bip39","wordOneOptions","wordTwoOptions","wordOneNumber","wordTwoNumber","wordOneAnswer","wordTwoAnswer","showWrongSeedsModal","showSeedPhraseHintModal","failures","getRandomWords","min","max","random","generateOptions","randomIndex","usedWords","Set","add","i","randomOption","randomOptionIndex","has","validateAnswers","async","check","save","error","console","message","isAdding","createWallet","push","closeWrongSeedsModal","openSeedPhraseHintModal","isAnyModalOpen","closeSeedPhraseHintModal","onBeforeMount","getSecret"],"sourceRoot":""}