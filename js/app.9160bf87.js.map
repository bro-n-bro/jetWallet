{"version":3,"file":"js/app.9160bf87.js","mappings":"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","sources":["webpack://cosmos-telegram-signer/./src/locale/messages.js","webpack://cosmos-telegram-signer/./src/locale/index.js","webpack://cosmos-telegram-signer/./src/App.vue","webpack://cosmos-telegram-signer/./src/App.vue?7ccd","webpack://cosmos-telegram-signer/./src/layouts/Default.vue","webpack://cosmos-telegram-signer/./src/layouts/Default.vue?3951","webpack://cosmos-telegram-signer/./src/layouts/Account.vue","webpack://cosmos-telegram-signer/./src/layouts/Account.vue?f612","webpack://cosmos-telegram-signer/./src/router/index.js","webpack://cosmos-telegram-signer/./src/directives/v-focus.js","webpack://cosmos-telegram-signer/./src/directives/v-parallax.js","webpack://cosmos-telegram-signer/./src/directives/v-odometer.js","webpack://cosmos-telegram-signer/./src/main.js","webpack://cosmos-telegram-signer/./src/store/networks/cosmoshub.js","webpack://cosmos-telegram-signer/./src/store/networks/osmosis.js","webpack://cosmos-telegram-signer/./src/store/networks/bostrom.js","webpack://cosmos-telegram-signer/./src/store/networks/dymension.js","webpack://cosmos-telegram-signer/./src/store/networks/gravitybridge.js","webpack://cosmos-telegram-signer/./src/store/networks/neutron.js","webpack://cosmos-telegram-signer/./src/store/networks/omniflix.js","webpack://cosmos-telegram-signer/./src/store/networks/pion.js","webpack://cosmos-telegram-signer/./src/store/networks/stride.js","webpack://cosmos-telegram-signer/./src/store/index.js","webpack://cosmos-telegram-signer/./src/utils/db.js","webpack://cosmos-telegram-signer/./src/utils/generateWallet.js","webpack://cosmos-telegram-signer/./src/utils/importWalletFromMnemonic.js","webpack://cosmos-telegram-signer/./src/utils/importWalletFromPrivateKey.js","webpack://cosmos-telegram-signer/./src/utils/hashDataWithKey.js","webpack://cosmos-telegram-signer/./src/utils/generateAESKey.js","webpack://cosmos-telegram-signer/./src/utils/generateHMACKey.js","webpack://cosmos-telegram-signer/./src/utils/encryptData.js","webpack://cosmos-telegram-signer/./src/utils/decryptData.js","webpack://cosmos-telegram-signer/./src/utils/getAddress.js","webpack://cosmos-telegram-signer/./src/utils/createSinger.js","webpack://cosmos-telegram-signer/./src/utils/denomTraces.js","webpack://cosmos-telegram-signer/./src/utils/formatTokenAmount.js","webpack://cosmos-telegram-signer/./src/utils/formatTokenCost.js","webpack://cosmos-telegram-signer/./src/utils/formatTokenName.js","webpack://cosmos-telegram-signer/./src/utils/getPriceByDenom.js","webpack://cosmos-telegram-signer/./src/utils/currencyConversion.js","webpack://cosmos-telegram-signer/./src/utils/calcTokenCost.js","webpack://cosmos-telegram-signer/./src/utils/calcBalancesCost.js","webpack://cosmos-telegram-signer/./src/utils/calcStakedBalancesCost.js","webpack://cosmos-telegram-signer/./src/utils/calcRewardsBalancesCost.js","webpack://cosmos-telegram-signer/./src/utils/calcAvailableAmount.js","webpack://cosmos-telegram-signer/./src/utils/calcStakedAmount.js","webpack://cosmos-telegram-signer/./src/utils/calcUnstakingAmount.js","webpack://cosmos-telegram-signer/./src/utils/getNetworkLogo.js","webpack://cosmos-telegram-signer/./src/utils/simulateTx.js","webpack://cosmos-telegram-signer/./src/utils/signTx.js","webpack://cosmos-telegram-signer/./src/utils/sendTx.js","webpack://cosmos-telegram-signer/./src/utils/getExplorerLink.js","webpack://cosmos-telegram-signer/./src/utils/imageLoadError.js","webpack://cosmos-telegram-signer/./src/utils/imageLoadSuccess.js","webpack://cosmos-telegram-signer/./src/utils/dateCalc.js","webpack://cosmos-telegram-signer/./src/utils/convertAddress.js","webpack://cosmos-telegram-signer/./src/utils/tgInit.js","webpack://cosmos-telegram-signer/./src/components/Loader.vue","webpack://cosmos-telegram-signer/./src/components/Loader.vue?b8fd","webpack://cosmos-telegram-signer/webpack/bootstrap","webpack://cosmos-telegram-signer/webpack/runtime/amd options","webpack://cosmos-telegram-signer/webpack/runtime/chunk loaded","webpack://cosmos-telegram-signer/webpack/runtime/compat get default export","webpack://cosmos-telegram-signer/webpack/runtime/define property getters","webpack://cosmos-telegram-signer/webpack/runtime/ensure chunk","webpack://cosmos-telegram-signer/webpack/runtime/get javascript chunk filename","webpack://cosmos-telegram-signer/webpack/runtime/get mini-css chunk filename","webpack://cosmos-telegram-signer/webpack/runtime/global","webpack://cosmos-telegram-signer/webpack/runtime/hasOwnProperty shorthand","webpack://cosmos-telegram-signer/webpack/runtime/load script","webpack://cosmos-telegram-signer/webpack/runtime/make namespace object","webpack://cosmos-telegram-signer/webpack/runtime/node module decorator","webpack://cosmos-telegram-signer/webpack/runtime/publicPath","webpack://cosmos-telegram-signer/webpack/runtime/css loading","webpack://cosmos-telegram-signer/webpack/runtime/jsonp chunk loading","webpack://cosmos-telegram-signer/webpack/startup"],"sourcesContent":["export default {\n    // English\n    en: {\n        message: {\n            // Page title\n            'page_title': 'Bro wallet',\n            'create_wallet_title': 'New Recovery Phrase',\n            'create_wallet_confirm_title': 'Verify Your Recovery Phrase',\n            'create_pin_title': 'Name your wallet',\n            'wallet_created_title': 'Wallet created!',\n            'wallet_title': 'Wallet page',\n            'import_wallet_title': 'Import Existing Wallet',\n\n\n            // Age modal\n            'age_modal_text': 'Are you 18 years old?',\n\n\n            // Index page\n            'index_page_title': 'Сreation of a new wallet',\n\n\n            // Create page\n            'create_wallet_agree_label1': 'Do not share your recovery phrase with ANYONE.',\n            'create_wallet_agree_label2': 'Back up the phrase safely.',\n\n            'create_wallet_agree_checkbox1': \"I understand that I have access to my wallet solely because I possess the recovery phrase. If this phrase falls into someone else's hands, I will lose my funds.\",\n            'create_wallet_agree_checkbox2': 'I also understand that if I lose my recovery phrase, I will lose all the funds in this wallet.',\n\n            'create_wallet_derivation_path_label': 'Derivation path',\n\n\n            // Confirm page\n            'confirm_label': 'Word',\n            'confirm_exp': 'Fill out the words according to their numbers to verify that you have stored your phrase safely.',\n\n\n            // Create pin page\n            'create_pin_wallet_name_label': 'Wallet name:',\n            'create_pin_create_pin_label': 'Create pin:',\n            'create_pin_confirm_pin_label': 'Repeat pin:',\n\n            'create_pin_wallet_name_placeholder': 'Name',\n\n\n            // Auth\n            'auth_title': 'Welcome!',\n            'auth_enter_pin_label': 'Enter pin:',\n            'auth_error_warning': 'You have {count} attempts left',\n\n\n            // User lock\n            'user_lock_title': 'Account blocked!',\n            'user_lock_desc': 'Your account has been blocked for {time} minutes due to multiple authorization errors. Unlocking will occur automatically after a period of time, you do not need to do anything for this.',\n            'user_lock_timer_label': 'Time left:',\n\n\n            // Mnemonic\n            'mnemonic_tab1': '12 words',\n            'mnemonic_tab2': '24 words',\n            'mnemonic_tab3': 'Private Key',\n\n\n            // Import page\n            'import_wallet_exp': 'Enter your recovery phrase here to restore your wallet.<br> Or click on any blank and paste the entire phrase.',\n            'import_wallet_exp2': 'Enter your private key here to restore your wallet.<br> Or click on any blank and paste the entire phrase.',\n\n\n            // Account page\n            'current_balance_title': 'Current balance',\n            'stacked_balance_title': 'Total Staked',\n\n            'available_tokens_title': 'Available Balance',\n            'staked_tokens_title': 'Staked Balance',\n\n            'staked_tokens_validator_label': 'By:',\n\n\n            // Claim rewards\n            'claim_rewards_page_title': 'Claimable Staking Reward',\n            'claim_rewards_title': 'Claim Rewards',\n            'claim_rewards_not_enought': 'You don’t have enough {denom} to pay Fee',\n\n\n            // Claim confirm\n            'calim_confirm_title': 'Confirm transction',\n\n\n            // Stake\n            'stake_page_title': 'Stake',\n            'stake_confirm_page_title': 'Confirm',\n\n            'stake_current_staked_label': 'Token:',\n            'stake_APR_label': 'APR',\n            'stake_validator_label': 'Select validator:',\n            'stake_amount_label': 'Amount:',\n            'stake_unbonding_period_label': 'Unbonding Period:',\n            'stake_available_label': 'Available',\n            'stake_staked_label': 'Total Staked',\n\n            'stake_unbonding_time_unit': 'days',\n\n            'stake_validator_placeholder': 'Choose your validator',\n\n            'stake_confirm_voting_power': 'of voting power',\n            'stake_confirm_token_label': 'Token:',\n            'stake_confirm_amount_label': 'Amount:',\n            'stake_confirm_daily_profit_label': 'Daily profit:',\n            'stake_confirm_commission_label': 'Commission:',\n            'stake_confirm_unbonding_period_label': 'Unbonding Period:',\n            'stake_confirm_fee_label': 'Fee:',\n\n\n            // Unstake\n            'unstake_page_title': 'Unstake',\n            'unstake_confirm_page_title': 'Confirm',\n\n\n            // Unstaking tokens\n            'unstaking_tokens_title': 'Unstaking process',\n            'unstaking_tokens_label': 'Unstaking in progress:',\n            'unstaking_tokens_count_label': 'Unstakings:',\n            'unstaking_tokens_finish_label': 'Available in:',\n\n            'unstaking_tokens_finish_days': 'Days',\n            'unstaking_tokens_finish_day': 'Day',\n\n\n            // Send\n            'send_confirm_page_title': 'Confirm',\n\n            'send_page_tab1': 'Send',\n            'send_page_tab2': 'IBC send',\n\n            'send_destination_chain_label': 'Destination Chain:',\n            'send_address_label': 'Address:',\n            'send_amount_label': 'Amount:',\n\n            'send_destination_chain_placeholder': 'Select Chain',\n\n            'send_confirm_chain_from_label': 'From the network:',\n            'send_confirm_chain_to_label': 'To the network:',\n            'send_confirm_receiver_label': 'Receiver:',\n            'send_confirm_fee_label': 'Fee:',\n\n\n            // Receive\n            'receive_page_title': 'Receive',\n            'receive_amount_title': 'Choose your amount',\n            'receive_amount_label': 'Amount:',\n\n\n            // Redelegate\n            'redelegate_page_title': 'Switch validator',\n            'redelegate_confirm_page_title': 'Confirm',\n            'redelegate_validator_from_label': 'From:',\n            'redelegate_validator_to_label': 'To:',\n            'redelegate_confirm_token_label': 'Token:',\n            'redelegate_confirm_amount_label': 'Amount:',\n\n\n            // Tx warning\n            'tx_warning_title': 'Warning',\n            'tx_warning_desc': \"You can still try to make the transaction, but since you don't have enough tokens for gas, it may fail, or it might still go through\",\n\n\n            // Validators\n            'validators_page_title': 'Validators:',\n            'validatoes_staked_label': 'Staked:',\n            'validatoes_available_label': 'Available:',\n\n\n            // Chains\n            'chains_page_title': 'Select Chain',\n\n\n            // Stats\n            'stats_title': 'Staking Profit',\n            'stats_token_label': 'Token:',\n            'stats_available_label': 'Available:',\n            'stats_staked_label': 'Staked:',\n            'stats_personal_apr_label': 'Personal APR:',\n            'stats_daily_profit_label': 'Est. daily profit:',\n\n\n            // Wrong seeds\n            'wrong_seeds_title': 'Wrong seeds',\n            'wrong_seeds_desc': 'Wrong seed phrase. Please try again.',\n\n\n            // Derivation path\n            'derivation_path_title': 'Derivation Path',\n            'derivation_path_desc': '<ul><li>You can create multipe addresses from one recovery phrase</li><li>A lost path cannot be recovered</li><li>If you are unfamiliar with this feature, skip or undo this step</li> </ul>',\n\n\n            // Seed phrase hint\n            'seed_phrase_hint_title': 'Seed phrase',\n\n\n            // Profile\n            'profile_title': 'My wallets',\n\n\n            // Edit wallet modal\n            'edit_wallet_name_label': 'Edit wallet name:',\n            'edit_wallet_seep_phrase_exp': 'You can see the seed phrases, but you need to go through verification.',\n\n\n            // Remove wallet\n            'remove_wallet_title': 'You are deleting wallet:',\n            'remove_wallet_desc': 'Enter the name of the wallet you want to delete. We warn you that you will not be able to return it.',\n\n\n            // Confirm by pin modal\n            'confirm_by_pin_title': 'Confirm by pin',\n\n\n            // Redelegations\n            'redelegations_title': 'Active redelegations',\n\n            'redelegations_finish_days': 'Days',\n            'redelegations_finish_day': 'Day',\n\n\n            // Tokens\n            'tokens_page_title': 'Tokens:',\n\n\n            // Tx fee\n            'tx_fee_label': 'Tx Fee:',\n\n\n            // Tx fee modal\n            'tx_fee_modal_title': 'Fee Options',\n\n            'tx_fee_fee_tier_label': 'Fee tier',\n            'tx_fee_fee_token_label': 'Fee Token:',\n            'tx_fee_gas_adjustment_label': 'Gas Adjustment:',\n            'tx_fee_gas_amount_label': 'Gas Amount',\n\n            'tx_fee_remember_label': 'Remember my choise',\n            'tx_fee_auto_label': 'Auto',\n\n            'tx_fee_low_label': 'Low',\n            'tx_fee_average_label': 'Average',\n            'tx_fee_high_label': 'High',\n\n\n            // Transaction info\n            'details_label': 'Details:',\n            'memo_label': 'Memo:',\n\n\n            // Sign transaction fee\n            'sign_tx_title': 'Sign transaction',\n\n            'sign_tx_error_title': 'Incorrect pin!',\n            'sign_tx_error_desc': 'You have entered an incorrect PIN 4 times. For security reasons, you will be returned to the main screen to protect your account and prevent unauthorized access.',\n\n\n            // Add IBC channek modal\n            'add_IBC_channel_title': 'Add IBC Channel',\n\n            'add_IBC_channel_chain_label': 'Destination Channel ID',\n            'add_IBC_channel_id_label': 'Source Channel ID:',\n\n            'add_IBC_channel_error_already_exists': 'Such a pair chain_id and channel_id already exists.',\n\n\n            // Search\n            'search_placeholder': 'Search...',\n            'search_empty': 'Token not found...',\n            'search_empty_validator': 'Validator not found...',\n            'search_empty_chains': 'Chain not found...',\n\n\n            // Placeholders\n            'placeholder_address': 'Enter address',\n            'placeholder_amount': '{token} Amount',\n            'placeholder_memo': 'Required for sending to CEX',\n            'placeholder_memo2': 'Your Custom Memo',\n            'placeholder_wallet_name': 'Wallet Name',\n\n            'placeholder_chain_ID': 'Chain ID',\n            'placeholder_source_channel_ID': 'Source Channel ID',\n\n\n            // Notifications\n            'notification_copied_title': 'Copied to clipboard',\n            'notification_offline_title': 'You are offline',\n\n            'notification_wallet_added_success': 'Wallet added successfully.',\n            'notification_wallet_update_success': 'Wallet updated successfully.',\n            'notification_wallet_remove_success': '{name} deleted successfully.',\n\n            'notification_add_user_channel_success': 'IBC channel saved successfully.',\n\n            'notification_tx_pending_title': 'Transaction is pending',\n            'notification_tx_success_title': 'Success',\n            'notification_tx_error_title': 'Error:',\n\n            'notification_error_title': 'Something went wrong, try again later',\n            'notification_error_invalid_paste_title': 'Incorrect address in the clipboard',\n\n            'notification_explorer_link': 'Explorer',\n\n\n            // Buttons\n            'btn_add_new_wallet': 'Add New Wallet',\n            'btn_from_exist_wallet': 'Create from existing wallet',\n            'btn_create_wallet': 'Create new wallet',\n            'btn_import_wallet': 'Import wallet',\n            'btn_show': 'Ok. Show my phrases',\n            'btn_advanced': 'Advanced',\n            'btn_next': 'Next',\n            'btn_copy': 'Copy to clipboard',\n            'btn_copy_small': 'Copy',\n            'btn_join': 'Join',\n            'btn_biometric': 'Turn on biometric security',\n            'btn_biometric2': 'Use biometric',\n            'btn_login': 'Log in',\n            'btn_send': 'Send',\n            'btn_receive': 'Receive',\n            'btn_stake': 'Earn',\n            'btn_confirm_stake': 'Confirm Staking',\n            'btn_confirm_unstake': 'Confirm Unstake',\n            'btn_confirm_send': 'Confirm Send',\n            'btn_confirm_redelegate': 'Confirm',\n            'btn_confirm': 'Confirm',\n            'btn_unstake': 'Unstake',\n            'btn_redelegate': 'Switch validator',\n            'btn_claim': 'Claim',\n            'btn_approve': 'Approve',\n            'btn_reject': 'Reject',\n            'btn_json': 'View JSON',\n            'btn_close': 'Close',\n            'btn_sign': 'Sign',\n            'btn_understood': 'Understood',\n            'btn_waiting_tx': 'Waiting tx',\n            'btn_MAX': 'MAX',\n            'btn_OK': 'Ok',\n            'btn_cancel': 'Cancel',\n            'btn_amount': 'Amount',\n            'btn_share': 'Share',\n            'btn_accept': 'Accept',\n            'btn_paste': 'Paste',\n            'btn_remove': 'Delete',\n            'btn_add_chain': 'Add Chain',\n            'btn_save': 'Save',\n            'btn_try': 'Try',\n            'btn_show_seed_phrase': 'Show seed phrase',\n\n\n            'notification_tx_error_-32603': \"tx already exists in cache\",\n            'notification_tx_error_2': \"tx parse error\",\n            'notification_tx_error_3': \"invalid sequence\",\n            'notification_tx_error_4': \"unauthorized\",\n            'notification_tx_error_5': \"insufficient funds\",\n            'notification_tx_error_6': \"unknown request\",\n            'notification_tx_error_7': \"invalid address\",\n            'notification_tx_error_8': \"invalid pubkey\",\n            'notification_tx_error_9': \"unknown address\",\n            'notification_tx_error_10': \"invalid coins\",\n            'notification_tx_error_11': \"Broadcasting transaction failed: out of gas try again and increase gas amount\",\n            'notification_tx_error_12': \"memo too large\",\n            'notification_tx_error_13': \"insufficient fee\",\n            'notification_tx_error_14': \"maximum number of signatures exceeded\",\n            'notification_tx_error_15': \"no signatures supplied\",\n            'notification_tx_error_16': \"failed to marshal JSON bytes\",\n            'notification_tx_error_17': \"failed to unmarshal JSON bytes\",\n            'notification_tx_error_18': \"invalid request\",\n            'notification_tx_error_19': \"tx already in mempool\",\n            'notification_tx_error_20': \"mempool is full\",\n            'notification_tx_error_21': \"tx too large\",\n            'notification_tx_error_22': \"key not found\",\n            'notification_tx_error_23': \"invalid account password\",\n            'notification_tx_error_24': \"tx intended signer does not match the given signer\",\n            'notification_tx_error_25': \"invalid gas adjustment\",\n            'notification_tx_error_26': \"invalid height\",\n            'notification_tx_error_27': \"invalid version\",\n            'notification_tx_error_28': \"invalid chain-id\",\n            'notification_tx_error_29': \"invalid type\",\n            'notification_tx_error_30': \"tx timeout height\",\n            'notification_tx_error_31': \"unknown extension options\",\n            'notification_tx_error_32': \"incorrect account sequence\",\n            'notification_tx_error_33': \"failed packing protobuf message to Any\",\n            'notification_tx_error_34': \"failed unpacking protobuf message from Any\",\n            'notification_tx_error_35': \"internal logic error\",\n            'notification_tx_error_36': \"conflict\",\n            'notification_tx_error_37': \"feature not supported\",\n            'notification_tx_error_38': \"not found\",\n            'notification_tx_error_39': \"Internal IO error\",\n            'notification_tx_error_40': \"error in app.toml\",\n            'notification_tx_error_41': \"invalid gas limit\",\n\n            'notification_tx_error_rejected': \"The transaction has been rejected\",\n        }\n    }\n}","import { createI18n } from 'vue-i18n'\nimport VueI18nMessages from '../locale/messages'\n\n\nconst i18n = createI18n({\n    locale: 'en',\n    fallbackLocale: 'en',\n    messages: VueI18nMessages\n})\n\n\nexport default i18n","<template>\n    <!-- Loader -->\n    <Loader v-if=\"isReseting || layout === 'default-layout'\" :class=\"{ no_bg: layout === 'default-layout' }\" />\n\n    <!-- Main component -->\n    <component :is=\"layout\" v-else />\n\n    <!-- Notifications -->\n    <notifications position=\"top left\" group=\"default\" width=\"100%\" animation-type=\"velocity\" :animation=\"notificationAnimation\"\n        @start=\"notificationsOnStart($event)\"\n        @destroy=\"notificationsOnDestroy()\"\n    >\n        <template #body=\"props\">\n            <div class=\"notification\" :class=\"{\n                pending: props.item.type == 'pending',\n                success: props.item.type == 'success',\n                error: props.item.type == 'error',\n                collapsible: props.item.data.isCollapsible\n            }\">\n                <!-- Notifications icon -->\n                <div class=\"icon\" v-if=\"props.item.type == 'copied'\">\n                    <svg><use xlink:href=\"@/assets/sprite.svg#ic_notification_copied\"></use></svg>\n                </div>\n\n                <!-- Notifications icon -->\n                <div class=\"icon\" v-if=\"props.item.type == 'pending'\">\n                    <div class=\"loader\"></div>\n                </div>\n\n                <!-- Notifications icon -->\n                <div class=\"icon\" v-if=\"props.item.type == 'success'\">\n                    <svg><use xlink:href=\"@/assets/sprite.svg#ic_notification_success\"></use></svg>\n                </div>\n\n                <!-- Notifications icon -->\n                <div class=\"icon\" v-if=\"props.item.type == 'error'\">\n                    <svg><use xlink:href=\"@/assets/sprite.svg#ic_notification_error\"></use></svg>\n                </div>\n\n                <div>\n                    <!-- Notifications title -->\n                    <div class=\"title\">\n                        {{ props.item.title }} {{ props.item.text }}\n                    </div>\n\n                    <!-- Notifications explorer link -->\n                    <div class=\"explorer\" v-if=\"props.item.data.explorer_link\">\n                        <a :href=\"props.item.data.explorer_link\" target=\"_blank\" rel=\"noopener nofollow\">\n                            {{ $t('message.notification_explorer_link') }}\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </template>\n    </notifications>\n</template>\n\n\n<script setup>\n    import { ref, reactive, onBeforeMount, inject, watch, computed } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { useNotification } from '@kyvg/vue3-notification'\n    import { useRoute } from 'vue-router'\n    import { useTitle, useNetwork } from '@vueuse/core'\n    import { tgInit } from '@/utils'\n    import { DBgetData } from '@/utils/db'\n\n    // Components\n    import Loader from '@/components/Loader.vue'\n\n\n    const store = useGlobalStore(),\n        i18n = inject('i18n'),\n        route = useRoute(),\n        emitter = inject('emitter'),\n        layout = computed(() => route.meta.layout || 'default-layout'),\n        title = useTitle(),\n        isReseting = ref(false),\n        network = reactive(useNetwork()),\n        notification = useNotification(),\n        notificationTimeout = ref(null),\n        notificationAnimation = {\n            enter: { translateY: '0%' },\n            leave: { translateY: '-100%' }\n        }\n\n\n    onBeforeMount(async () => {\n        try {\n            // Set page title\n            title.value = i18n.global.t('message.page_title')\n\n            // Telegram WebApp init\n            await tgInit()\n        } catch (error) {\n            console.error(`App.vue: ${error.message}`)\n        }\n    })\n\n\n    // Wallet change\n    watch(computed(() => store.currentWalletID), async (newValue, oldValue) => {\n        try {\n            if (oldValue) {\n                // Get wallets\n                const DBWallets = await DBgetData('global', 'wallets')\n\n                if (DBWallets !== undefined) {\n                    // Clean notifications\n                    notification.notify({\n                        group: 'default',\n                        clean: true\n                    })\n\n                    // Reinit APP\n                    await store.initApp()\n                }\n            }\n        } catch (error) {\n            console.error(`App.vue: ${error.message}`)\n        }\n    })\n\n\n    // Network change\n    watch(computed(() => store.currentNetwork), async () => {\n        try {\n            if (store.isInitialized || store.forcedUnlock) {\n                // Clean notifications\n                notification.notify({\n                    group: 'default',\n                    clean: true\n                })\n\n                // Reinit APP\n                await store.initApp()\n            }\n        } catch (error) {\n            console.error(`App.vue: ${error.message}`)\n        }\n    })\n\n\n    // Offline mode\n    watch(computed(() => network.isOnline), () => {\n        // Clean notifications\n        notification.notify({\n            group: 'default',\n            clean: true\n        })\n\n        // Offline\n        if (!network.isOnline) {\n            // Show notification\n            notification.notify({\n                group: 'default',\n                speed: 200,\n                duration: -100,\n                title: i18n.global.t('message.notification_offline_title'),\n                type: 'error'\n            })\n        }\n    })\n\n\n    // Notifications start event\n    function notificationsOnStart(params) {\n        // Is collapsible\n        if (params.data.isCollapsible) {\n            notificationTimeout.value = setTimeout(() => {\n                // Show collapsible notification\n                const notification = document.querySelector('.notification.collapsible')\n\n                if (notification) {\n                    // Add notification class\n                    notification.classList.add('small')\n                }\n\n                // Clear timeout\n                notificationTimeout.value = null\n            }, store.notificationsCollapsingDelay)\n        }\n    }\n\n\n    // Notifications destroy event\n    function notificationsOnDestroy() {\n        // Clear timeout\n        notificationTimeout.value = null\n    }\n\n\n    // Event \"show_collapsible_notification\"\n    emitter.on('show_collapsible_notification', () => {\n        if (!notificationTimeout.value) {\n            const notification = document.querySelector('.notification.collapsible')\n\n            if (notification) {\n                // Show collapsible notification\n                notification.classList.remove('small')\n\n                // Hide collapsible notification\n                notificationTimeout.value = setTimeout(() => {\n                    if (notification) {\n                        // Add notification class\n                        notification.classList.add('small')\n                    }\n\n                    // Clear timeout\n                    notificationTimeout.value = null\n                }, store.notificationsCollapsingDelay)\n            }\n        }\n    })\n\n\n    // Event \"start_reseting\"\n    emitter.on('start_reseting', () => {\n        // Show loader\n        isReseting.value = true\n\n        // Hide loader\n        setTimeout(() => isReseting.value = false, 300)\n    })\n</script>","import script from \"./App.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./App.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <div class=\"main\">\n        <router-view v-slot=\"{ Component }\">\n            <component :is=\"Component\" />\n        </router-view>\n    </div>\n</template>\n\n\n<script setup>\n    import { ref, inject, onMounted, onUnmounted } from 'vue'\n    import { useGlobalStore } from '@/store'\n\n\n    const store = useGlobalStore(),\n        emitter = inject('emitter'),\n        startY = ref(0),\n        isPulling = ref(false),\n        threshold = 70\n\n\n    onMounted(() => {\n        // Overscroll\n        window.addEventListener('touchstart', handleTouchStart, { passive: false })\n        window.addEventListener('touchmove', handleTouchMove, { passive: false })\n        window.addEventListener('touchend', handleTouchEnd, { passive: false })\n    })\n\n\n    onUnmounted(() => {\n        window.removeEventListener('touchstart', handleTouchStart, { passive: false })\n        window.removeEventListener('touchmove', handleTouchMove, { passive: false })\n        window.removeEventListener('touchend', handleTouchEnd, { passive: false })\n    })\n\n\n    // Handle touch start\n    function handleTouchStart(e) {\n        if (window.scrollY === 0) {\n            isPulling.value = true\n        }\n    }\n\n\n    // Handle touch move\n    function handleTouchMove(e) {\n        if (!isPulling.value) return\n\n        let currentY = e.touches[0].pageY,\n            distance = currentY - startY.value\n\n        if (distance > 0 && distance >= threshold) {\n            e.preventDefault()\n            e.stopPropagation()\n\n            // Close any modal\n            if (store.isAnyModalOpen) {\n                // Set event \"close_any_modal\"\n                emitter.emit('close_any_modal')\n\n                isPulling.value = false\n\n                return\n            }\n        }\n    }\n\n\n    // Handle touch end\n    function handleTouchEnd(e) {\n        isPulling.value = false\n    }\n</script>\n","import script from \"./Default.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Default.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <div class=\"main\">\n        <router-view v-slot=\"{ Component }\">\n            <component :is=\"Component\" />\n        </router-view>\n    </div>\n</template>\n\n\n<script setup>\n    import { ref, inject, onMounted, onUnmounted } from 'vue'\n    import { useGlobalStore } from '@/store'\n\n\n    const store = useGlobalStore(),\n        emitter = inject('emitter'),\n        startY = ref(0),\n        isPulling = ref(false),\n        threshold = 70,\n        hasUpdated = ref(false)\n\n\n    onMounted(() => {\n        // Overscroll\n        window.addEventListener('touchstart', handleTouchStart, { passive: false })\n        window.addEventListener('touchmove', handleTouchMove, { passive: false })\n        window.addEventListener('touchend', handleTouchEnd, { passive: false })\n    })\n\n\n    onUnmounted(() => {\n        window.removeEventListener('touchstart', handleTouchStart, { passive: false })\n        window.removeEventListener('touchmove', handleTouchMove, { passive: false })\n        window.removeEventListener('touchend', handleTouchEnd, { passive: false })\n    })\n\n\n    // Handle touch start\n    function handleTouchStart(e) {\n        if (window.scrollY === 0) {\n            startY.value = e.touches[0].pageY\n            isPulling.value = true\n            hasUpdated.value = false\n        }\n    }\n\n\n    // Handle touch move\n    async function handleTouchMove(e) {\n        if (isPulling.value && (store.networks[store.currentNetwork].currentTxHash || store.forcedUnlock)) {\n            // Event \"show_collapsible_notification\"\n            emitter.emit('show_collapsible_notification')\n\n            return\n        }\n\n        if (!isPulling.value || hasUpdated.value) return\n\n        let currentY = e.touches[0].pageY,\n            distance = currentY - startY.value\n\n\n        if (distance > 0 && distance >= threshold) {\n            e.preventDefault()\n            e.stopPropagation()\n\n            // Close any modal\n            if (store.isAnyModalOpen) {\n                // Set event \"close_any_modal\"\n                emitter.emit('close_any_modal')\n\n                isPulling.value = false\n\n                return\n            }\n\n            // Updating flag\n            hasUpdated.value = true\n\n            // Top loader\n            let account = document.querySelector('.account_page')\n\n            if (account) {\n                account.classList.add('updating')\n\n                setTimeout(() => account.classList.remove('updating'), 500)\n\n                try {\n                    // Update all balances\n                    await store.updateAllBalances()\n                } catch (error) {\n                    console.error(`Layouts/Account.vue: ${error.message}`)\n                }\n            }\n        }\n    }\n\n\n    // Handle touch end\n    function handleTouchEnd(e) {\n        isPulling.value = false\n    }\n</script>\n","import script from \"./Account.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Account.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { createRouter, createWebHistory } from 'vue-router'\nimport { DBgetMultipleData } from '@/utils/db'\nimport { useGlobalStore } from '@/store'\nimport { useNotification } from '@kyvg/vue3-notification'\nimport i18n from '@/locale'\n\nimport defaultLayout from '@/layouts/Default.vue'\nimport accountLayout from '@/layouts/Account.vue'\n\n\n// Notifications\nconst notification = useNotification()\n\n\n// Routes\nconst routes = [\n    {\n\t\tpath: '/',\n\t\tname: 'MainPage',\n\t\tcomponent: () => import('../views/IndexPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['register', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/create_wallet',\n\t\tname: 'CreateWallet',\n\t\tcomponent: () => import('../views/CreateWallet/IndexPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['register', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/confirm_wallet',\n\t\tname: 'CreateWalletConfirm',\n\t\tcomponent: () => import('../views/CreateWallet/ConfirmPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['register', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/create_pin',\n\t\tname: 'CreatePin',\n\t\tcomponent: () => import('../views/CreateWallet/PinPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['register', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/wallet_created',\n\t\tname: 'CreatedWallet',\n\t\tcomponent: () => import('../views/CreateWallet/CreatedPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['not_register', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/import_wallet',\n\t\tname: 'ImportWallet',\n\t\tcomponent: () => import('../views/CreateWallet/ImportPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['register', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/auth',\n\t\tname: 'Auth',\n\t\tcomponent: () => import('../views/AuthPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['not_register', 'authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/lock',\n\t\tname: 'Lock',\n\t\tcomponent: () => import('../views/UserLockPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: defaultLayout,\n\t\t\taccessDenied: ['not_register']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account',\n\t\tname: 'Account',\n\t\tcomponent: () => import('../views/Account/IndexPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/claim_confirm',\n\t\tname: 'ClaimConfirm',\n\t\tcomponent: () => import('../views/Account/ClaimConfirmPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/stake',\n\t\tname: 'Stake',\n\t\tcomponent: () => import('../views/Account/StakePage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/unstake',\n\t\tname: 'Unstake',\n\t\tcomponent: () => import('../views/Account/UnstakePage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/redelegate',\n\t\tname: 'Redelegate',\n\t\tcomponent: () => import('../views/Account/RedelegatePage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/receive',\n\t\tname: 'Receive',\n\t\tcomponent: () => import('../views/Account/ReceivePage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/account/send',\n\t\tname: 'Send',\n\t\tcomponent: () => import('../views/Account/SendPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/add_wallet',\n\t\tname: 'AddWallet',\n\t\tcomponent: () => import('../views/AddWallet/IndexPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/add_wallet/create',\n\t\tname: 'AddWalletCreate',\n\t\tcomponent: () => import('../views/AddWallet/CreatePage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/add_wallet/confirm',\n\t\tname: 'AddWalletConfirm',\n\t\tcomponent: () => import('../views/AddWallet/ConfirmPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n\t{\n\t\tpath: '/add_wallet/import',\n\t\tname: 'AddWalletImport',\n\t\tcomponent: () => import('../views/AddWallet/ImportPage.vue'),\n\t\tmeta: {\n\t\t\tlayout: accountLayout,\n\t\t\taccessDenied: ['not_authorized', 'locked']\n\t\t}\n\t},\n]\n\n\nconst router = createRouter({\n    history: createWebHistory(),\n    routes\n})\n\n\nrouter.beforeResolve(async (to, from, next) => {\n\ttry {\n\t\tconst store = useGlobalStore(),\n\t\t\tDBData = await DBgetMultipleData('global', [\n\t\t\t\t'isRegister',\n\t\t\t\t'isUserLock',\n\t\t\t\t'userLockTimestamp',\n\t\t\t\t'authTimestamp'\n\t\t\t])\n\n\t\t// Auto auth\n\t\tif (from.name !== 'Auth' && DBData.authTimestamp !== undefined && new Date() - new Date(DBData.authTimestamp) < store.authTime) {\n\t\t\tif (!store.isAuthorized) {\n\t\t\t\t// Auth\n\t\t\t\tawait store.auth()\n\t\t\t}\n\n\t\t\tif (!store.isInitialized) {\n\t\t\t\t// Init app\n\t\t\t\tawait store.initApp()\n\t\t\t}\n\t\t}\n\n\t\t// Check access\n\t\tto.matched.some(record => {\n\t\t\tlet access = record.meta.accessDenied\n\n\t\t\tif (access.length) {\n\t\t\t\t// Not register\n\t\t\t\tif (access.includes('not_register') && DBData.isRegister == undefined) {\n\t\t\t\t\t// Redirect\n\t\t\t\t\tnext({ name: 'MainPage' })\n\n\t\t\t\t\treturn false\n\t\t\t\t}\n\n\t\t\t\t// Lock\n\t\t\t\telse if (access.includes('locked') && DBData.isUserLock && (new Date() - new Date(DBData.userLockTimestamp) < store.userLockTime)) {\n\t\t\t\t\t// Redirect\n\t\t\t\t\tnext({ name: 'Lock' })\n\n\t\t\t\t\treturn false\n\t\t\t\t}\n\n\t\t\t\t// Register\n\t\t\t\telse if (access.includes('register') && DBData.isRegister) {\n\t\t\t\t\t// Redirect\n\t\t\t\t\tnext({ name: 'Auth' })\n\n\t\t\t\t\treturn false\n\t\t\t\t}\n\n\t\t\t\t// Not authorized\n\t\t\t\telse if (access.includes('not_authorized') && !store.isAuthorized) {\n\t\t\t\t\t// Redirect\n\t\t\t\t\tnext({ name: 'Auth' })\n\n\t\t\t\t\treturn false\n\t\t\t\t}\n\n\t\t\t\t// Authorized\n\t\t\t\telse if (access.includes('authorized') && store.isAuthorized) {\n\t\t\t\t\t// Redirect\n\t\t\t\t\tnext({ name: 'Account' })\n\n\t\t\t\t\treturn false\n\t\t\t\t}\n\n\t\t\t\telse {\n\t\t\t\t\tnext()\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t} catch (error) {\n        console.error('Error in beforeResolve hook:', error.message)\n\n\t\t// Clean notifications\n\t\tnotification.notify({\n\t\t\tgroup: 'default',\n\t\t\tclean: true\n\t\t})\n\n\t\t// Show notification\n\t\tnotification.notify({\n\t\t\tgroup: 'default',\n\t\t\tspeed: 200,\n\t\t\tduration: -100,\n\t\t\ttitle: i18n.global.t('message.notification_error_title'),\n\t\t\ttype: 'error',\n\t\t\tdata: {\n\t\t\t\tisCollapsible: true\n\t\t\t}\n\t\t})\n\n\t\tnext()\n    }\n})\n\n\nrouter.afterEach((to) => {\n\t// Set analytics\n\tif (window._paq && process.env.VUE_APP_IS_PRODUCTION === 'true') {\n\t\t// Set custom URL\n\t\twindow._paq.push(['setCustomUrl', window.location.href])\n\n\t\t// Send page view to Matomo\n\t\twindow._paq.push(['trackPageView'])\n\n\t\t// (Optional) Dispatch a custom event for Tag Manager\n\t\tconst event = new Event('matomo_spa_url_change')\n\n\t\twindow.dispatchEvent(event)\n\t}\n})\n\n\nexport default router\n","export const vFocus = {\n    mounted(el) {\n        el.focus()\n    }\n}","export const vParallax = {\n    mounted(el) {\n        window.addEventListener('scroll', function () {\n            if (window.scrollY <= el.offsetHeight) {\n                el.style.opacity = (1 - window.scrollY / (el.offsetHeight * 0.6))\n\n                el.style.transform = `translateY(-${(window.scrollY / el.offsetHeight) * 0.6 * 100}%)`\n            }\n        })\n    }\n}","export const vOdometer = {\n    mounted(el, number) {\n        if (number) {\n            // Get array\n            let numberArr = number.value.toFixed(10).split('')\n\n            // Generate base html\n            el.innerHTML = numberArr.map(char => `\n                <div class=\"digit\">\n                    <span class=\"old\">${char}</span>\n                </div>\n            `).join('')\n        }\n    },\n\n    updated(el, number) {\n        // Get array\n        let numberArr = number.value.toFixed(10).split(''),\n            oldNumberArr = number.oldValue?.toFixed(10).split('') || [],\n            maxLength = Math.max(numberArr.length, oldNumberArr.length),\n            html = '',\n            mismatchIndex = null,\n            mismatchCount = 0,\n            animationDuration = 1500,\n            animationDelay = 50\n\n\n        // Pad arrays with empty strings to maximum length\n        numberArr = numberArr.concat(Array(maxLength - numberArr.length).fill(''))\n        oldNumberArr = oldNumberArr.concat(Array(maxLength - oldNumberArr.length).fill(''))\n\n\n        // Generate html\n        el.innerHTML = numberArr.map((char, i) => {\n            // Get mismatch\n            if (mismatchIndex === null && char !== oldNumberArr[i]) {\n                mismatchIndex = i\n                mismatchCount = maxLength - i\n                animationDuration = animationDuration - animationDelay * mismatchCount\n            }\n\n            // Calc animation\n            let duration = 0\n\n            if (mismatchIndex !== null) {\n                duration = animationDuration / mismatchCount / 1000\n            }\n\n            html += `<div class=\"digit ${mismatchIndex !== null && i >= mismatchIndex ? 'animate' : ''}\">\n                        <span class=\"new\" style=\"animation-duration: ${parseFloat(duration.toFixed(2))}s; animation-delay: ${animationDelay * (i - mismatchIndex) / 1000}s;\">\n                            ${char}\n                        </span>\n\n                        <span class=\"old\" style=\"animation-duration: ${parseFloat(duration.toFixed(2))}s; animation-delay: ${animationDelay * (i - mismatchIndex) / 1000}s;\">\n                            ${oldNumberArr[i]}\n                        </span>\n                    </div>`\n        })\n\n\n        // Inner html\n        el.innerHTML = html\n    }\n}","import { createApp } from 'vue'\nimport { createPinia } from 'pinia'\n\nimport App from './App.vue'\nimport router from './router'\nimport i18n from './locale'\nimport mitt from 'mitt'\nimport Notifications from '@kyvg/vue3-notification'\nimport velocity from 'velocity-animate'\nimport { register } from 'swiper/element/bundle'\nimport VueCountdown from '@chenfengyuan/vue-countdown'\nimport VueMatomo from 'vue-matomo'\n\nimport { vFocus } from './directives/v-focus'\nimport { vParallax } from './directives/v-parallax'\nimport { vOdometer } from './directives/v-odometer'\n\n\n// Events\nconst emitter = mitt()\n\n\n// Create App\nconst app = createApp(App)\n\n\n// Pinia\nconst pinia = createPinia()\n\n\n// Vue use\napp.use(pinia)\napp.use(router)\napp.use(i18n)\napp.use(Notifications, { velocity })\napp.use(VueMatomo, {\n    host: 'https://metrics.jetwallet.app/',\n    siteId: 1\n})\n\n\n// Vue provide\napp.provide('i18n', i18n)\napp.provide('emitter', emitter)\n\n\n// Directives\napp.directive('focus', vFocus)\napp.directive('parallax', vParallax)\napp.directive('odometer', vOdometer)\n\n\n// Swiper - register\nregister()\n\n\n// VueCountdown\napp.component(VueCountdown.name, VueCountdown)\n\n\n// Mount\napp.mount('#app')","const network = {\n    name: 'Cosmos Hub',\n    lcd_api: 'https://lcd.cosmoshub-4.bronbro.io',\n    rpc_api: 'https://rpc.cosmoshub-4.bronbro.io',\n    websocket_url: 'wss://rpc.cosmoshub-4.bronbro.io:443/websocket',\n\n    denom: 'uatom',\n    token_name: 'ATOM',\n    chain_id: 'cosmoshub-4',\n    prefix: 'cosmos',\n    explorer_link: 'https://www.mintscan.io/cosmos/tx/{tx_hash}',\n    alias: 'cosmoshub',\n    exponent: 6,\n    gas_adjustment: 1.6,\n    address_length: 20,\n    gas_amount_send: 100000,\n    gas_amount_claim: 1000000,\n    gas_amount_stake: 500000,\n    gas_amount_unstake: 500000,\n    gas_amount_redelegate: 1000000,\n    is_staking_available: true\n}\n\nexport default network","const network = {\n    name: 'Osmosis',\n    lcd_api: 'https://lcd.osmosis-1.bronbro.io',\n    rpc_api: 'https://rpc.osmosis-1.bronbro.io',\n    websocket_url: 'wss://rpc.osmosis-1.bronbro.io:443/websocket',\n\n    denom: 'uosmo',\n    token_name: 'OSMO',\n    chain_id: 'osmosis-1',\n    prefix: 'osmo',\n    explorer_link: 'https://www.mintscan.io/osmosis/tx/{tx_hash}',\n    alias: 'osmosis',\n    exponent: 6,\n    gas_adjustment: 1.3,\n    address_length: 20,\n    gas_amount_send: 100000,\n    gas_amount_claim: 1000000,\n    gas_amount_stake: 500000,\n    gas_amount_unstake: 500000,\n    gas_amount_redelegate: 1000000,\n    is_staking_available: true\n}\n\nexport default network","const network = {\n    name: 'Bostrom',\n    lcd_api: 'https://lcd.bostrom.bronbro.io',\n    rpc_api: 'https://rpc.bostrom.bronbro.io',\n    websocket_url: 'wss://rpc.bostrom.bronbro.io:443/websocket',\n\n    denom: 'boot',\n    token_name: 'BOOT',\n    chain_id: 'bostrom',\n    prefix: 'bostrom',\n    explorer_link: 'https://ping.pub/bostrom/tx/{tx_hash}',\n    alias: 'bostrom',\n    exponent: 0,\n    gas_adjustment: 1.3,\n    address_length: 20,\n    gas_amount_send: 300000,\n    gas_amount_claim: 300000,\n    gas_amount_stake: 250000,\n    gas_amount_unstake: 250000,\n    gas_amount_redelegate: 300000,\n    is_staking_available: true\n}\n\nexport default network","const network = {\n    name: 'Dymension Hub',\n    lcd_api: 'https://lcd.dymension.bronbro.io',\n    rpc_api: 'https://rpc.dymension.bronbro.io',\n    websocket_url: 'wss://rpc.dymension.bronbro.io:443/websocket',\n\n    denom: 'adym',\n    token_name: 'DYM',\n    chain_id: 'dymension_1100-1',\n    prefix: 'dym',\n    explorer_link: 'https://www.mintscan.io/dymension/tx/{tx_hash}',\n    alias: 'dymension',\n    exponent: 6,\n    gas_adjustment: 1.3,\n    address_length: 20,\n    gas_amount_send: 300000,\n    gas_amount_claim: 300000,\n    gas_amount_stake: 250000,\n    gas_amount_unstake: 250000,\n    gas_amount_redelegate: 300000,\n    is_staking_available: true\n}\n\nexport default network","const network = {\n    name: 'Gravity bridge',\n    lcd_api: 'https://lcd.gravity-bridge-3.bronbro.io',\n    rpc_api: 'https://rpc.gravity-bridge-3.bronbro.io',\n    websocket_url: 'wss://rpc.gravity-bridge-3.bronbro.io:443/websocket',\n\n    denom: 'ugraviton',\n    token_name: 'GRAV',\n    chain_id: 'gravity-bridge-3',\n    prefix: 'gravity',\n    explorer_link: 'https://www.mintscan.io/gravity-bridge/tx/{tx_hash}',\n    alias: 'gravitybridge',\n    exponent: 6,\n    gas_adjustment: 1.3,\n    address_length: 20,\n    gas_amount_send: 300000,\n    gas_amount_claim: 300000,\n    gas_amount_stake: 250000,\n    gas_amount_unstake: 250000,\n    gas_amount_redelegate: 300000,\n    is_staking_available: true\n}\n\nexport default network","const network = {\n    name: 'Neutron',\n    lcd_api: 'https://lcd.neutron-1.bronbro.io',\n    rpc_api: 'https://rpc.neutron-1.bronbro.io',\n    websocket_url: 'wss://rpc.neutron-1.bronbro.io:443/websocket',\n\n    denom: 'untrn',\n    token_name: 'NTRN',\n    chain_id: 'neutron-1',\n    prefix: 'neutron',\n    explorer_link: 'https://www.mintscan.io/neutron/tx/{tx_hash}',\n    alias: 'neutron',\n    exponent: 6,\n    gas_adjustment: 1.6,\n    address_length: 20,\n    gas_amount_send: 300000,\n    gas_amount_claim: 300000,\n    gas_amount_stake: 250000,\n    gas_amount_unstake: 250000,\n    gas_amount_redelegate: 300000,\n    is_staking_available: false\n}\n\nexport default network","const network = {\n    name: 'OmniFlix',\n    lcd_api: 'https://lcd.omniflix.bronbro.io',\n    rpc_api: 'https://rpc.omniflix.bronbro.io',\n    websocket_url: 'wss://rpc.omniflix.bronbro.io:443/websocket',\n\n    denom: 'uflix',\n    token_name: 'FLIX',\n    chain_id: 'omniflixhub-1',\n    prefix: 'omniflix',\n    explorer_link: 'https://www.mintscan.io/omniflix/tx/{tx_hash}',\n    alias: 'omniflixhub',\n    exponent: 6,\n    gas_adjustment: 1.6,\n    address_length: 20,\n    gas_amount_send: 100000,\n    gas_amount_claim: 300000,\n    gas_amount_stake: 250000,\n    gas_amount_unstake: 250000,\n    gas_amount_redelegate: 300000,\n    is_staking_available: true\n}\n\nexport default network","const network = {\n    name: 'Pion',\n    lcd_api: 'https://lcd.pion-1.bronbro.io',\n    rpc_api: 'https://rpc.pion-1.bronbro.io',\n    websocket_url: 'wss://rpc.pion-1.bronbro.io:443/websocket',\n\n    logo: 'https://raw.githubusercontent.com/cosmos/chain-registry/master/neutron/images/neutron-raw.svg',\n    denom: 'untrn',\n    token_name: 'NTRN',\n    chain_id: 'pion-1',\n    prefix: 'neutron',\n    explorer_link: 'https://neutron.celat.one/pion-1/txs/{tx_hash}',\n    alias: 'pion',\n    exponent: 6,\n    gas_adjustment: 1.6,\n    address_length: 20,\n    gas_amount_send: 300000,\n    gas_amount_claim: 300000,\n    gas_amount_stake: 250000,\n    gas_amount_unstake: 250000,\n    gas_amount_redelegate: 300000,\n    is_staking_available: false\n}\n\nexport default network","const network = {\n    name: 'Stride',\n    lcd_api: 'https://lcd.stride.bronbro.io',\n    rpc_api: 'https://rpc.stride.bronbro.io',\n    websocket_url: 'wss://rpc.stride.bronbro.io:443/websocket',\n\n    denom: 'ustrd',\n    token_name: 'STRD',\n    chain_id: 'stride-1',\n    prefix: 'stride',\n    explorer_link: 'https://www.mintscan.io/stride/tx/{tx_hash}',\n    alias: 'stride',\n    exponent: 6,\n    gas_adjustment: 1.3,\n    address_length: 20,\n    gas_amount_send: 300000,\n    gas_amount_claim: 300000,\n    gas_amount_stake: 250000,\n    gas_amount_unstake: 250000,\n    gas_amount_redelegate: 300000,\n    is_staking_available: true\n}\n\nexport default network","import { defineStore } from 'pinia'\nimport { getAddress, denomTraces, hashDataWithKey, generateHMACKey, generateAESKey, getPriceByDenom, getExplorerLink, encryptData, decryptData } from '@/utils'\nimport { chains, assets } from 'chain-registry'\nimport { DBaddData, DBgetMultipleData, DBgetData, DBclearAllData, DBclearStore, DBcheckStoreName, DBdeleteData } from '@/utils/db'\nimport { useNotification } from '@kyvg/vue3-notification'\nimport sss from 'shamirs-secret-sharing'\nimport i18n from '@/locale'\n\n\n// Networks\nimport cosmoshub from '@/store/networks/cosmoshub'\nimport osmosis from '@/store/networks/osmosis'\nimport bostrom from '@/store/networks/bostrom'\nimport dymension from '@/store/networks/dymension'\nimport gravitybridge from '@/store/networks/gravitybridge'\n// import localbostrom from '@/store/networks/localbostrom'\nimport neutron from '@/store/networks/neutron'\n// import mocha from '@/store/networks/mocha'\nimport omniflixhub from '@/store/networks/omniflix'\nimport pion from '@/store/networks/pion'\nimport stride from '@/store/networks/stride'\n\n\n// Networks additional optionsupdateUserAuthErrorLimit\nconst networksAdditionalOptions = {\n    websocket: null,\n    currentTxHash: null,\n    unbondingTime: 0,\n    totalBondedTokens: 0,\n    totalUnstakingTokens: 0,\n    isUnstakingCancelSupport: false\n}\n\n\n// Notifications\nconst notification = useNotification()\n\n\nexport const useGlobalStore = defineStore('global', {\n    state: () => ({\n        isInitializing: false,\n        isInitialized: false,\n        isBalancesGot: false,\n        isStakedBalancesGot: false,\n        isRewardsGot: false,\n        isUnstakingBalancesGot: false,\n        isAuthorized: false,\n        isAnyModalOpen: false,\n        isAgeConfirmed: false,\n\n        defaultDerivationPath: \"m/44'/118'/0'/0/0\",\n        tempDerivationPath: '',\n        forcedUnlock: false,\n        authErrorLimit: 4,\n        confirmSeedsErrorLimit: 3,\n        DBVersion: 1,\n\n        currentWalletID: null,\n        currentWalletDerivationPath: null,\n        currentWalletName: '',\n        currentNetwork: '',\n        currentAddress: '',\n        currentCurrency: '',\n        currentCurrencySymbol: '',\n\n        IBCSendCurrentChain: null,\n        stakeCurrentValidator: null,\n        unstakeCurrentValidator: null,\n\n        redelegateValidatorFrom: null,\n        redelegateValidatorTo: null,\n\n        wallets: [],\n        prices: [],\n        balances: [],\n        stakedBalances: [],\n        rewardsBalances: [],\n        unstakingBalances: [],\n        redelegations: [],\n\n        defaultWalletName: 'MyJetWallet',\n\n        authTime: 60 * 60 * 1000,\n        cacheTime: 15 * 60 * 1000,\n        userLockTime: 15 * 60 * 1000,\n        notificationsCollapsingDelay: 2000,\n\n        TxFee: {\n            balance: {},\n            currentLevel: 'average',\n            userGasAmount: 0,\n            gasAmount: 0,\n            isRemember: false,\n            isGasAdjustmentAuto: true,\n            isEnough: false\n        },\n\n        networks: {\n            cosmoshub: Object.assign(cosmoshub, networksAdditionalOptions),\n            osmosis: Object.assign(osmosis, networksAdditionalOptions),\n            bostrom: Object.assign(bostrom, networksAdditionalOptions),\n            dymension: Object.assign(dymension, networksAdditionalOptions),\n            gravitybridge: Object.assign(gravitybridge, networksAdditionalOptions),\n            neutron: Object.assign(neutron, networksAdditionalOptions),\n            // mocha: Object.assign(mocha, networksAdditionalOptions),\n            // localbostrom: Object.assign(localbostrom, networksAdditionalOptions)\n            omniflixhub: Object.assign(omniflixhub, networksAdditionalOptions),\n            pion: Object.assign(pion, networksAdditionalOptions),\n            stride: Object.assign(stride, networksAdditionalOptions),\n        },\n\n        formatableTokens: [\n            {\n                token_name: 'USD',\n                format_token_name: 'usdt',\n                exponent: 0\n            },\n            {\n                token_name: 'BTC',\n                format_token_name: 'wbtc',\n                exponent: 0\n            },\n            {\n                token_name: 'ETH',\n                format_token_name: 'eth',\n                exponent: 0\n            }\n        ]\n    }),\n\n\n    actions: {\n        // Get current DB version\n        getCurrentDBVersion() {\n            // Get data from DB\n            let DBCurrentVersion = localStorage.getItem('DBVersion')\n\n            if (!DBCurrentVersion) {\n                // Save data in localStorage\n                localStorage.setItem('DBVersion', this.DBVersion)\n            } else {\n                // Set data from localStorage\n                this.DBVersion = DBCurrentVersion\n            }\n        },\n\n\n        // Set new DB version\n        setNewDBVersion() {\n            // Increase by 1\n            this.DBVersion++\n\n            // Save data in localStorage\n            localStorage.setItem('DBVersion', this.DBVersion)\n        },\n\n\n        // Get current wallet ID\n        async getCurrentWalletID() {\n            try {\n                // Get data from DB\n                let DBCurrentWalletID = await DBgetData('global', 'currentWalletID')\n\n                if (DBCurrentWalletID !== undefined) {\n                    // Set data from DB\n                    this.currentWalletID = DBCurrentWalletID\n                }\n            } catch (error) {\n                // Throw error\n                throw new Error(`getCurrentWalletID() failed: ${error.message}`)\n            }\n        },\n\n\n        // Set current wallet ID\n        async setCurrentWalletID(walletID = null) {\n            try {\n                if (this.currentWalletID !== walletID) {\n                    // Save in DB\n                    await DBaddData('global', [\n                        ['currentWalletID', walletID]\n                    ])\n\n                    // Set data\n                    this.currentWalletID = walletID\n                }\n            } catch (error) {\n                // Throw error\n                throw new Error(`setCurrentWalletID() failed: ${error.message}`)\n            }\n        },\n\n\n        // Auth\n        async auth() {\n            try {\n                await Promise.all([\n                    // Сhange auth limit\n                    this.updateUserAuthErrorLimit(this.authErrorLimit),\n\n                    // Save in DB\n                    DBaddData('global', [\n                        ['authTimestamp', new Date().toISOString()]\n                    ])\n                ])\n\n                // Set authorized status\n                this.isAuthorized = true\n            } catch (error) {\n                // Throw error\n                throw new Error(`auth() failed: ${error.message}`)\n            }\n        },\n\n\n        // Init APP\n        async initApp() {\n            try {\n                // Init status\n                this.isInitializing = true\n                this.isInitialized = false\n\n                // Forced unlock\n                this.forcedUnlock = false\n\n                // Reset data\n                this.currentAddress = ''\n\n                // Get current wallet ID\n                await this.getCurrentWalletID()\n\n                // Get DB data\n                let DBData = await DBgetMultipleData(`wallet${this.currentWalletID}`, [\n                    'derivationPath',\n                    'name',\n                    'currentCurrency',\n                    'currentNetwork',\n                    'TxFeeCurrentLevel',\n                    'TxFeeIsRemember'\n                ])\n\n                // Set data from DB\n                this.currentWalletDerivationPath = DBData.derivationPath\n                this.currentWalletName = DBData.name\n                this.currentCurrency = DBData.currentCurrency\n                this.TxFee.currentLevel = DBData.TxFeeCurrentLevel !== undefined ? DBData.TxFeeCurrentLevel : 'average'\n                this.TxFee.isRemember = DBData.TxFeeIsRemember !== undefined ? DBData.TxFeeIsRemember : false\n\n\n                // Set current network\n                this.networks[DBData.currentNetwork]\n                    ? this.currentNetwork = DBData.currentNetwork\n                    : this.currentNetwork = 'cosmoshub'\n\n\n                // Get current address / check cache\n                let cacheCurrentAddress = await DBgetData(`wallet${this.currentWalletID}`, `${this.currentNetwork}_currentAddress`)\n\n                if (cacheCurrentAddress === undefined) {\n                    // Get address\n                    let address = await getAddress()\n\n                    // Set current address\n                    this.currentAddress = address\n\n                    // Save in DB\n                    await DBaddData(`wallet${this.currentWalletID}`, [\n                        [`${this.currentNetwork}_currentAddress`, address]\n                    ])\n                } else {\n                    // Set current address\n                    this.currentAddress = cacheCurrentAddress\n                }\n\n\n                // Set current currency symbol\n                switch (this.currentCurrency) {\n                    case 'BTC':\n                        // Set current currency symbol\n                        this.currentCurrencySymbol = 'BTC'\n                        break\n\n                    case 'ETH':\n                        // Set current currency symbol\n                        this.currentCurrencySymbol = 'ETH'\n                        break\n\n                    default:\n                        // Set current currency symbol\n                        this.currentCurrencySymbol = '$'\n                        break\n                }\n\n                await Promise.all([\n                    // Get currencies price / check cache\n                    this.getCurrenciesPrice(),\n\n                    // Get APR for current networke / check cache\n                    this.getCurrentNetworkAPR(),\n\n                    // Connect to websocket\n                    this.connectWebsocket(),\n\n                    // Is cosmos SDK version support unstaking cancel / check cache\n                    this.isUnstakingCancelSupport()\n                ])\n\n                // Wait balances\n                if (this.networks[this.currentNetwork].is_staking_available) {\n                    await Promise.all([\n                        this.getBalances(),\n                        this.getStakedBalances()\n                    ])\n                } else {\n                    await Promise.all([\n                        this.getBalances()\n                    ])\n                }\n\n                // Init status\n                this.isInitializing = false\n                this.isInitialized = true\n            } catch(error) {\n                // Clean notifications\n                notification.notify({\n                    group: 'default',\n                    clean: true\n                })\n\n                // Show notification\n                notification.notify({\n                    group: 'default',\n                    speed: 200,\n                    duration: -100,\n                    title: i18n.global.t('message.notification_error_title'),\n                    type: 'error',\n                    data: {\n                        isCollapsible: true\n                    }\n                })\n\n                // Forced unlock\n                this.forcedUnlock = true\n\n                // Throw error\n                throw new Error(`init() failed: ${error.message}`)\n            }\n        },\n\n\n        // Currencies price\n        async getCurrenciesPrice() {\n            try {\n                // Get from DB\n                let cachePrices = await DBgetData('global', 'prices')\n\n                if (cachePrices === undefined || (new Date() - new Date(cachePrices.timestamp) > this.cacheTime)) {\n                    // Send request\n                    const response = await fetch('https://rpc.bronbro.io/price_feed_api/tokens/')\n\n                    if (!response.ok) {\n                        throw new Error('Failed to fetch currencies price. Status: ' + response.status)\n                    }\n\n                    const data = await response.json()\n\n                    // Set data\n                    this.prices = data\n\n                    // Save in DB\n                    await DBaddData('global', [\n                        ['prices', { data, timestamp: new Date().toISOString() }]\n                    ])\n                } else{\n                    // Set from cache\n                    this.prices = cachePrices.data\n                }\n            } catch (error) {\n                // Throw error\n                throw new Error(`getCurrenciesPrice() failed: ${error.message}`)\n            }\n        },\n\n\n        // Get APR for current network\n        async getCurrentNetworkAPR() {\n            try {\n                // Get from DB\n                let cacheAPR = await DBgetData(`wallet${this.currentWalletID}`, `${this.currentNetwork}_APR`)\n\n                // Check\n                if (cacheAPR === undefined || (new Date() - new Date(cacheAPR.timestamp) > this.cacheTime)) {\n                    // Send request\n                    const response = await fetch('https://rpc.bronbro.io/networks/')\n\n                    if (!response.ok) {\n                        throw new Error('Failed to fetch current network APR. Status: ' + response.status)\n                    }\n\n                    const data = await response.json()\n\n                    // Find chain\n                    const chain = data.infos.find(chain => chain.denom === (this.networks[this.currentNetwork].token_name).toLowerCase())\n\n                    if (chain) {\n                        // Set network APR\n                        this.networks[this.currentNetwork].APR = chain.apr\n\n                        // Save in DB\n                        await DBaddData(`wallet${this.currentWalletID}`, [\n                            [`${this.currentNetwork}_APR`, JSON.parse(JSON.stringify({\n                                value: chain.apr,\n                                timestamp: new Date().toISOString()\n                            }))]\n                        ])\n                    }\n                } else {\n                    // Set from cache\n                    this.networks[this.currentNetwork].APR = cacheAPR.value\n                }\n            } catch (error) {\n                // Throw error\n                throw new Error(`getCurrentNetworkAPR() failed: ${error.message}`)\n            }\n        },\n\n\n        // Get balances\n        async getBalances(forceUpdate = false) {\n            try {\n                // Balances status\n                this.isBalancesGot = false\n\n                // Reset data\n                this.balances = []\n\n                // Get from DB\n                let cacheBalances = await DBgetData(`wallet${this.currentWalletID}`, `${this.currentNetwork}_balances`)\n\n                if (forceUpdate || cacheBalances === undefined || (new Date() - new Date(cacheBalances.timestamp) > this.cacheTime)) {\n                    // Send request\n                    const response = await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/bank/v1beta1/balances/${this.currentAddress}`)\n\n                    if (!response.ok) {\n                        throw new Error('Failed to fetch balances. Status: ' + response.status)\n                    }\n\n                    const data = await response.json()\n\n                    if (data.balances.length) {\n                        // Set data\n                        this.balances = data.balances\n\n                        for (let balance of this.balances) {\n                            // Get balance info\n                            await this.getBalanceInfo(balance)\n                        }\n\n                        // Clear balances\n                        this.balances = this.balances.filter(obj => obj.hasOwnProperty('exponent'))\n\n                        // Save in DB\n                        await DBaddData(`wallet${this.currentWalletID}`, [\n                            [`${this.currentNetwork}_balances`, JSON.parse(JSON.stringify({\n                                value: this.balances,\n                                timestamp: new Date().toISOString()\n                            }))]\n                        ])\n                    }\n                } else {\n                    // Set from cache\n                    this.balances = cacheBalances.value\n                }\n\n                // Balances status\n                this.isBalancesGot = true\n            } catch (error) {\n                // Throw error\n                throw new Error(`getBalances() failed: ${error.message}`)\n            }\n        },\n\n\n        // Get staked balances\n        async getStakedBalances(forceUpdate = false) {\n            try {\n                // Balances status\n                this.isStakedBalancesGot = false\n\n                // Reset data\n                this.stakedBalances = []\n\n                // Get from DB\n                let cacheStakedBalances = await DBgetData(`wallet${this.currentWalletID}`, `${this.currentNetwork}_stakedBalances`)\n\n                if (forceUpdate || cacheStakedBalances === undefined || (new Date() - new Date(cacheStakedBalances.timestamp) > this.cacheTime)) {\n                    // Send request\n                    const response = await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/delegations/${this.currentAddress}`)\n\n                    if (!response.ok) {\n                        throw new Error('Failed to fetch staked balances. Status: ' + response.status)\n                    }\n\n                    const data = await response.json()\n\n                    if (data.delegation_responses) {\n                        // Set data\n                        this.stakedBalances = data.delegation_responses.filter(el => el.balance.amount > 0)\n\n                        for (let item of this.stakedBalances) {\n                            // Get balance info\n                            await this.getBalanceInfo(item.balance)\n\n                            // Get validator info\n                            await this.getValidatorInfo(item, item.delegation.validator_address)\n                        }\n\n                        // Clear balances\n                        this.stakedBalances = this.stakedBalances.filter(item => item.balance.hasOwnProperty('exponent'))\n\n                        // Save in DB\n                        await DBaddData(`wallet${this.currentWalletID}`, [\n                            [`${this.currentNetwork}_stakedBalances`, JSON.parse(JSON.stringify({\n                                value: this.stakedBalances,\n                                timestamp: new Date().toISOString()\n                            }))]\n                        ])\n                    }\n                } else {\n                    // Set from cache\n                    this.stakedBalances = cacheStakedBalances.value\n                }\n\n                // Staked balances status\n                this.isStakedBalancesGot = true\n            } catch (error) {\n                // Throw error\n                throw new Error(`getStakedBalances() failed: ${error.message}`)\n            }\n        },\n\n\n        // Get rewards\n        async getRewards() {\n            try {\n                // Rewards status\n                this.isRewardsGot = false\n\n                // Reset data\n                this.rewardsBalances = []\n\n                // Send request\n                const response = await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/distribution/v1beta1/delegators/${this.currentAddress}/rewards`)\n\n                if (!response.ok) {\n                    throw new Error('Failed to fetch rewards. Status: ' + response.status)\n                }\n\n                const data = await response.json()\n\n                if (data.total.length) {\n                    // Set data\n                    this.rewardsBalances = data.total\n\n                    for (let balance of this.rewardsBalances) {\n                        // Get balance info\n                        await this.getBalanceInfo(balance)\n                    }\n\n                    // Clear rewards\n                    this.rewardsBalances = this.rewardsBalances.filter(balance => balance.hasOwnProperty('exponent'))\n\n                    // Filter rewards\n                    this.rewardsBalances = this.rewardsBalances.filter(balance => balance.chain_info.chain_id == this.networks[this.currentNetwork].chain_id)\n                }\n\n                // Rewards status\n                this.isRewardsGot = true\n            } catch (error) {\n                // Throw error\n                throw new Error(`getRewards() failed: ${error.message}`)\n            }\n        },\n\n\n        // Get unstaking balances\n        async getUnstakingBalances () {\n            try {\n                // Unstaking balances status\n                this.isUnstakingBalancesGot = false\n\n                // Reset data\n                this.unstakingBalances = []\n                this.networks[this.currentNetwork].totalUnstakingTokens = 0\n\n                // Send request\n                const response = await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/delegators/${this.currentAddress}/unbonding_delegations`)\n\n                if (!response.ok) {\n                    throw new Error('Failed to fetch unstaking balances. Status: ' + response.status)\n                }\n\n                const data = await response.json()\n\n                // Set data\n                this.unstakingBalances = data.unbonding_responses\n\n                for (let item of this.unstakingBalances) {\n                    // Calc total unstaking tokens\n                    item.entries.forEach(entry => this.networks[this.currentNetwork].totalUnstakingTokens += parseInt(entry.balance))\n\n                    // Get validator info\n                    await this.getValidatorInfo(item, item.validator_address)\n                }\n\n                // Unstaking balances status\n                this.isUnstakingBalancesGot = true\n            } catch (error) {\n                // Throw error\n                throw new Error(`getUnstakingBalances() failed: ${error.message}`)\n            }\n        },\n\n\n        // Get redelegations\n        async getRedelegations() {\n            try {\n                // Send request\n                const response = await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/delegators/${this.currentAddress}/redelegations`)\n\n                if (!response.ok) {\n                    throw new Error('Failed to fetch redelegations. Status: ' + response.status)\n                }\n\n                const data = await response.json()\n\n                // Set data\n                this.redelegations = data.redelegation_responses\n            } catch (error) {\n                // Throw error\n                throw new Error(`getRedelegations() failed: ${error.message}`)\n            }\n        },\n\n\n        // Get balance info\n        async getBalanceInfo(balance) {\n            try {\n                // Denom traces\n                let { base_denom } = await denomTraces(balance.denom, this.currentNetwork)\n\n                // Old base denom\n                balance.old_base_denom = base_denom\n\n                if (base_denom === 'share') {\n                    return\n                }\n\n                // Get (token info/chain name) from assets\n                for (let asset of assets) {\n                    // Exceptions\n                    switch (base_denom) {\n                        case 'uusdc':\n                            var currentAsset = assets.find(el => el.chain_name === 'noble')\n                            break;\n\n                        // case 'utia':\n                        //     var currentAsset = assets.find(el => el.chain_name === 'celestiatestnet3')\n                        //     break;\n\n                        case 'udatom':\n                            var currentAsset = assets.find(el => el.chain_name === 'cosmoshub')\n\n                            base_denom = 'uatom'\n                            break;\n\n                        case 'drop':\n                            var currentAsset = assets.find(el => el.chain_name === 'celestia')\n\n                            base_denom = 'utia'\n                            break;\n\n                        case 'uboom':\n                            var currentAsset = assets.find(el => el.chain_name === 'neutron')\n\n                            base_denom = 'untrn'\n                            break;\n\n                        default:\n                            var currentAsset = asset\n                            break;\n                    }\n\n                    // Token info\n                    let tokenInfo = currentAsset.assets.find(token => token.base === base_denom)\n\n                    if (tokenInfo) {\n                        // Set data\n                        balance.token_info = tokenInfo\n                        balance.chain_name = currentAsset.chain_name\n\n                        break\n                    }\n                }\n\n                if (balance.token_info) {\n                    // Format denom exponent\n                    let formatableToken = this.formatableTokens.find(el => el.token_name === balance.token_info.base.toUpperCase())\n\n                    // Set exponent for denom\n                    formatableToken\n                        ? balance.exponent = formatableToken.exponent\n                        : balance.exponent = balance.token_info.denom_units[1]?.exponent || 0\n\n                    // Get chain info\n                    balance.chain_info = chains.find(el => el.chain_name === balance.chain_name)\n\n                    // Get price\n                    balance.price = getPriceByDenom(balance.token_info.symbol)\n                }\n            } catch (error) {\n                // Throw error\n                throw new Error(`getBalanceInfo() failed: ${error.message}`)\n            }\n        },\n\n\n        // Has native token\n        hasNativeToken() {\n            return this.balances.some(balance => balance.denom == this.networks[this.currentNetwork].denom)\n        },\n\n\n        // Get validator info\n        async getValidatorInfo(item, validator_address) {\n            try {\n                // Send request\n                const response = await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/validators/${validator_address}`)\n\n                if (!response.ok) {\n                    throw new Error('Failed to fetch validator info. Status: ' + response.status)\n                }\n\n                const data = await response.json()\n\n                // Set data\n                item.validator_info = response.validator\n            } catch (error) {\n                // Throw error\n                throw new Error(`getValidatorInfo() failed: ${error.message}`)\n            }\n        },\n\n\n        // Get secret from DB\n        async getSecret(current = false) {\n            try {\n                let DBWallets = null,\n                    walletID = 0\n\n                if (!current) {\n                    // Get wallets\n                    DBWallets = await DBgetData('global', 'wallets')\n\n                    // Get wallet ID\n                    walletID = DBWallets !== undefined ? DBWallets.length + 1 : 1\n                } else {\n                    walletID = this.currentWalletID\n                }\n\n                // Get from DB\n                const DBSecret = await DBgetMultipleData('secret', [\n                    `wallet${walletID}_aesKey`,\n                    `wallet${walletID}_secret`,\n                    `wallet${walletID}_secretIV`\n                ])\n\n                // Get wallet secret part two\n                const DBSecretPartTwo = await DBgetData(`wallet${walletID}`, 'secret')\n\n                // Restore the original secret\n                const restoredSecret = sss.combine([DBSecret[`wallet${walletID}_secret`], DBSecretPartTwo])\n\n                // Convert back to Uint8Array\n                const restoredUint8Array = new Uint8Array(restoredSecret)\n\n                // Return memo\n                return await decryptData(restoredUint8Array, DBSecret[`wallet${walletID}_secretIV`], DBSecret[`wallet${walletID}_aesKey`])\n            } catch (error) {\n                // Throw error\n                throw new Error(`getSecret() failed: ${error.message}`)\n            }\n        },\n\n\n        // Get private key from DB\n        async getPrivateKey(current = false) {\n            try {\n                let DBWallets = null,\n                    walletID = 0\n\n                if (!current) {\n                    // Get wallets\n                    DBWallets = await DBgetData('global', 'wallets')\n\n                    // Get wallet ID\n                    walletID = DBWallets !== undefined ? DBWallets.length + 1 : 1\n                } else {\n                    walletID = this.currentWalletID\n                }\n\n                // Get from DB\n                const DBSecret = await DBgetMultipleData('secret', [\n                    `wallet${walletID}_aesKey`,\n                    `wallet${walletID}_privateKey`,\n                    `wallet${walletID}_secretIV`\n                ])\n\n                // Get wallet secret part two\n                const DBSecretPartTwo = await DBgetData(`wallet${walletID}`, 'privateKey')\n\n                // Restore the original secret\n                const restoredSecret = sss.combine([DBSecret[`wallet${walletID}_privateKey`], DBSecretPartTwo])\n\n                // Convert back to Uint8Array\n                const restoredUint8Array = new Uint8Array(restoredSecret)\n\n                // Return memo\n                return await decryptData(restoredUint8Array, DBSecret[`wallet${walletID}_secretIV`], DBSecret[`wallet${walletID}_aesKey`])\n            } catch (error) {\n                // Throw error\n                throw new Error(`getPrivateKey() failed: ${error.message}`)\n            }\n        },\n\n\n        // Find missing wallet ID\n        async findMissingId(DBWallets = null) {\n            try {\n                if (!DBWallets) {\n                    // Get wallets\n                    DBWallets = await DBgetData('global', 'wallets')\n                }\n\n                // Find the minimum missing value\n                let missingId = 1\n\n                if (DBWallets !== undefined) {\n                    // Set IDs\n                    let ids = DBWallets.map(el => el.id)\n\n                    while (ids.includes(missingId)) {\n                        missingId++\n                    }\n                }\n\n                // Return value\n                return missingId\n            } catch (error) {\n                // Throw error\n                throw new Error(`findMissingId() failed: ${error.message}`)\n            }\n        },\n\n\n        // Find next available wallet name\n        async findNextAvailableWalletName(DBWallets = null) {\n            try {\n                let i = 2,\n                    name = this.defaultWalletName + i\n\n                if (!DBWallets) {\n                    // Get wallets\n                    DBWallets = await DBgetData('global', 'wallets')\n                }\n\n                if (DBWallets !== undefined) {\n                    while (true) {\n                        name = this.defaultWalletName + i\n\n                        // Check if a wallet with this name exists\n                        if (!DBWallets.some(el => el.name === name)) {\n                            return name\n                        }\n\n                        i++\n                    }\n                }\n\n                return name\n            } catch (error) {\n                // Throw error\n                throw new Error(`findNextAvailableWalletName() failed: ${error.message}`)\n            }\n        },\n\n\n        // Set secret\n        async setSecret(secret) {\n            try {\n                // Generate AES key\n                const aesKey = await generateAESKey()\n\n                // Encryption\n                const { ciphertext, iv } = await encryptData(secret, aesKey)\n\n                // Split into 2 parts, both parts are required for recovery\n                const shares = sss.split(Buffer.from(ciphertext), {\n                    shares: 2,\n                    threshold: 2\n                })\n\n                // Get wallet ID\n                const walletID = await this.findMissingId()\n\n                // Save in DB\n                await DBaddData('secret', [\n                    [`wallet${walletID}_aesKey`, aesKey],\n                    [`wallet${walletID}_secret`, shares[0]],\n                    [`wallet${walletID}_secretIV`, iv]\n                ])\n\n                // Check DB storeName\n                await DBcheckStoreName(`wallet${walletID}`)\n\n                // Save in DB\n                await DBaddData(`wallet${walletID}`, [\n                    ['secret', shares[1]],\n                    ['createdBy', 'secret']\n                ])\n            } catch (error) {\n                // Throw error\n                throw new Error(`setSecret() failed: ${error.message}`)\n            }\n        },\n\n\n        // Set private key\n        async setPrivateKey(privateKey) {\n            try {\n                // Generate AES key\n                const aesKey = await generateAESKey()\n\n                // Encryption\n                const { ciphertext, iv } = await encryptData(privateKey, aesKey)\n\n                // Split into 2 parts, both parts are required for recovery\n                const shares = sss.split(Buffer.from(ciphertext), {\n                    shares: 2,\n                    threshold: 2\n                })\n\n                // Get wallet ID\n                const walletID = await this.findMissingId()\n\n                // Save in DB\n                await DBaddData('secret', [\n                    [`wallet${walletID}_aesKey`, aesKey],\n                    [`wallet${walletID}_privateKey`, shares[0]],\n                    [`wallet${walletID}_secretIV`, iv]\n                ])\n\n                await DBaddData(`wallet${walletID}`, [\n                    ['privateKey', shares[1]],\n                    ['createdBy', 'privateKey']\n                ])\n            } catch (error) {\n                // Throw error\n                throw new Error(`setPrivateKey() failed: ${error.message}`)\n            }\n        },\n\n\n        // Set current network\n        async setCurrentNetwork(chain) {\n            try {\n                // Update current network\n                this.currentNetwork = chain\n\n                // Save in DB\n                await DBaddData(`wallet${this.currentWalletID}`, [\n                    ['currentNetwork', chain]\n                ])\n            } catch (error) {\n                // Throw error\n                throw new Error(`setCurrentNetwork() failed: ${error.message}`)\n            }\n        },\n\n\n        // Create wallet\n        async createWallet({ pinCode = null, walletName = null, isBiometricEnabled = null, isAdding = false, relativeWallet = null, derivationPath = this.tempDerivationPath }) {\n            try {\n                // Get all wallets\n                const DBWallets = await DBgetData('global', 'wallets')\n\n                if (DBWallets === undefined) {\n                    // Set array type\n                    DBWallets = []\n                }\n\n                // Get wallet ID\n                const walletID = await this.findMissingId(DBWallets)\n\n                // Available wallet name\n                const availableWalletName = await this.findNextAvailableWalletName()\n\n                // Update wallets\n                DBWallets.push({\n                    id: walletID,\n                    name: walletName || availableWalletName\n                })\n\n                // Add data to wallet DB\n                await DBaddData(`wallet${walletID}`, [\n                    ['id', walletID],\n                    ['name', walletName || availableWalletName],\n                    ['currentNetwork', 'cosmoshub'],\n                    ['currentCurrency', 'USD'],\n                    ['derivationPath', derivationPath],\n                    ['subWallets', JSON.parse(JSON.stringify([]))],\n                    ['relativeWallet', relativeWallet]\n                ])\n\n                // Add data to global DB\n                if (!isAdding) {\n                    // Generate HMAC key\n                    const hmacKey = await generateHMACKey()\n\n                    await DBaddData('global', [\n                        ['isRegister', true],\n                        ['currentWalletID', walletID],\n                        ['hmacKey', hmacKey],\n                        ['pin', await hashDataWithKey(pinCode.join(''), hmacKey)],\n                        ['isBiometric', isBiometricEnabled],\n                        ['authErrorLimit', this.authErrorLimit],\n                        ['wallets', DBWallets]\n                    ])\n                } else {\n                    await DBaddData('global', [\n                        ['wallets', DBWallets]\n                    ])\n                }\n\n                // Set authorized status\n                this.isAuthorized = true\n\n                // Return wallet ID\n                return walletID\n            } catch (error) {\n                // Throw error\n                throw new Error(`createWallet() failed: ${error.message}`)\n            }\n        },\n\n\n        // Create from exist wallet\n        async createFromExistWallet() {\n            try {\n                // Get secret from DB\n                const currentWalletSecret = await this.getSecret(true)\n\n                // Get sub wallets of current wallet\n                const subWallets = await DBgetData(`wallet${this.currentWalletID}`, 'subWallets')\n\n                // Set secret\n                await this.setSecret(currentWalletSecret)\n\n                // Create wallet\n                const newWalletID = await this.createWallet({\n                    isAdding: true,\n                    relativeWallet: this.currentWalletID,\n                    derivationPath: this.defaultDerivationPath.replace(/\\/\\d+$/, `/${(subWallets.length + 1)}`)\n                })\n\n                // Add new subwallet\n                subWallets.push(newWalletID)\n\n                // Update current wallet\n                await DBaddData(`wallet${this.currentWalletID}`, [\n                    ['subWallets', JSON.parse(JSON.stringify(subWallets))]\n                ])\n            } catch (error) {\n                // Throw error\n                throw new Error(`createFromExistWallet() failed: ${error.message}`)\n            }\n        },\n\n\n        // Get current wallet created by\n        async getCurrentWalletCreatedBy() {\n            try {\n                // Get data from DB\n                return await DBgetData(`wallet${this.currentWalletID}`, 'createdBy')\n            } catch (error) {\n                // Throw error\n                throw new Error(`getCurrentWalletCreatedBy() failed: ${error.message}`)\n            }\n        },\n\n\n        // Update auth error limit\n        async updateUserAuthErrorLimit(limit) {\n            try {\n                await DBaddData('global', [\n                    ['authErrorLimit', limit]\n                ])\n            } catch (error) {\n                // Throw error\n                throw new Error(`updateUserAuthErrorLimit() failed: ${error.message}`)\n            }\n        },\n\n\n        // Update TxFee info\n        async updateTxFeeInfo() {\n            try {\n                await DBaddData(`wallet${this.currentWalletID}`, [\n                    ['TxFeeCurrentLevel', this.TxFee.currentLevel],\n                    ['TxFeeIsRemember', this.TxFee.isRemember]\n                ])\n            } catch (error) {\n                // Throw error\n                throw new Error(`updateTxFeeInfo() failed: ${error.message}`)\n            }\n        },\n\n\n        // Update current currency\n        async updateCurrentCurrency() {\n            try {\n                switch (this.currentCurrency) {\n                    case 'BTC':\n                        // Set current currency\n                        this.currentCurrency = 'ETH'\n\n                        // Set current currency symbol\n                        this.currentCurrencySymbol = 'ETH'\n\n                        // Update in DB\n                        DBaddData(`wallet${this.currentWalletID}`, [\n                            ['currentCurrency', 'ETH']\n                        ])\n\n                        break;\n\n                    case 'ETH':\n                        // Set current currency\n                        this.currentCurrency = 'USD'\n\n                        // Set current currency symbol\n                        this.currentCurrencySymbol = '$'\n\n                        // Update in DB\n                        DBaddData(`wallet${this.currentWalletID}`, [\n                            ['currentCurrency', 'USD']\n                        ])\n\n                        break;\n\n                    default:\n                        // Set current currency\n                        this.currentCurrency = 'BTC'\n\n                        // Set current currency symbol\n                        this.currentCurrencySymbol = 'BTC'\n\n                        // Update in DB\n                        DBaddData(`wallet${this.currentWalletID}`, [\n                            ['currentCurrency', 'BTC']\n                        ])\n\n                        break;\n                }\n            } catch (error) {\n                // Throw error\n                throw new Error(`updateCurrentCurrency() failed: ${error.message}`)\n            }\n        },\n\n\n        // Connect to websocket\n        async connectWebsocket() {\n            try {\n                // Close previous connections\n                Object.values(this.networks).forEach(network => {\n                    if (network.websocket) {\n                        // Remove onmessage listener\n                        network.websocket.onopen = null\n                        network.websocket.onmessage = null\n\n                        // Close connection\n                        network.websocket.close()\n                    }\n                })\n\n                // Connect\n                this.networks[this.currentNetwork].websocket = new WebSocket(this.networks[this.currentNetwork].websocket_url)\n\n                // Listening events\n                this.networks[this.currentNetwork].websocket.onopen = () => {\n                    // Event Tx with recipient\n                    this.networks[this.currentNetwork].websocket.send(JSON.stringify({\n                        jsonrpc: '2.0',\n                        method: 'subscribe',\n                        id: '1',\n                        params: {\n                            query: `tm.event='Tx' AND transfer.recipient='${this.currentAddress}'`\n                        }\n                    }))\n                }\n\n                // WSS message event\n                this.networks[this.currentNetwork].websocket.onmessage = async msg => {\n                    const parsedMsg = JSON.parse(msg.data)\n\n                    // If the result object is not empty\n                    if (parsedMsg.result && Object.keys(parsedMsg.result).length > 0) {\n                        // User recipient\n                        if (parsedMsg.id == '1') {\n                            // Update all balances\n                            this.updateAllBalances()\n\n                            // Reset Tx Fee\n                            this.resetTxFee()\n                        }\n\n                        // Transaction\n                        if (parsedMsg.id == '2') {\n                            // Check Tx result\n                            this.checkTxResult()\n                        }\n                    }\n                }\n            } catch (error) {\n                // Throw error\n                throw new Error(`connectWebsocket() failed: ${error.message}`)\n            }\n        },\n\n\n        // Set current balance\n        TxFeeGetCurrentBalance(baseDenom) {\n            // Set data\n            this.TxFee.balance = this.balances.find(balance => balance.denom === baseDenom) || { amount: 0 }\n        },\n\n\n        // Get minimum gas price\n        TxFeeSetGasPrices() {\n            // Get chain info\n            const chain = chains.find(el => el.chain_id === this.networks[this.currentNetwork].chain_id)\n\n            // Set data\n            this.TxFee.lowPrice = chain.fees.fee_tokens[0].fixed_min_gas_price ? chain.fees.fee_tokens[0].fixed_min_gas_price * 1.1 : chain.fees.fee_tokens[0].low_gas_price\n            this.TxFee.averagePrice = this.TxFee.lowPrice * 1.15\n            this.TxFee.highPrice = this.TxFee.lowPrice * 1.30\n        },\n\n\n        // Enough status\n        TxFeeIsEnough() {\n            // Set status\n            if (this.isBalancesGot) {\n                this.TxFee.isEnough = this.TxFee.balance.amount > this.TxFee.userGasAmount * this.TxFee[`${this.TxFee.currentLevel}Price`]\n            }\n        },\n\n\n        // Set listener current tx\n        setListenerCurrentTx() {\n            try {\n                // Event Tx with hash\n                this.networks[this.currentNetwork].websocket.send(JSON.stringify({\n                    jsonrpc: '2.0',\n                    method: 'subscribe',\n                    id: '2',\n                    params: {\n                        query: `tm.event='Tx' AND tx.hash='${(this.networks[this.currentNetwork].currentTxHash).toUpperCase()}'`\n                    }\n                }))\n            } catch (error) {\n                // Throw error\n                throw new Error(`setListenerCurrentTx() failed: ${error.message}`)\n            }\n        },\n\n\n        // Get Tx info\n        async getTxInfo(txHash) {\n            try {\n                // Send request\n                const response = await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/tx/v1beta1/txs/${txHash.toUpperCase()}`).then(res => res.json())\n\n                if (!response.ok) {\n                    throw new Error('Failed to fetch Tx info. Status: ' + response.status)\n                }\n\n                const data = await response.json()\n\n                return data\n            } catch (error) {\n                // Throw error\n                throw new Error(`getTxInfo() failed: ${error.message}`)\n            }\n        },\n\n\n        // Check Tx result\n        async checkTxResult() {\n            try {\n                const txResult = await this.getTxInfo(this.networks[this.currentNetwork].currentTxHash)\n\n                if (txResult.code !== 5) {\n                    // Clean notifications\n                    notification.notify({\n                        group: 'default',\n                        clean: true\n                    })\n\n                    if (txResult.tx_response?.code === 0) {\n                        // Show notification\n                        notification.notify({\n                            group: 'default',\n                            speed: 200,\n                            duration: 4000,\n                            title: i18n.global.t('message.notification_tx_success_title'),\n                            type: 'success',\n                            data: {\n                                explorer_link: getExplorerLink(this.currentNetwork)\n                            }\n                        })\n                    } else {\n                        // Get error code\n                        let errorText = ''\n\n                        // Get error title\n                        txResult.tx_response?.code\n                            ? errorText = i18n.global.t(`message.notification_tx_error_${txResult.tx_response?.code}`)\n                            : errorText = i18n.global.t('message.notification_tx_error_rejected')\n\n                        // Show notification\n                        notification.notify({\n                            group: 'default',\n                            speed: 200,\n                            duration: 6000,\n                            title: i18n.global.t('message.notification_tx_error_title'),\n                            text: errorText,\n                            type: 'error'\n                        })\n                    }\n\n                    // Clear tx hash\n                    this.networks[this.currentNetwork].currentTxHash = null\n\n                    // Update all balances\n                    this.updateAllBalances()\n\n                    // Reset Tx Fee\n                    this.resetTxFee()\n                }\n            } catch (error) {\n                // Throw error\n                throw new Error(`checkTxResult() failed: ${error.message}`)\n            }\n        },\n\n\n        // Update all balances\n        async updateAllBalances() {\n            try {\n                let promises = []\n\n                // Update balances\n                if (this.isBalancesGot) {\n                    promises.push(this.getBalances(true))\n                }\n\n                // Update staked balances\n                if (this.isStakedBalancesGot) {\n                    promises.push(this.getStakedBalances(true))\n                }\n\n                // Update rewards\n                if (this.isRewardsGot) {\n                    promises.push(this.getRewards())\n                }\n\n                // Update unstaking balances\n                if (this.isUnstakingBalancesGot) {\n                    promises.push(this.getUnstakingBalances())\n                }\n\n                // Wait balances\n                await Promise.all(promises)\n            } catch (error) {\n                // Throw error\n                throw new Error(`updateAllBalances() failed: ${error.message}`)\n            }\n        },\n\n\n        // Reset Tx Fee\n        async resetTxFee() {\n            try {\n                // Get DB data\n                const DBData = await DBgetMultipleData(`wallet${this.currentWalletID}`, [\n                    'TxFeeCurrentLevel',\n                    'TxFeeIsRemember'\n                ])\n\n                // Reset data\n                this.TxFee = {\n                    balance: {},\n                    currentLevel: DBData.TxFeeCurrentLevel || 'average',\n                    userGasAmount: 0,\n                    gasAmount: 0,\n                    isRemember: DBData.TxFeeIsRemember || false,\n                    isGasAdjustmentAuto: true,\n                    isEnough: false\n                }\n            } catch (error) {\n                // Throw error\n                throw new Error(`resetTxFee() failed: ${error.message}`)\n            }\n        },\n\n\n        // Get network unbonding period\n        async getNetworkUnbondingTime() {\n            try {\n                // Send request\n                const response = await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/params`)\n\n                if (!response.ok) {\n                    throw new Error('Failed to fetch network unbonding time. Status: ' + response.status)\n                }\n\n                const data = await response.json()\n\n                // Set data\n                this.networks[this.currentNetwork].unbondingTime = parseInt(data.params.unbonding_time) / 86400\n            } catch (error) {\n                // Throw error\n                throw new Error(`getNetworkUnbondingTime() failed: ${error.message}`)\n            }\n        },\n\n\n        // Get all validators\n        async getAllValidators() {\n            try {\n                // Send request\n                const response = await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/validators?status=BOND_STATUS_BONDED&pagination.limit=200`)\n\n                if (!response.ok) {\n                    throw new Error('Failed to fetch all validatots. Status: ' + response.status)\n                }\n\n                const data = await response.json()\n\n                return data.validators\n            } catch (error) {\n                // Throw error\n                throw new Error(`getAllValidators() failed: ${error.message}`)\n            }\n        },\n\n\n        // Get user validators\n        async getUserValidators() {\n            try {\n                // Send request\n                const response = await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/delegators/${this.currentAddress}/validators?status=BOND_STATUS_BONDED&pagination.limit=200`)\n\n                if (!response.ok) {\n                    throw new Error('Failed to fetch user validatots. Status: ' + response.status)\n                }\n\n                const data = await response.json()\n\n                return data.validators\n            } catch (error) {\n                // Throw error\n                throw new Error(`getUserValidators() failed: ${error.message}`)\n            }\n        },\n\n\n        // Get total bonded tokens\n        async getTotalBondedTokens() {\n            try {\n                // Send request\n                const response = await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/staking/v1beta1/pool`)\n\n                if (!response.ok) {\n                    throw new Error('Failed to fetch user validatots. Status: ' + response.status)\n                }\n\n                const data = await response.json()\n\n                // Set data\n                this.networks[this.currentNetwork].totalBondedTokens = parseInt(data.pool.bonded_tokens)\n            } catch (error) {\n                // Throw error\n                throw new Error(`getUserValidators() failed: ${error.message}`)\n            }\n        },\n\n\n        // Is unstaking cancel support\n        async isUnstakingCancelSupport() {\n            try {\n                let result = false,\n                    cacheIsUnstakingCancelSupport = await DBgetData(`wallet${this.currentWalletID}`, `${this.currentNetwork}_isUnstakingCancelSupport`)\n\n                // Check\n                if (cacheIsUnstakingCancelSupport === undefined || (new Date() - new Date(cacheIsUnstakingCancelSupport.timestamp) > this.cacheTime)) {\n                    const response = await fetch(`${this.networks[this.currentNetwork].lcd_api}/cosmos/base/tendermint/v1beta1/node_info`)\n\n                    if (!response.ok) {\n                        throw new Error('Failed to fetch is unstaking cancel support. Status: ' + response.status)\n                    }\n\n                    const data = await response.json()\n\n                    const cosmos_sdk_version = data.application_version.cosmos_sdk_version,\n                        min_version = 'v0.46'\n\n                    // Parsing versions\n                    const cosmos_sdk_version_parsed = cosmos_sdk_version.replace('v', '').split('-')[0].split('.').map(Number),\n                        min_version_parsed = min_version.replace('v', '').split('-')[0].split('.').map(Number)\n\n                    // Fill in the missing with zeros\n                    while (cosmos_sdk_version_parsed.length < 3) cosmos_sdk_version_parsed.push(0)\n                    while (min_version_parsed.length < 3) min_version_parsed.push(0)\n\n                    // Compare versions\n                    for (let i = 0; i < 3; i++) {\n                        if (cosmos_sdk_version_parsed[i] > min_version_parsed[i]) result = true // Version above minimum\n                        if (cosmos_sdk_version_parsed[i] < min_version_parsed[i]) result = false // Version is less than minimum\n                    }\n\n                    // Save in DB\n                    await DBaddData(`wallet${this.currentWalletID}`, [\n                        [this.currentNetwork + '_isUnstakingCancelSupport', JSON.parse(JSON.stringify({\n                            value: result,\n                            timestamp: new Date().toISOString()\n                        }))]\n                    ])\n\n                    // Set data\n                    this.networks[this.currentNetwork].isUnstakingCancelSupport = result\n                } else {\n                    // Set from cache\n                    this.networks[this.currentNetwork].isUnstakingCancelSupport = cacheIsUnstakingCancelSupport.value\n                }\n            } catch (error) {\n                // Throw error\n                throw new Error(`isUnstakingCancelSupport() failed: ${error.message}`)\n            }\n        },\n\n\n        // Get wallets\n        async getWallets() {\n            try {\n                // Get from DB\n                this.wallets = await DBgetData('global', 'wallets')\n            } catch (error) {\n                // Throw error\n                throw new Error(`getWallets() failed: ${error.message}`)\n            }\n        },\n\n\n        // Update wallet\n        async updateWallet({ wallet, new_name }) {\n            try {\n                // Find wallet\n                let currentWallet = this.wallets.find(el => el.id === wallet.id)\n\n                // Update name\n                if (currentWallet) {\n                    currentWallet.name = new_name\n\n                    // Update in DB\n                    await DBaddData('global', [\n                        ['wallets', JSON.parse(JSON.stringify(this.wallets))]\n                    ])\n\n                    await DBaddData(`wallet${this.currentWalletID}`, [\n                        ['name', currentWallet.name]\n                    ])\n\n                    // Update in state\n                    if (this.currentWalletID === wallet.id) {\n                        this.currentWalletName = currentWallet.name\n                    }\n\n                    // Get wallets\n                    await this.getWallets()\n                }\n            } catch (error) {\n                // Throw error\n                throw new Error(`updateWallet() failed: ${error.message}`)\n            }\n        },\n\n\n        // Remove wallet\n        async removeWallet(wallet) {\n            try {\n                // Update wallets\n                this.wallets = this.wallets.filter(el => el.id !== wallet.id)\n\n                // Set default wallet if deleted current\n                if (wallet.id === this.currentWalletID) {\n                    // Set second wallet like default\n                    await this.setCurrentWalletID(this.wallets[0].id)\n                }\n\n                // Cleare store in DB\n                await DBclearStore(`wallet${wallet.id}`)\n\n                // Remove in secret DB\n                await DBdeleteData('secret', [\n                    `wallet${wallet.id}_aesKey`,\n                    `wallet${wallet.id}_privateKey`,\n                    `wallet${wallet.id}_secret`,\n                    `wallet${wallet.id}_secretIV`\n                ])\n\n                // Update wallets in DB\n                await DBaddData('global', [\n                    ['wallets', JSON.parse(JSON.stringify(this.wallets))]\n                ])\n            } catch (error) {\n                // Throw error\n                throw new Error(`removeWallet() failed: ${error.message}`)\n            }\n        },\n\n\n        // Set age confirmed\n        async setAgeConfirmed() {\n            try {\n                // Save in DB\n                await DBaddData('global', [\n                    ['ageConfirmed', true]\n                ])\n            } catch (error) {\n                // Throw error\n                throw new Error(`setAgeConfirmed() failed: ${error.message}`)\n            }\n        },\n\n\n        // Get age confirmed\n        async getAgeConfirmed() {\n            try {\n                // Get from DB\n                const DBAgeConfirmed = await DBgetData('global', 'ageConfirmed')\n\n                if (DBAgeConfirmed !== undefined) {\n                    // Set result\n                    this.isAgeConfirmed = DBAgeConfirmed\n                }\n            } catch (error) {\n                // Throw error\n                throw new Error(`getAgeConfirmed() failed: ${error.message}`)\n            }\n        },\n\n\n        // Set user lock\n        async setUserLock() {\n            try {\n                // Save in DB\n                await DBaddData('global', [\n                    ['isUserLock', true],\n                    ['userLockTimestamp', new Date().toISOString()]\n                ])\n            } catch (error) {\n                // Throw error\n                throw new Error(`setUserLock() failed: ${error.message}`)\n            }\n        },\n\n\n        // Set user unlock\n        async setUserUnlock() {\n            try {\n                // Save in DB\n                await DBaddData('global', [\n                    ['isUserLock', false],\n                    ['userLockTimestamp', '']\n                ])\n\n                // Сhange auth limit\n                await this.updateUserAuthErrorLimit(this.authErrorLimit)\n            } catch (error) {\n                // Throw error\n                throw new Error(`setUserLock() failed: ${error.message}`)\n            }\n        },\n\n\n        // Set user channel\n        async setUserChannel(channel) {\n            try {\n                // Get from DB\n                const userChannels = await DBgetData('global', 'userChannels') || []\n\n                // Add new channel\n                userChannels.push(channel)\n\n                // Save in DB\n                await DBaddData('global', [\n                    ['userChannels', JSON.parse(JSON.stringify(userChannels))]\n                ])\n            } catch (error) {\n                // Throw error\n                throw new Error(`setUserChannel() failed: ${error.message}`)\n            }\n        },\n\n\n        // Update user channel\n        async updateUserChannel(channel) {\n            try {\n                // Get from DB\n                const userChannels = await DBgetData('global', 'userChannels') || []\n\n                // Add new channel\n                const oldChannel = userChannels.find(el => el.info.pretty_name === channel.old.info.pretty_name)\n\n                // Update data\n                oldChannel.info = channel.info\n                oldChannel.channel_id = channel.channel_id\n\n                // Save in DB\n                await DBaddData('global', [\n                    ['userChannels', JSON.parse(JSON.stringify(userChannels))]\n                ])\n            } catch (error) {\n                // Throw error\n                throw new Error(`updateUserChannel() failed: ${error.message}`)\n            }\n        },\n\n\n        // Get all user channels\n        async getAllUserChannels() {\n            try {\n                // Get from DB\n                return await DBgetData('global', 'userChannels')\n            } catch (error) {\n                // Throw error\n                throw new Error(`getAllUserChannels() failed: ${error.message}`)\n            }\n        },\n\n\n        // Delete user channel\n        async deleteUserChannel(chainName) {\n            try {\n                // Get from DB\n                const userChannels = await DBgetData('global', 'userChannels')\n\n                // Delete channel\n                userChannels = userChannels.filter(el => el.info.pretty_name !== chainName)\n\n                // Update in DB\n                await DBaddData('global', [\n                    ['userChannels', userChannels],\n                ])\n            } catch (error) {\n                // Throw error\n                throw new Error(`deleteUserChannel() failed: ${error.message}`)\n            }\n        },\n\n\n        // Clear all data\n        async clearAllData() {\n            try {\n                // Clear in DB\n                await DBclearAllData()\n\n                // Reset all state\n                this.$reset()\n            } catch (error) {\n                // Throw error\n                throw new Error(`clearAllData() failed: ${error.message}`)\n            }\n        }\n    }\n})","import { openDB, deleteDB } from 'idb'\n\n\nvar DB = null\n\n\n// Get store\nasync function getStore() {\n    // Import\n    const { useGlobalStore } = await import('@/store')\n\n    // Return instance\n    return useGlobalStore()\n}\n\n\n// DB promise\nconst dbPromise = (async () => {\n    try {\n        let store = await getStore(),\n            isFirstRun = localStorage.getItem('firstRun') === null\n\n        deleteDB('bro_db')\n\n        if (isFirstRun) {\n            deleteDB('jetWallet')\n\n            localStorage.setItem('firstRun', 'false')\n        }\n\n        // Get current DB version\n        store.getCurrentDBVersion()\n\n        // Open DB\n        return openDB('jetWallet', store.DBVersion, {\n            upgrade(db) {\n                // Create store if it does not exist\n                if (!db.objectStoreNames.contains('global')) {\n                    db.createObjectStore('global')\n                }\n\n                // Create store if it does not exist\n                if (!db.objectStoreNames.contains('secret')) {\n                    db.createObjectStore('secret')\n                }\n\n                // Create store if it does not exist\n                if (!db.objectStoreNames.contains('wallet1')) {\n                    db.createObjectStore('wallet1')\n                }\n            }\n        })\n    } catch (error) {\n        throw new Error(`Error initializing IndexedDB: ${error.message}`)\n    }\n})()\n\n\nexport async function DBcheckStoreName(name) {\n    let store = await getStore()\n\n    try {\n        if (!DB) {\n            // Check DB\n            DB = await dbPromise\n        }\n\n        if (!DB.objectStoreNames.contains(name)) {\n            // Set new DB version\n            store.setNewDBVersion()\n\n            // Close DB\n            DB.close()\n\n            // Open DB\n            DB = await openDB('jetWallet', store.DBVersion, {\n                upgrade(db) {\n                    // Create store if it does not exist\n                    if (!db.objectStoreNames.contains(name)) {\n                        db.createObjectStore(name)\n                    }\n                }\n            })\n        }\n    } catch (error) {\n        throw new Error(`Error checking store name in indexedDB: ${error.message}`)\n    }\n}\n\n\nexport async function DBgetAllData(storeName) {\n    try {\n        if (!DB) {\n            // Check DB\n            DB = await dbPromise\n        }\n\n        return DB.getAll(storeName)\n    } catch (error) {\n        throw new Error(`Error getting data from indexedDB: ${error.message}`)\n    }\n}\n\n\nexport async function DBgetData(storeName, key) {\n    try {\n        if (!DB) {\n            // Check DB\n            DB = await dbPromise\n        }\n\n        return DB.get(storeName, key)\n    } catch (error) {\n        throw new Error(`Error getting data from indexedDB: ${error.message}`)\n    }\n}\n\n\nexport async function DBgetMultipleData(storeName, keys) {\n    try {\n        if (!DB) {\n            // Check DB\n            DB = await dbPromise\n        }\n\n        let results = await Promise.all(keys.map(key => DB.get(storeName, key))),\n            keyValueMap = {}\n\n        keys.forEach((key, index) => keyValueMap[key] = results[index])\n\n        return keyValueMap\n    } catch (error) {\n        throw new Error(`Error getting multiple data from indexedDB: ${error.message}`)\n    }\n}\n\n\nexport async function DBaddData(storeName, data) {\n    try {\n        if (!DB) {\n            // Check DB\n            DB = await dbPromise\n        }\n\n        let tx = DB.transaction(storeName, 'readwrite'),\n            store = tx.objectStore(storeName)\n\n        for (let [key, value] of data) {\n            await store.put(value, key)\n        }\n\n        await tx.done\n    } catch (error) {\n        throw new Error(`Error adding data to indexedDB: ${error.message}`)\n    }\n}\n\n\nexport async function DBdeleteData(storeName, keys) {\n    try {\n        if (!DB) {\n            // Check DB\n            DB = await dbPromise\n        }\n\n        let tx = DB.transaction(storeName, 'readwrite'),\n            store = tx.objectStore(storeName)\n\n        await Promise.all(keys.map(key => store.delete(key)))\n\n        return tx.done\n    } catch (error) {\n        throw new Error(`Error deleting data from indexedDB: ${error.message}`)\n    }\n}\n\n\nexport async function DBclearStore(storeName) {\n    try {\n        if (!DB) {\n            // Check DB\n            DB = await dbPromise\n        }\n\n        let tx = DB.transaction(storeName, 'readwrite'),\n            store = tx.objectStore(storeName)\n\n        await store.clear()\n        await tx.done\n    } catch (error) {\n        throw new Error(`Error clearing store in indexedDB: ${error.message}`)\n    }\n}\n\n\nexport async function DBclearAllData() {\n    try {\n        if (!DB) {\n            // Check DB\n            DB = await dbPromise\n        }\n\n        for (let storeName of DB.objectStoreNames) {\n            let tx = DB.transaction(storeName, 'readwrite'),\n                store = tx.objectStore(storeName)\n\n            await store.clear()\n            await tx.done\n        }\n    } catch (error) {\n        throw new Error(`Error clearing all data in indexedDB: ${error.message}`)\n    }\n}","import { DirectSecp256k1HdWallet } from '@cosmjs/proto-signing'\n\n\n// Generate wallet\nexport const generateWallet = async count => {\n    try {\n        return await DirectSecp256k1HdWallet.generate(count)\n    } catch (error) {\n        // Throw error\n        throw new Error(`generateWallet() failed: ${error.message}`)\n    }\n}\n\n\nexport default generateWallet","import { DirectSecp256k1HdWallet } from '@cosmjs/proto-signing'\nimport { stringToPath } from '@cosmjs/crypto'\nimport { useGlobalStore } from '@/store'\n\n\n// Import wallet from mnemonic\nexport const importWalletFromMnemonic = async (mnemonic, prefix = null, derivationPath = null) => {\n    const store = useGlobalStore(),\n        path = !derivationPath ? store.currentWalletDerivationPath : derivationPath\n\n    try {\n        return await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {\n            hdPaths: [stringToPath(path)],\n            prefix\n        })\n    } catch (error) {\n        // Throw error\n        throw new Error(`importWalletFromMnemonic() failed: ${error.message}`)\n    }\n}\n\n\nexport default importWalletFromMnemonic","import { DirectSecp256k1Wallet } from '@cosmjs/proto-signing'\nimport { fromHex } from '@cosmjs/encoding'\n\n\n// Import wallet from private key\nexport const importWalletFromPrivateKey = async (privateKey, prefix = null) => {\n    try {\n        return await DirectSecp256k1Wallet.fromKey(fromHex(privateKey), prefix)\n    } catch (error) {\n        // Throw error\n        throw new Error(`importWalletFromPrivateKey() failed: ${error.message}`)\n    }\n}\n\n\nexport default importWalletFromPrivateKey","// Hash data with key\nexport const hashDataWithKey = async (data, key) => {\n    const encoder = new TextEncoder(),\n        encodedData = encoder.encode(data)\n\n    try {\n        const cryptoKey = await crypto.subtle.importKey(\n            'jwk',\n            key,\n            {\n                name: 'HMAC',\n                hash: { name: 'SHA-256' }\n            },\n            false,\n            ['sign']\n        )\n\n        const signature = await crypto.subtle.sign('HMAC', cryptoKey, encodedData),\n            hashArray = Array.from(new Uint8Array(signature)),\n            hashHex = hashArray.map(byte => ('00' + byte.toString(16)).slice(-2)).join('')\n\n        return hashHex\n    } catch (error) {\n        // Throw error\n        throw new Error(`hashDataWithKey() failed: ${error.message}`)\n    }\n}\n\n\nexport default hashDataWithKey","// Generate AES key\nexport const generateAESKey = async () => {\n    try {\n        const key = await crypto.subtle.generateKey(\n            {\n                name: 'AES-GCM',\n                length: 256\n            },\n            true,\n            [\n                'encrypt',\n                'decrypt'\n            ]\n        )\n\n        return key\n    } catch (error) {\n        // Throw error\n        throw new Error(`generateAESKey() failed: ${error.message}`)\n    }\n}\n\n\nexport default generateAESKey","// Generate HMAC key\nexport const generateHMACKey = async () => {\n    try {\n        // Key params\n        const key = await crypto.subtle.generateKey(\n            {\n                name: 'HMAC',\n                hash: { name: 'SHA-256' },\n                length: 256\n            },\n            true,\n            ['sign']\n        )\n\n        // Export key in JWK (JSON Web Key) format\n        const exportedKey = await crypto.subtle.exportKey('jwk', key)\n\n        return exportedKey\n    } catch (error) {\n        // Throw error\n        throw new Error(`generateHMACKey() failed: ${error.message}`)\n    }\n}\n\n\nexport default generateHMACKey","// Encryption\nexport const encryptData = async (text, key) => {\n    const iv = crypto.getRandomValues(new Uint8Array(12)),\n        encoder = new TextEncoder(),\n        encodedText = encoder.encode(text)\n\n    try {\n        const ciphertext = await crypto.subtle.encrypt(\n            {\n                name: \"AES-GCM\",\n                iv: iv,\n            },\n            key,\n            encodedText\n        )\n\n        return {\n            ciphertext: new Uint8Array(ciphertext),\n            iv: iv\n        }\n    } catch (error) {\n        // Throw error\n        throw new Error(`encryptData() failed: ${error.message}`)\n    }\n}\n\n\nexport default encryptData","// Decryption\nexport const decryptData = async (ciphertext, iv, key) => {\n    try {\n        const decrypted = await crypto.subtle.decrypt(\n            {\n                name: 'AES-GCM',\n                iv: iv,\n            },\n            key,\n            ciphertext\n        )\n\n        const decoder = new TextDecoder()\n\n        return decoder.decode(decrypted)\n    } catch (error) {\n        // Throw error\n        throw new Error(`decryptData() failed: ${error.message}`)\n    }\n}\n\n\nexport default decryptData","import { useGlobalStore } from '@/store'\n\nimport { DBgetMultipleData } from '@/utils/db'\nimport { importWalletFromMnemonic } from './importWalletFromMnemonic'\nimport { importWalletFromPrivateKey } from './importWalletFromPrivateKey'\n\n\n// Get address\nexport const getAddress = async () => {\n    let store = useGlobalStore(),\n        wallet = null\n\n    try {\n        // Get from DB\n        let DBSecret = await DBgetMultipleData('secret', [\n            `wallet${store.currentWalletID}_secret`,\n            `wallet${store.currentWalletID}_privateKey`\n        ])\n\n        // Wallet\n        if (DBSecret[`wallet${store.currentWalletID}_secret`]) {\n            // Get secret from DB\n            const secret = await store.getSecret(true)\n\n            // Get wallet\n            wallet = await importWalletFromMnemonic(secret, store.networks[store.currentNetwork].prefix)\n        }\n\n        if (DBSecret[`wallet${store.currentWalletID}_privateKey`]) {\n            // Get secret from DB\n            const privateKey = await store.getPrivateKey(true)\n\n            // Get wallet\n            wallet = await importWalletFromPrivateKey(privateKey, store.networks[store.currentNetwork].prefix)\n        }\n\n        // Current address\n        const address = (await wallet.getAccounts())[0].address\n\n        return address\n    } catch (error) {\n        // Throw error\n        throw new Error(`getAddress() failed: ${error.message}`)\n    }\n}\n\n\nexport default getAddress","import { useGlobalStore } from '@/store'\nimport { SigningCosmWasmClient } from '@cosmjs/cosmwasm-stargate'\nimport { SigningStargateClient } from '@cosmjs/stargate'\n\nimport { DBgetMultipleData } from '@/utils/db'\nimport { importWalletFromMnemonic } from './importWalletFromMnemonic'\nimport { importWalletFromPrivateKey } from './importWalletFromPrivateKey'\n\n\n// Create singer\nexport const createSinger = async () => {\n    let store = useGlobalStore(),\n        wallet = null\n\n    try {\n        // Get from DB\n        let DBSecret = await DBgetMultipleData('secret', [\n            `wallet${store.currentWalletID}_secret`,\n            `wallet${store.currentWalletID}_privateKey`\n        ])\n\n        // Wallet\n        if (DBSecret[`wallet${store.currentWalletID}_secret`]) {\n            // Get secret from DB\n            let secret = await store.getSecret(true)\n\n            // Get wallet\n            wallet = await importWalletFromMnemonic(secret, store.networks[store.currentNetwork].prefix)\n        }\n\n        if (DBSecret[`wallet${store.currentWalletID}_privateKey`]) {\n            // Get secret from DB\n            let privateKey = await store.getPrivateKey(true)\n\n            // Get wallet\n            wallet = await importWalletFromPrivateKey(privateKey, store.networks[store.currentNetwork].prefix)\n        }\n\n        // Stargate client\n        let signingClient = await SigningStargateClient.connectWithSigner(store.networks[store.currentNetwork].rpc_api, wallet)\n\n        // Stargate Cosm wasm client\n        let signingCosmWasmClient = await SigningCosmWasmClient.connectWithSigner(store.networks[store.currentNetwork].rpc_api, wallet)\n\n        return { signingClient, signingCosmWasmClient }\n    } catch (error) {\n        // Throw error\n        error.message = `createSinger.js failed: ${error.message}`\n\n        throw error\n    }\n}\n\n\nexport default createSinger","import { useGlobalStore } from '@/store'\n\n\n// Denom traces\nexport const denomTraces = async (string) => {\n    let store = useGlobalStore(),\n        result = {\n            path: null,\n            base_denom: string\n        },\n        hash = string.split('/')\n\n\n    if (hash[0] == 'ibc') {\n        try {\n            // Request\n            await fetch(`${store.networks[store.currentNetwork].lcd_api}/ibc/apps/transfer/v1/denom_traces/${hash[1]}`)\n                .then(response => response.json())\n                .then(response => result = response.denom_trace)\n        } catch (error) {\n            // Throw error\n            throw new Error(`denomTraces() failed: ${error.message}`)\n        }\n    } else if (hash[0] == 'factory') {\n        result.ingnoreTraces = true\n        result.base_denom = hash[hash.length - 1]\n    }\n\n    return result\n}\n\n\nexport default denomTraces","// Format token amount\nexport const formatTokenAmount = (amount, exponent) => amount / Math.pow(10, exponent)\n\n\nexport default formatTokenAmount","import { useGlobalStore } from '@/store'\n\n\n// Format token cost\nexport const formatTokenCost = (cost, currency = null) => {\n    let store = useGlobalStore(),\n        currentCurrency = currency || store.currentCurrency\n\n    // Rounding\n    switch (currentCurrency) {\n        case 'BTC':\n            return cost > 0.0000000001 || cost == 0 ? cost.toLocaleString('ru-RU', { maximumFractionDigits: 10, minimumFractionDigits: 2 }).replace(',', '.') : '<0.0000000001'\n\n        case 'ETH':\n            return cost > 0.0000001 || cost == 0 ? cost.toLocaleString('ru-RU', { maximumFractionDigits: 7, minimumFractionDigits: 2 }).replace(',', '.') : '<0.0000001'\n\n        default:\n            return cost > 0.01 || cost == 0 ? cost.toLocaleString('ru-RU', { maximumFractionDigits: 2, minimumFractionDigits: 2 }).replace(',', '.') : '<0.01'\n    }\n}\n\n\nexport default formatTokenCost","import { useGlobalStore } from '@/store'\n\n\n// Format token name\nexport const formatTokenName = tokenName => {\n    let store = useGlobalStore(),\n        formatableToken = store.formatableTokens.find(el => el.token_name === tokenName),\n        formatTokenName = formatableToken ? formatableToken.format_token_name : tokenName\n\n    return formatTokenName\n}\n\n\nexport default formatTokenName","import { useGlobalStore } from '@/store'\n\n\n// Get price by denom\nexport const getPriceByDenom = denom => {\n    const store = useGlobalStore(),\n        price = store.prices.find(el => el.symbol.toLowerCase() === denom.toLowerCase())?.price || 0,\n        formatableToken = store.formatableTokens.find(el => el.token_name == denom),\n        formatPrice = formatableToken ? price * Math.pow(10, formatableToken.exponent) : price\n\n    return formatPrice\n}\n\n\nexport default getPriceByDenom","import { useGlobalStore } from '@/store'\nimport { formatTokenName } from './formatTokenName'\nimport { getPriceByDenom } from './getPriceByDenom'\n\n\n// Currency conversion\nexport const currencyConversion = (amount, denom, currency) => {\n    let store = useGlobalStore(),\n        currentCurrencyPrice = 1\n\n    currency\n        ? currentCurrencyPrice = store.prices.find(el => el.symbol.toLowerCase() === formatTokenName(currency).toLowerCase()).price\n        : currentCurrencyPrice = store.prices.find(el => el.symbol.toLowerCase() === formatTokenName(store.currentCurrency).toLowerCase()).price\n\n    return amount * (getPriceByDenom(denom) / currentCurrencyPrice)\n}\n\n\nexport default currencyConversion","import { formatTokenAmount } from './formatTokenAmount'\nimport { currencyConversion } from './currencyConversion'\n\n\n// Calc token cost in current cucrrency\nexport const calcTokenCost = (denom, amount, exponent, currency = null) => {\n    let formatAmount = formatTokenAmount(amount, exponent)\n\n    return currencyConversion(formatAmount, denom, currency)\n}\n\n\nexport default calcTokenCost","import { useGlobalStore } from '@/store'\nimport { calcTokenCost } from './calcTokenCost'\n\n\n// Calc balances cost in current cucrrency\nexport const calcBalancesCost = (currency = null) => {\n    let store = useGlobalStore(),\n        totalPrice = 0\n\n    // Calc total cost\n    if (store.balances.length) {\n        store.balances.forEach(balance => totalPrice += calcTokenCost(balance.token_info.symbol, balance.amount, balance.exponent, currency))\n    }\n\n    return parseFloat(totalPrice)\n}\n\n\nexport default calcBalancesCost","import { useGlobalStore } from '@/store'\nimport { calcTokenCost } from './calcTokenCost'\n\n\n// Calc Staked balances cost in current cucrrency\nexport const calcStakedBalancesCost = (currency = null) => {\n    let store = useGlobalStore(),\n        totalPrice = 0\n\n    // Calc total cost\n    if (store.stakedBalances.length) {\n        store.stakedBalances.forEach(el => totalPrice += calcTokenCost(el.balance.token_info.symbol, el.balance.amount, el.balance.exponent, currency))\n    }\n\n    return parseFloat(totalPrice)\n}\n\n\nexport default calcStakedBalancesCost","import { useGlobalStore } from '@/store'\nimport { calcTokenCost } from './calcTokenCost'\n\n\n// Calc rewards balances cost in current cucrrency\nexport const calcRewardsBalancesCost = (currency = null) => {\n    let store = useGlobalStore(),\n        totalPrice = 0\n\n    // Calc total cost\n    if (store.rewardsBalances.length) {\n        store.rewardsBalances.forEach(balance => totalPrice += calcTokenCost(balance.token_info.symbol, balance.amount, balance.exponent, currency))\n    }\n\n    return parseFloat(totalPrice)\n}\n\n\nexport default calcRewardsBalancesCost","import { useGlobalStore } from '@/store'\n\n\n// Calc stake available amount\nexport const calcAvailableAmount = () => {\n    let store = useGlobalStore(),\n        balance = store.balances.find(balance => balance.denom === store.networks[store.currentNetwork].denom)\n\n    return balance ? parseFloat(balance.amount) : 0\n}\n\n\nexport default calcAvailableAmount","import { useGlobalStore } from '@/store'\n\n\n// Calc staked amount\nexport const calcStakedAmount = () => {\n    let store = useGlobalStore(),\n        totalAmount = 0\n\n    // Calc total amount\n    if (store.stakedBalances.length) {\n        store.stakedBalances.forEach(item => totalAmount += parseFloat(item.balance.amount))\n    }\n\n    return totalAmount\n}\n\n\nexport default calcStakedAmount","import { useGlobalStore } from '@/store'\n\n\n// Calc unstaking amount\nexport const calcUnstakingAmount = () => {\n    let store = useGlobalStore(),\n        totalAmount = 0\n\n    // Calc total amount\n    if (store.unstakingBalances.length) {\n        store.unstakingBalances.forEach(item => {\n            item.entries.forEach(el => totalAmount += parseFloat(el.balance))\n        })\n    }\n\n    return totalAmount\n}\n\n\nexport default calcUnstakingAmount","import { useGlobalStore } from '@/store'\nimport { chains } from 'chain-registry'\n\n\n// Get metwork logo\nexport const getNetworkLogo = chainId => {\n    let store = useGlobalStore(),\n        logo = ''\n\n    if (chainId) {\n        let chain = Object.values(store.networks).find(el => el.chain_id === chainId)\n\n        if (chain !== undefined && chain.logo) {\n            logo = chain.logo\n        } else {\n            chain = chains.find(el => el.chain_id === chainId)\n\n            if (chain) {\n                if (chain.logo_URIs) {\n                    logo = chain.logo_URIs.svg || chain.logo_URIs.png\n                } else if (chain.images) {\n                    logo = chain.images[chain.images.length - 1].svg || chain.images[chain.images.length - 1].png\n                }\n            }\n        }\n    }\n\n    return logo\n}\n\n\nexport default getNetworkLogo","import { useGlobalStore } from '@/store'\nimport { createSinger } from './createSinger'\n\n\n// Simulate Tx\nexport const simulateTx = async (msg, memo = '') => {\n    try {\n        const store = useGlobalStore(),\n            { signingCosmWasmClient } = await createSinger()\n\n        // Simulate gas\n        const gasUsed = await signingCosmWasmClient.simulate(store.currentAddress, msg, memo)\n\n        // Set gas amount\n        store.TxFee.gasAmount = parseInt(gasUsed * store.networks[store.currentNetwork].gas_adjustment)\n\n        // Set user gas amount\n        store.TxFee.userGasAmount = store.TxFee.gasAmount\n    } catch (error) {\n        // Throw error\n        throw new Error(`simulateTx() failed: ${error.message}`)\n    }\n}\n\n\nexport default simulateTx","import { useGlobalStore } from '@/store'\nimport { TxRaw } from 'cosmjs-types/cosmos/tx/v1beta1/tx'\nimport { sha256 } from '@cosmjs/crypto'\n\nimport { createSinger } from './createSinger'\n\n\n// Sign Tx\nexport const signTx = async (msg, memo) => {\n    try {\n        const store = useGlobalStore(),\n            { signingCosmWasmClient } = await createSinger()\n\n        // Fee\n        const fee = {\n            amount: [{\n                denom: store.networks[store.currentNetwork].denom,\n                amount: parseInt(store.TxFee.userGasAmount * store.TxFee[`${store.TxFee.currentLevel}Price`]).toString()\n            }],\n            gas: store.TxFee.userGasAmount.toString()\n        }\n\n        // Sign\n        const txRaw = await signingCosmWasmClient.sign(store.currentAddress, msg, fee, memo)\n\n        // Encode TxRaw\n        const txBytes = TxRaw.encode(txRaw).finish()\n\n        // Hash transaction bytes\n        const txHash = sha256(txBytes)\n\n        // Convert hash bytes to hex string\n        store.networks[store.currentNetwork].currentTxHash = Buffer.from(txHash).toString('hex')\n\n        return txBytes\n    } catch (error) {\n        // Throw error\n        throw new Error(`signTx() failed: ${error.message}`)\n    }\n}\n\n\nexport default signTx","import { createSinger } from './createSinger'\n\n\n// Send Tx\nexport const sendTx = async txBytes => {\n    let { signingCosmWasmClient } = await createSinger()\n\n    try {\n        // Broadcast\n        await signingCosmWasmClient.broadcastTx(txBytes, signingCosmWasmClient.broadcastTimeoutMs, signingCosmWasmClient.broadcastPollIntervalMs)\n    } catch (error) {\n        // Throw error\n        throw new Error(`sendTx() failed: ${error.message}`)\n    }\n}\n\n\nexport default sendTx","import { useGlobalStore } from '@/store'\n\n\n// Get explorer link\nexport const getExplorerLink = (network) => {\n    const store = useGlobalStore()\n\n    return (store.networks[network].explorer_link).replace('{tx_hash}', store.networks[network].currentTxHash)\n}\n\n\nexport default getExplorerLink","// Image load error\nexport const imageLoadError = e => e.target.classList.add('hide')\n\n\nexport default imageLoadError","// Image load error\nexport const imageLoadSuccess = e => e.target.classList.remove('hide')\n\n\nexport default imageLoadSuccess","// Date calc\nexport const dateCalc = date => {\n    let currentDate = new Date(date),\n        userTimeZone = new Date().getTimezoneOffset() / 60 * -1\n\n    return new Date(currentDate.setHours(currentDate.getHours() + userTimeZone))\n}\n\n\nexport default dateCalc","import { fromBech32, toBech32 } from '@cosmjs/encoding'\n\n\n// Convert address\nexport const convertAddress = (address, prefix) => {\n    // Decoding the address in Bech32\n    const { data } = fromBech32(address)\n\n    // Encode the address with a new prefix\n    return toBech32(prefix, data)\n}\n\n\nexport default convertAddress","import { inject, watch, computed } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { useGlobalStore } from '@/store'\n\n\n// Redirect to send\nasync function redirectToSend(parsedData) {\n    try {\n        const store = useGlobalStore(),\n            router = useRouter()\n\n        // Change network\n        if (store.currentNetwork !== parsedData[1]) {\n            // Redirect\n            router.push({ path: '/account' })\n\n            // Set new current network\n            await store.setCurrentNetwork(parsedData[1])\n\n            // Wait isInitialized\n            const stopWatch = watch(computed(() => store.isInitialized), () => {\n                if (store.isInitialized && parsedData[0] === 'send') {\n                    // Stop watch\n                    stopWatch()\n\n                    // Redirect to send page\n                    router.push({\n                        path: '/account/send',\n                        query: {\n                            denom: store.networks[store.currentNetwork].denom,\n                            address: parsedData[2],\n                            amount: parsedData[3]\n                        }\n                    })\n                }\n            })\n        } else {\n            // Redirect to send\n            if (parsedData[0] === 'send') {\n                router.push({\n                    path: '/account/send',\n                    query: {\n                        denom: store.networks[store.currentNetwork].denom,\n                        address: parsedData[2],\n                        amount: parsedData[3]\n                    }\n                })\n            }\n        }\n    } catch (error) {\n        throw new Error(`Error redirecting to sending page: ${error.message}`)\n    }\n}\n\n\n// Telegram WebApp init\nexport const tgInit = async () => {\n    try {\n        const store = useGlobalStore(),\n            i18n = inject('i18n')\n\n        if (window.Telegram && window.Telegram.WebApp) {\n            // Initialize the mini-application\n            await Telegram.WebApp.ready()\n\n            // Call the expand method to open to full height\n            Telegram.WebApp.expand()\n\n            // Set header color\n            Telegram.WebApp.setHeaderColor('#5b3895')\n\n            // Show progress\n            Telegram.WebApp.MainButton.showProgress(true)\n\n            // Disable vertical swipes\n            Telegram.WebApp.disableVerticalSwipes()\n\n            // Init biometric\n            Telegram.WebApp.BiometricManager.init()\n\n            // Age modal\n            await store.getAgeConfirmed()\n\n            if (!store.isAgeConfirmed) {\n                Telegram.WebApp.showConfirm(i18n.global.t('message.age_modal_text'), async result => {\n                    result\n                        ? await store.setAgeConfirmed() // Approve age\n                        : Telegram.WebApp.close() // Reject age\n                })\n            }\n\n            // Qr code received\n            Telegram.WebApp.onEvent('qrTextReceived', async data => {\n                // Close QR popup\n                Telegram.WebApp.closeScanQrPopup()\n\n                // Parse data\n                const parsedData = data.data.split('|')\n\n                // Redirect to send\n                await redirectToSend(parsedData)\n            })\n        }\n    } catch (error) {\n        throw new Error(`Error TG initializating: ${error.message}`)\n    }\n}\n\n\nexport default tgInit","<template>\n    <!-- Loader wrap -->\n    <div class=\"loader_wrap\">\n        <!-- Loader -->\n        <div class=\"loader\"><span></span></div>\n    </div>\n</template>","import { render } from \"./Loader.vue?vue&type=template&id=ba5ac374\"\nconst script = {}\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.amdO = {};","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"js/\" + chunkId + \".\" + {\"17\":\"3e737b7e\",\"90\":\"f9dd5b35\",\"130\":\"5f6f1db3\",\"135\":\"e172a50f\",\"148\":\"0448ec94\",\"183\":\"955d644a\",\"220\":\"a3279f6e\",\"292\":\"aa980f9e\",\"398\":\"fd2f67ba\",\"411\":\"a4f875e7\",\"437\":\"5b00e003\",\"438\":\"2cbdb74f\",\"449\":\"5468faae\",\"491\":\"5dffb90a\",\"517\":\"08fdc509\",\"547\":\"671b67f3\",\"554\":\"ae9cddb9\",\"595\":\"8b7b8f8b\",\"660\":\"6d5bf69c\",\"912\":\"1e63ebc6\",\"947\":\"2cada149\",\"963\":\"f6d29b52\"}[chunkId] + \".js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"css/\" + chunkId + \".\" + {\"17\":\"ec4572a2\",\"90\":\"f25427e5\",\"130\":\"cd600836\",\"135\":\"b62c6c90\",\"183\":\"e48d7ed6\",\"220\":\"05b2b883\",\"292\":\"47217a46\",\"398\":\"33291bab\",\"411\":\"e48d7ed6\",\"437\":\"39628ca6\",\"438\":\"96dd1d4d\",\"449\":\"da5bad8f\",\"491\":\"47217a46\",\"517\":\"2e03157b\",\"554\":\"1a96517f\",\"595\":\"18aa5b49\",\"660\":\"7a1bd2c2\",\"912\":\"8c0cbd87\",\"963\":\"f25427e5\"}[chunkId] + \".css\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var inProgress = {};\nvar dataWebpackPrefix = \"cosmos-telegram-signer:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = function(url, done, key, chunkId) {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = function(prev, event) {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach(function(fn) { return fn(event); });\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/\";","if (typeof document === \"undefined\") return;\nvar createStylesheet = function(chunkId, fullhref, oldTag, resolve, reject) {\n\tvar linkTag = document.createElement(\"link\");\n\n\tlinkTag.rel = \"stylesheet\";\n\tlinkTag.type = \"text/css\";\n\tif (__webpack_require__.nc) {\n\t\tlinkTag.nonce = __webpack_require__.nc;\n\t}\n\tvar onLinkComplete = function(event) {\n\t\t// avoid mem leaks.\n\t\tlinkTag.onerror = linkTag.onload = null;\n\t\tif (event.type === 'load') {\n\t\t\tresolve();\n\t\t} else {\n\t\t\tvar errorType = event && event.type;\n\t\t\tvar realHref = event && event.target && event.target.href || fullhref;\n\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + errorType + \": \" + realHref + \")\");\n\t\t\terr.name = \"ChunkLoadError\";\n\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n\t\t\terr.type = errorType;\n\t\t\terr.request = realHref;\n\t\t\tif (linkTag.parentNode) linkTag.parentNode.removeChild(linkTag)\n\t\t\treject(err);\n\t\t}\n\t}\n\tlinkTag.onerror = linkTag.onload = onLinkComplete;\n\tlinkTag.href = fullhref;\n\n\n\tif (oldTag) {\n\t\toldTag.parentNode.insertBefore(linkTag, oldTag.nextSibling);\n\t} else {\n\t\tdocument.head.appendChild(linkTag);\n\t}\n\treturn linkTag;\n};\nvar findStylesheet = function(href, fullhref) {\n\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n\tfor(var i = 0; i < existingLinkTags.length; i++) {\n\t\tvar tag = existingLinkTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return tag;\n\t}\n\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n\tfor(var i = 0; i < existingStyleTags.length; i++) {\n\t\tvar tag = existingStyleTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\");\n\t\tif(dataHref === href || dataHref === fullhref) return tag;\n\t}\n};\nvar loadStylesheet = function(chunkId) {\n\treturn new Promise(function(resolve, reject) {\n\t\tvar href = __webpack_require__.miniCssF(chunkId);\n\t\tvar fullhref = __webpack_require__.p + href;\n\t\tif(findStylesheet(href, fullhref)) return resolve();\n\t\tcreateStylesheet(chunkId, fullhref, null, resolve, reject);\n\t});\n}\n// object to store loaded CSS chunks\nvar installedCssChunks = {\n\t524: 0\n};\n\n__webpack_require__.f.miniCss = function(chunkId, promises) {\n\tvar cssChunks = {\"17\":1,\"90\":1,\"130\":1,\"135\":1,\"183\":1,\"220\":1,\"292\":1,\"398\":1,\"411\":1,\"437\":1,\"438\":1,\"449\":1,\"491\":1,\"517\":1,\"554\":1,\"595\":1,\"660\":1,\"912\":1,\"963\":1};\n\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n\t\tpromises.push(installedCssChunks[chunkId] = loadStylesheet(chunkId).then(function() {\n\t\t\tinstalledCssChunks[chunkId] = 0;\n\t\t}, function(e) {\n\t\t\tdelete installedCssChunks[chunkId];\n\t\t\tthrow e;\n\t\t}));\n\t}\n};\n\n// no hmr\n\n// no prefetching\n\n// no preloaded","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n__webpack_require__.f.j = function(chunkId, promises) {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise(function(resolve, reject) { installedChunkData = installedChunks[chunkId] = [resolve, reject]; });\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = function(event) {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkcosmos_telegram_signer\"] = self[\"webpackChunkcosmos_telegram_signer\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(74554); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["en","message","i18n","createI18n","locale","fallbackLocale","messages","VueI18nMessages","store","useGlobalStore","inject","route","useRoute","emitter","layout","computed","meta","title","useTitle","isReseting","ref","network","reactive","useNetwork","notification","useNotification","notificationTimeout","notificationAnimation","enter","translateY","leave","notificationsOnStart","params","data","isCollapsible","value","setTimeout","document","querySelector","classList","add","notificationsCollapsingDelay","notificationsOnDestroy","onBeforeMount","async","global","t","tgInit","error","console","watch","currentWalletID","newValue","oldValue","DBWallets","DBgetData","undefined","notify","group","clean","initApp","currentNetwork","isInitialized","forcedUnlock","isOnline","speed","duration","type","on","remove","__exports__","startY","isPulling","threshold","handleTouchStart","e","window","scrollY","handleTouchMove","currentY","touches","pageY","distance","preventDefault","stopPropagation","isAnyModalOpen","emit","handleTouchEnd","onMounted","addEventListener","passive","onUnmounted","removeEventListener","hasUpdated","networks","currentTxHash","account","updateAllBalances","routes","path","name","component","defaultLayout","accessDenied","accountLayout","router","createRouter","history","createWebHistory","beforeResolve","to","from","next","DBData","DBgetMultipleData","authTimestamp","Date","authTime","isAuthorized","auth","matched","some","record","access","length","includes","isRegister","isUserLock","userLockTimestamp","userLockTime","afterEach","_paq","push","location","href","event","Event","dispatchEvent","vFocus","mounted","el","focus","vParallax","offsetHeight","style","opacity","transform","vOdometer","number","numberArr","toFixed","split","innerHTML","map","char","join","updated","oldNumberArr","maxLength","Math","max","html","mismatchIndex","mismatchCount","animationDuration","animationDelay","concat","Array","fill","i","parseFloat","mitt","app","createApp","App","pinia","createPinia","use","Notifications","velocity","VueMatomo","host","siteId","provide","directive","register","VueCountdown","mount","lcd_api","rpc_api","websocket_url","denom","token_name","chain_id","prefix","explorer_link","alias","exponent","gas_adjustment","address_length","gas_amount_send","gas_amount_claim","gas_amount_stake","gas_amount_unstake","gas_amount_redelegate","is_staking_available","logo","networksAdditionalOptions","websocket","unbondingTime","totalBondedTokens","totalUnstakingTokens","isUnstakingCancelSupport","defineStore","state","isInitializing","isBalancesGot","isStakedBalancesGot","isRewardsGot","isUnstakingBalancesGot","isAgeConfirmed","defaultDerivationPath","tempDerivationPath","authErrorLimit","confirmSeedsErrorLimit","DBVersion","currentWalletDerivationPath","currentWalletName","currentAddress","currentCurrency","currentCurrencySymbol","IBCSendCurrentChain","stakeCurrentValidator","unstakeCurrentValidator","redelegateValidatorFrom","redelegateValidatorTo","wallets","prices","balances","stakedBalances","rewardsBalances","unstakingBalances","redelegations","defaultWalletName","cacheTime","TxFee","balance","currentLevel","userGasAmount","gasAmount","isRemember","isGasAdjustmentAuto","isEnough","cosmoshub","Object","assign","osmosis","bostrom","dymension","gravitybridge","neutron","omniflixhub","pion","stride","formatableTokens","format_token_name","actions","getCurrentDBVersion","DBCurrentVersion","localStorage","getItem","this","setItem","setNewDBVersion","getCurrentWalletID","DBCurrentWalletID","Error","setCurrentWalletID","walletID","DBaddData","Promise","all","updateUserAuthErrorLimit","toISOString","derivationPath","TxFeeCurrentLevel","TxFeeIsRemember","cacheCurrentAddress","address","getAddress","getCurrenciesPrice","getCurrentNetworkAPR","connectWebsocket","getBalances","getStakedBalances","cachePrices","timestamp","response","fetch","ok","status","json","cacheAPR","chain","infos","find","toLowerCase","APR","apr","JSON","parse","stringify","forceUpdate","cacheBalances","getBalanceInfo","filter","obj","hasOwnProperty","cacheStakedBalances","delegation_responses","amount","item","getValidatorInfo","delegation","validator_address","getRewards","total","chain_info","getUnstakingBalances","unbonding_responses","entries","forEach","entry","parseInt","getRedelegations","redelegation_responses","base_denom","denomTraces","old_base_denom","asset","assets","currentAsset","chain_name","tokenInfo","token","base","token_info","formatableToken","toUpperCase","denom_units","chains","price","getPriceByDenom","symbol","hasNativeToken","validator_info","validator","getSecret","current","DBSecret","DBSecretPartTwo","restoredSecret","sss","restoredUint8Array","Uint8Array","decryptData","getPrivateKey","findMissingId","missingId","ids","id","findNextAvailableWalletName","setSecret","secret","aesKey","generateAESKey","ciphertext","iv","encryptData","shares","Buffer","DBcheckStoreName","setPrivateKey","privateKey","setCurrentNetwork","createWallet","pinCode","walletName","isBiometricEnabled","isAdding","relativeWallet","availableWalletName","hmacKey","generateHMACKey","hashDataWithKey","createFromExistWallet","currentWalletSecret","subWallets","newWalletID","replace","getCurrentWalletCreatedBy","limit","updateTxFeeInfo","updateCurrentCurrency","values","onopen","onmessage","close","WebSocket","send","jsonrpc","method","query","parsedMsg","msg","result","keys","resetTxFee","checkTxResult","TxFeeGetCurrentBalance","baseDenom","TxFeeSetGasPrices","lowPrice","fees","fee_tokens","fixed_min_gas_price","low_gas_price","averagePrice","highPrice","TxFeeIsEnough","setListenerCurrentTx","getTxInfo","txHash","then","res","txResult","code","tx_response","getExplorerLink","errorText","text","promises","getNetworkUnbondingTime","unbonding_time","getAllValidators","validators","getUserValidators","getTotalBondedTokens","pool","bonded_tokens","cacheIsUnstakingCancelSupport","cosmos_sdk_version","application_version","min_version","cosmos_sdk_version_parsed","Number","min_version_parsed","getWallets","updateWallet","wallet","new_name","currentWallet","removeWallet","DBclearStore","DBdeleteData","setAgeConfirmed","getAgeConfirmed","DBAgeConfirmed","setUserLock","setUserUnlock","setUserChannel","channel","userChannels","updateUserChannel","oldChannel","info","pretty_name","old","channel_id","getAllUserChannels","deleteUserChannel","chainName","clearAllData","DBclearAllData","$reset","DB","getStore","dbPromise","isFirstRun","deleteDB","openDB","upgrade","db","objectStoreNames","contains","createObjectStore","storeName","key","get","results","keyValueMap","index","tx","transaction","objectStore","put","done","delete","clear","generateWallet","DirectSecp256k1HdWallet","generate","count","importWalletFromMnemonic","mnemonic","fromMnemonic","hdPaths","stringToPath","importWalletFromPrivateKey","DirectSecp256k1Wallet","fromKey","fromHex","encoder","TextEncoder","encodedData","encode","cryptoKey","crypto","subtle","importKey","hash","signature","sign","hashArray","hashHex","byte","toString","slice","generateKey","exportedKey","exportKey","getRandomValues","encodedText","encrypt","decrypted","decrypt","decoder","TextDecoder","decode","getAccounts","createSinger","signingClient","SigningStargateClient","connectWithSigner","signingCosmWasmClient","SigningCosmWasmClient","string","denom_trace","ingnoreTraces","formatTokenAmount","pow","formatTokenCost","cost","currency","toLocaleString","maximumFractionDigits","minimumFractionDigits","formatTokenName","tokenName","formatPrice","currencyConversion","currentCurrencyPrice","calcTokenCost","formatAmount","calcBalancesCost","totalPrice","calcStakedBalancesCost","calcRewardsBalancesCost","calcAvailableAmount","calcStakedAmount","totalAmount","calcUnstakingAmount","getNetworkLogo","chainId","logo_URIs","svg","png","images","simulateTx","memo","gasUsed","simulate","signTx","fee","gas","txRaw","txBytes","TxRaw","finish","sha256","sendTx","broadcastTx","broadcastTimeoutMs","broadcastPollIntervalMs","imageLoadError","target","imageLoadSuccess","dateCalc","date","currentDate","userTimeZone","getTimezoneOffset","setHours","getHours","convertAddress","fromBech32","toBech32","redirectToSend","parsedData","useRouter","stopWatch","Telegram","WebApp","ready","expand","setHeaderColor","MainButton","showProgress","disableVerticalSwipes","BiometricManager","init","showConfirm","onEvent","closeScanQrPopup","class","_createElementBlock","_hoisted_1","_cache","_createElementVNode","script","render","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","call","m","amdO","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","f","chunkId","reduce","u","miniCssF","g","globalThis","Function","prop","prototype","inProgress","dataWebpackPrefix","l","url","needAttach","scripts","getElementsByTagName","s","getAttribute","createElement","charset","timeout","nc","setAttribute","src","onScriptComplete","prev","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","bind","head","appendChild","Symbol","toStringTag","nmd","paths","children","p","createStylesheet","fullhref","oldTag","resolve","reject","linkTag","rel","nonce","onLinkComplete","errorType","realHref","err","request","insertBefore","nextSibling","findStylesheet","existingLinkTags","tag","dataHref","existingStyleTags","loadStylesheet","installedCssChunks","miniCss","cssChunks","installedChunks","installedChunkData","promise","loadingEnded","realSrc","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","self","__webpack_exports__"],"sourceRoot":""}