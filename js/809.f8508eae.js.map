{"version":3,"file":"js/809.f8508eae.js","mappings":"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","sources":["webpack://cosmos-telegram-signer/./src/components/Auth.vue","webpack://cosmos-telegram-signer/./src/components/Auth.vue?4730","webpack://cosmos-telegram-signer/./src/components/Loader.vue","webpack://cosmos-telegram-signer/./src/components/Loader.vue?b8fd","webpack://cosmos-telegram-signer/./src/components/modal/TxFeeModal.vue","webpack://cosmos-telegram-signer/./src/components/modal/TxFeeModal.vue?d9a7","webpack://cosmos-telegram-signer/./src/components/TxFee.vue","webpack://cosmos-telegram-signer/./src/components/TxFee.vue?c08d","webpack://cosmos-telegram-signer/./src/components/modal/SignTxModal.vue","webpack://cosmos-telegram-signer/./src/components/modal/SignTxModal.vue?9766"],"sourcesContent":["<template>\n    <!-- Pin code -->\n    <div class=\"pin\">\n        <!-- Pin code label -->\n        <div class=\"field_label\">\n            {{ $t('message.auth_enter_pin_label') }}\n        </div>\n\n        <div class=\"row\" :class=\"{ error: wrongPin }\">\n            <!-- Pin code field -->\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[0]\" maxlength=\"1\" inputmode=\"numeric\" ref=\"inputRef\"\n                    :class=\"{ active: pinCode[0].length }\"\n                    @input=\"moveFocus($event, 1)\"\n                    @keydown.backspace=\"moveBack($event, 0)\">\n            </div>\n\n            <!-- Pin code field -->\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[1]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[0].length\"\n                    :class=\"{ active: pinCode[1].length }\"\n                    @input=\"moveFocus($event, 2)\"\n                    @keydown.backspace=\"moveBack($event, 1)\">\n            </div>\n\n            <!-- Pin code field -->\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[2]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[1].length\"\n                    :class=\"{ active: pinCode[2].length }\"\n                    @input=\"moveFocus($event, 3)\"\n                    @keydown.backspace=\"moveBack($event, 2)\">\n            </div>\n\n            <!-- Pin code field -->\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[3]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[2].length\"\n                    :class=\"{ active: pinCode[3].length }\"\n                    @input=\"moveFocus($event, 4)\"\n                    @keydown.backspace=\"moveBack($event, 3)\">\n            </div>\n\n            <!-- Pin code field -->\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[4]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[3].length\"\n                    :class=\"{ active: pinCode[4].length }\"\n                    @input=\"moveFocus($event, 5)\"\n                    @keydown.backspace=\"moveBack($event, 4)\">\n            </div>\n\n            <!-- Pin code field -->\n            <div class=\"field\">\n                <input type=\"password\" class=\"input big\" v-model=\"pinCode[5]\" maxlength=\"1\" inputmode=\"numeric\" :disabled=\"!pinCode[4].length\"\n                    :class=\"{ active: pinCode[5].length }\"\n                    @input=\"moveFocus($event, 6)\"\n                    @keydown.backspace=\"moveBack($event, 5)\">\n            </div>\n        </div>\n\n        <!-- Pin warning text -->\n        <div class=\"warning\" v-if=\"userAuthErrorLimit < store.authErrorLimit\">\n            {{ $t('message.auth_error_warning', { count: userAuthErrorLimit }) }}\n        </div>\n    </div>\n\n\n    <!-- Biometric button -->\n    <button class=\"biometric_btn\" @click.prevent=\"checkBiometricAccess\" v-if=\"isBiometricAvailable && userAuthErrorLimit == store.authErrorLimit\">\n        <!-- Biometric button text -->\n        <span>{{ $t('message.btn_biometric2') }}</span>\n\n        <!-- Biometric button icon -->\n        <svg class=\"icon\" v-if=\"biometrictype === 'face'\">\n            <use xlink:href=\"@/assets/sprite.svg#ic_biometric_face\"></use>\n        </svg>\n\n        <!-- Biometric button icon -->\n        <svg class=\"icon\" v-else>\n            <use xlink:href=\"@/assets/sprite.svg#ic_biometric_finger\"></use>\n        </svg>\n    </button>\n\n\n    <!-- Buttons -->\n    <div class=\"btns\">\n        <!-- Login button -->\n        <button class=\"btn\" :class=\"{ disabled: !isFormValid }\" @click.prevent=\"login()\" v-if=\"userAuthErrorLimit < store.authErrorLimit\">\n            <span v-if=\"store.isAuthorized\">{{ $t('message.btn_sign') }}</span>\n            <span v-else>{{ $t('message.btn_login') }}</span>\n        </button>\n    </div>\n</template>\n\n\n<script setup>\n    import { onBeforeMount, ref, watch, computed, inject } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { hashDataWithKey } from '@/utils'\n\n\n    const store = useGlobalStore(),\n        emitter = inject('emitter'),\n        pinCode = ref(['', '', '', '', '', '']),\n        pinDB = ref(''),\n        hmacKey = ref(''),\n        wrongPin = ref(false),\n        userAuthErrorLimit = ref(store.authErrorLimit),\n        isBiometric = ref(false),\n        isBiometricAvailable = ref(false),\n        biometricType = ref('finger')\n\n\n    onBeforeMount(async () => {\n        // Get data from DB\n        let result = await store.getMultipleData(['pin', 'hmacKey', 'authErrorLimit', 'isBiometric'])\n\n        // Set pin from DB\n        pinDB.value = result.pin\n\n        // Set hmacKey from DB\n        hmacKey.value = result.hmacKey\n\n        // Set user auth error limit\n        userAuthErrorLimit.value = result.authErrorLimit\n\n        // Set biometric status from DB\n        isBiometric.value = result.isBiometric\n\n        // Is biometric available\n        isBiometricAvailable.value = Telegram.WebApp.BiometricManager.isBiometricAvailable\n\n        // Biometric type\n        if (Telegram.WebApp.BiometricManager.biometricType != 'unknown') {\n            biometricType.value = Telegram.WebApp.BiometricManager.biometricType\n        }\n\n        // Check biometric access\n        if (isBiometricAvailable.value && isBiometric.value) {\n            checkBiometricAccess()\n        }\n    })\n\n\n    watch(pinCode.value, () => {\n        // Reset focus\n        if (pinCode.value[5].length) {\n            document.activeElement.blur()\n        }\n\n        // Compare pins\n        if (pinCode.value[5].length && userAuthErrorLimit.value === store.authErrorLimit) {\n            login()\n        }\n    })\n\n\n    // Move focus\n    function moveFocus(event, nextIndex) {\n        if (event.target.value.length >= 1 && nextIndex < 6) {\n            event.target.closest('.row').querySelector(`.field:nth-child(${nextIndex + 1}) input`).focus()\n        }\n    }\n\n\n    // Move back\n    function moveBack(event, currentIndex) {\n        setTimeout(() => {\n            if (event.target.value.length === 0 && currentIndex > 0) {\n                event.target.closest('.row').querySelector(`.field:nth-child(${currentIndex}) input`).select()\n            }\n        })\n    }\n\n\n    // Check biometric access\n    function checkBiometricAccess() {\n        !Telegram.WebApp.isAccessGranted\n            ? Telegram.WebApp.BiometricManager.requestAccess({ reason: '' }, () => biometricAuthenticate())\n            : biometricAuthenticate()\n    }\n\n\n    // Biometric authenticate\n    function biometricAuthenticate() {\n        Telegram.WebApp.BiometricManager.authenticate({ reason: '' }, res => {\n            if (res) {\n                // Set event auth\n                emitter.emit('auth')\n            }\n        })\n    }\n\n\n    // Login\n    async function login() {\n        // Compare pins\n        let compareResult = await comparePINCode()\n\n        if (compareResult) {\n            // Update limit\n            userAuthErrorLimit.value = store.authErrorLimit\n\n            // Set event auth\n            emitter.emit('auth')\n        } else {\n            // Set auth error\n            await setAuthError()\n        }\n    }\n\n\n    // Compare pin code\n    async function comparePINCode() {\n        // Encrypt the PIN\n        let pinHash = await hashDataWithKey(pinCode.value.join(''), hmacKey.value)\n\n        return pinHash === pinDB.value\n    }\n\n\n    // Set auth error\n    async function setAuthError() {\n        // Set error\n        wrongPin.value = true\n\n        let newLimit = userAuthErrorLimit.value - 1\n\n        // Update limit\n        userAuthErrorLimit.value = newLimit\n\n        if (!store.isAuthorized) {\n            newLimit\n                // Сhange auth limit\n                ? store.updateUserAuthErrorLimit(newLimit)\n                // Set event show_error_auth_modal\n                : emitter.emit('show_error_auth_modal')\n        } else {\n            if (!newLimit) {\n                // Set event show_error_sign_tx_modal\n                emitter.emit('show_error_sign_tx_modal')\n            }\n        }\n\n        // Clear data\n        pinCode.value = ['', '', '', '', '', '']\n\n        // Reset data\n        wrongPin.value = false\n    }\n\n\n    // Validate form\n    const isFormValid = computed(() => pinCode.value[5].length != '')\n</script>\n\n\n<style scoped>\n    .pin\n    {\n        position: relative;\n\n        margin-top: 8px;\n    }\n\n\n    .pin .row\n    {\n        flex-wrap: nowrap;\n    }\n\n\n    .pin .row > *\n    {\n        width: 100%;\n    }\n\n\n    .pin .row > * + *\n    {\n        margin-left: 10px;\n    }\n\n\n    .pin .input\n    {\n        font-size: 20px;\n\n        text-align: center;\n    }\n\n\n    .pin .error .input\n    {\n        border-color: #f00;\n    }\n\n    .pin .success .input\n    {\n        border-color: #00aa63;\n    }\n\n\n    .pin .warning\n    {\n        font-size: 12px;\n\n        position: absolute;\n        top: 100%;\n        left: 0;\n\n        width: 100%;\n        margin-top: 4px;\n\n        text-align: center;\n\n        color: #ff4b4b;\n    }\n\n\n\n    .biometric_btn\n    {\n        font-size: 18px;\n        font-weight: 500;\n\n        display: block;\n\n        margin: auto;\n    }\n\n\n    .biometric_btn.top\n    {\n        margin-top: 40px;\n    }\n\n\n    .biometric_btn .icon\n    {\n        display: block;\n\n        width: 44px;\n        height: 44px;\n        margin: 0 auto;\n    }\n\n\n    .biometric_btn.disabled\n    {\n        pointer-events: none;\n\n        opacity: .6;\n    }\n</style>","import script from \"./Auth.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Auth.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Auth.vue?vue&type=style&index=0&id=4cace600&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-4cace600\"]])\n\nexport default __exports__","<template>\n    <!-- Loader wrap -->\n    <div class=\"loader_wrap\">\n        <!-- Loader -->\n        <div class=\"loader\"><span></span></div>\n    </div>\n</template>\n\n\n<style>\n    .loader_wrap\n    {\n        position: absolute;\n        z-index: 7;\n        top: 0;\n        left: 0;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 100%;\n        height: 100%;\n\n        border-radius: inherit;\n        background: rgba(0, 0, 0, .5);\n    }\n\n\n    .loader\n    {\n        position: relative;\n\n        width: 32px;\n        height: 32px;\n        margin: 0 auto;\n    }\n\n\n    .loader span\n    {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n\n        display: block;\n\n        width: 100%;\n        height: 100%;\n        margin: auto;\n    }\n\n    .loader span::before,\n    .loader span::after\n    {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n\n        display: block;\n\n        width: 100%;\n        height: 100%;\n        margin: auto;\n\n        content: '';\n        animation: loader-1 1.5s cubic-bezier(.075, .820, .165, 1.000) infinite;\n\n        opacity: 0;\n        border: 2px solid #fff;\n        border-radius: 50%;\n    }\n\n    .loader span::after\n    {\n        animation: loader-2 1.5s cubic-bezier(.075, .820, .165, 1.000) .25s infinite;\n    }\n\n\n    @-webkit-keyframes loader-1\n    {\n        0%\n        {\n            -webkit-transform: translate3d(0, 0, 0) scale(0);\n\n            opacity: 1;\n        }\n\n        100%\n        {\n            -webkit-transform: translate3d(0, 0, 0) scale(1.5);\n\n            opacity: 0;\n        }\n    }\n\n    @keyframes loader-1\n    {\n        0%\n        {\n            transform: translate3d(0, 0, 0) scale(0);\n\n            opacity: 1;\n        }\n\n        100%\n        {\n            transform: translate3d(0, 0, 0) scale(1.5);\n\n            opacity: 0;\n        }\n    }\n\n\n    @-webkit-keyframes loader-2\n    {\n        0%\n        {\n            -webkit-transform: translate3d(0, 0, 0) scale(0);\n\n            opacity: 1;\n        }\n\n        100%\n        {\n            -webkit-transform: translate3d(0, 0, 0) scale(1);\n\n            opacity: 0;\n        }\n    }\n\n    @keyframes loader-2\n    {\n        0%\n        {\n            transform: translate3d(0, 0, 0) scale(0);\n\n            opacity: 1;\n        }\n\n        100%\n        {\n            transform: translate3d(0, 0, 0) scale(1);\n\n            opacity: 0;\n        }\n    }\n\n</style>","import { render } from \"./Loader.vue?vue&type=template&id=7c4ddd1d\"\nconst script = {}\n\nimport \"./Loader.vue?vue&type=style&index=0&id=7c4ddd1d&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n    <!-- Tx fee modal -->\n    <section class=\"modal\">\n        <div class=\"modal_content\">\n            <!-- Tx fee modal data -->\n            <div class=\"data\">\n                <!-- Back button -->\n                <button class=\"close_btn\" @click.prevent=\"emitter.emit('close_tx_fee_modal')\">\n                    <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_close\"></use></svg>\n                </button>\n\n                <!-- Modal title -->\n                <div class=\"modal_title\">\n                    {{ $t('message.tx_fee_modal_title') }}\n                </div>\n\n\n                <!-- Fee tier -->\n                <div class=\"fee_tier\">\n                    <div class=\"label\">\n                        <!-- Fee tier label -->\n                        <span>{{ $t('message.tx_fee_fee_tier_label') }}</span>\n\n                        <!-- Fee tier toggle button -->\n                        <button class=\"toggle_btn\" :class=\"{ enabled: store.TxFee.isRemember }\" @click.prevent=\"store.TxFee.isRemember = !store.TxFee.isRemember\">\n                            <span>{{ $t('message.tx_fee_remember_label') }}</span>\n\n                            <div class=\"toggle_wrap\">\n                                <div class=\"toggle\">\n                                    <div class=\"ball_wrap\">\n                                        <div class=\"ball\"><svg><use xlink:href=\"@/assets/sprite.svg#ic_check\"></use></svg></div>\n                                    </div>\n                                </div>\n                            </div>\n                        </button>\n                    </div>\n\n                    <!-- Fee tier values -->\n                    <div class=\"vals_wrap\">\n                        <div class=\"vals\">\n                            <!-- Fee tier values button -->\n                            <button class=\"btn\" ref=\"level_low\" :class=\"{ active: store.TxFee.currentLevel === 'low' }\" @click.prevent=\"store.TxFee.currentLevel = 'low'\">\n                                <!-- Fee tier values name -->\n                                <div class=\"name\">\n                                    {{ $t('message.tx_fee_low_label') }}\n                                </div>\n\n                                <!-- Fee tier values cost -->\n                                <div class=\"cost\">\n                                    ~ {{ formatTokenCost(calcTokenCost(store.networks[store.currentNetwork].token_name, store.TxFee.userGasAmount * store.TxFee.lowPrice, store.networks[store.currentNetwork].exponent, 'USD'), 'USD') }}$\n                                </div>\n\n                                <!-- Fee tier values amount -->\n                                <div class=\"amount\">\n                                    {{ formatTokenAmount(store.TxFee.userGasAmount * store.TxFee.lowPrice, store.networks[store.currentNetwork].exponent).toLocaleString('ru-RU', { maximumFractionDigits: 5 }).replace(',', '.') }}\n                                </div>\n\n                                <!-- Fee tier values denom -->\n                                <div class=\"denom\">\n                                    {{ store.networks[store.currentNetwork].token_name }}\n                                </div>\n                            </button>\n\n                            <!-- Fee tier values button -->\n                            <button class=\"btn\" ref=\"level_average\" :class=\"{ active: store.TxFee.currentLevel === 'average' }\" @click.prevent=\"store.TxFee.currentLevel = 'average'\">\n                                <!-- Fee tier values name -->\n                                <div class=\"name\">\n                                    {{ $t('message.tx_fee_average_label') }}\n                                </div>\n\n                                <!-- Fee tier values cost -->\n                                <div class=\"cost\">\n                                    ~ {{ formatTokenCost(calcTokenCost(store.networks[store.currentNetwork].token_name, store.TxFee.userGasAmount * store.TxFee.averagePrice, store.networks[store.currentNetwork].exponent, 'USD'), 'USD') }}$\n                                </div>\n\n                                <!-- Fee tier values amount -->\n                                <div class=\"amount\">\n                                    {{ formatTokenAmount(store.TxFee.userGasAmount * store.TxFee.averagePrice, store.networks[store.currentNetwork].exponent).toLocaleString('ru-RU', { maximumFractionDigits: 5 }).replace(',', '.') }}\n                                </div>\n\n                                <!-- Fee tier values denom -->\n                                <div class=\"denom\">\n                                    {{ store.networks[store.currentNetwork].token_name }}\n                                </div>\n                            </button>\n\n                            <!-- Fee tier values button -->\n                            <button class=\"btn\" ref=\"level_high\" :class=\"{ active: store.TxFee.currentLevel === 'high' }\" @click.prevent=\"store.TxFee.currentLevel = 'high'\">\n                                <!-- Fee tier values name -->\n                                <div class=\"name\">\n                                    {{ $t('message.tx_fee_high_label') }}\n                                </div>\n\n                                <!-- Fee tier values cost -->\n                                <div class=\"cost\">\n                                    ~ {{ formatTokenCost(calcTokenCost(store.networks[store.currentNetwork].token_name, store.TxFee.userGasAmount * store.TxFee.highPrice, store.networks[store.currentNetwork].exponent, 'USD'), 'USD') }}$\n                                </div>\n\n                                <!-- Fee tier values amount -->\n                                <div class=\"amount\">\n                                    {{ formatTokenAmount(store.TxFee.userGasAmount * store.TxFee.highPrice, store.networks[store.currentNetwork].exponent).toLocaleString('ru-RU', { maximumFractionDigits: 5 }).replace(',', '.') }}\n                                </div>\n\n                                <!-- Fee tier values denom -->\n                                <div class=\"denom\">\n                                    {{ store.networks[store.currentNetwork].token_name }}\n                                </div>\n                            </button>\n\n                            <!-- Roller -->\n                            <div class=\"roller\" :style=\"`width: ${rollerWidth}px; left: ${rollerOffsetLeft}px;`\">\n                                <span></span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n\n                <!-- Fee token -->\n                <div class=\"fee_token\">\n                    <!-- Fee token label -->\n                    <div class=\"label\">\n                        {{ $t('message.tx_fee_fee_token_label') }}\n                    </div>\n\n                    <div class=\"field\">\n                        <!-- Fee token field -->\n                        <input type=\"text\" class=\"input big\" :value=\"store.networks[store.currentNetwork].token_name\" readonly>\n\n                        <!-- <svg class=\"arr\"><use xlink:href=\"@/assets/sprite.svg#ic_arr_ver2\"></use></svg> -->\n                    </div>\n                </div>\n\n\n                <!-- Gas adjustment -->\n                <div class=\"gas_adjustment\">\n                    <div class=\"label\">\n                        <!-- Gas adjustment label -->\n                        <span v-if=\"store.TxFee.isGasAdjustmentAuto\">{{ $t('message.tx_fee_gas_adjustment_label') }}</span>\n                        <span v-else>{{ $t('message.tx_fee_gas_amount_label') }}</span>\n\n                        <!-- Gas adjustment toggle button -->\n                        <button class=\"toggle_btn\" :class=\"{ enabled: store.TxFee.isGasAdjustmentAuto }\" @click.prevent=\"store.TxFee.isGasAdjustmentAuto = !store.TxFee.isGasAdjustmentAuto\">\n                            <span>{{ $t('message.tx_fee_auto_label') }}</span>\n\n                            <div class=\"toggle_wrap\">\n                                <div class=\"toggle\">\n                                    <div class=\"ball_wrap\">\n                                        <div class=\"ball\"><svg><use xlink:href=\"@/assets/sprite.svg#ic_check\"></use></svg></div>\n                                    </div>\n                                </div>\n                            </div>\n                        </button>\n                    </div>\n\n                    <div class=\"field\" v-if=\"store.TxFee.isGasAdjustmentAuto\">\n                        <!-- Gas adjustment field -->\n                        <input type=\"number\" class=\"input big\" :value=\"store.networks[store.currentNetwork].gas_adjustment\" disabled>\n                    </div>\n\n                    <div class=\"field\" v-else>\n                        <!-- Gas adjustment field -->\n                        <input type=\"number\" inputmode=\"numeric\" class=\"input big\" v-model=\"store.TxFee.userGasAmount\" maxlength=\"10\"\n                            @input=\"validateUserGasAmount($event)\">\n                    </div>\n                </div>\n\n\n                <!-- Gas adjustment buttons -->\n                <div class=\"btns\">\n                    <!-- Close button -->\n                    <button class=\"btn\" @click.prevent=\"emitter.emit('close_tx_fee_modal')\">\n                        <span>{{ $t('message.btn_close') }}</span>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </section>\n</template>\n\n\n<script setup>\n    import { ref, inject, watch, computed, onMounted } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { calcTokenCost, formatTokenCost, formatTokenAmount } from '@/utils'\n\n\n    const store = useGlobalStore(),\n        emitter = inject('emitter'),\n        level_low = ref(null),\n        level_average = ref(null),\n        level_high = ref(null),\n        levels = {\n            low: level_low,\n            average: level_average,\n            high: level_high\n        },\n        rollerWidth = ref(null),\n        rollerOffsetLeft = ref(null)\n\n\n    onMounted(() => {\n        // Set roller params\n        rollerWidth.value = levels[store.TxFee.currentLevel].value.offsetWidth\n        rollerOffsetLeft.value = levels[store.TxFee.currentLevel].value.offsetLeft\n    })\n\n\n    watch(computed(() => store.TxFee.currentLevel), () => {\n        // Update roller params\n        rollerWidth.value = levels[store.TxFee.currentLevel].value.offsetWidth\n        rollerOffsetLeft.value = levels[store.TxFee.currentLevel].value.offsetLeft\n    })\n\n\n    watch(computed(() => store.TxFee.isGasAdjustmentAuto), () => {\n        // Default gas amount\n        store.TxFee.userGasAmount = store.TxFee.gasAmount\n    })\n\n\n    watch(computed(() => store.TxFee.userGasAmount), () => {\n        // Enough status\n        store.TxFeeIsEnough()\n    })\n\n\n    // Validate user gas amount\n    function validateUserGasAmount(e) {\n        // Empty or zero\n        if (e.target.value <= 0) {\n            // Set simulated gas amount\n            store.TxFee.userGasAmount = store.TxFee.gasAmount\n        }\n    }\n</script>\n\n\n<style scoped>\n    .modal_title\n    {\n        margin-bottom: 18px;\n    }\n\n\n\n    .label\n    {\n        font-size: 14px;\n\n        margin-bottom: 2px;\n        padding: 0 10px;\n    }\n\n\n\n    .fee_tier .label\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: space-between;\n    }\n\n\n    .fee_tier .vals_wrap\n    {\n        margin-top: 4px;\n        padding: 1px;\n\n        border-radius: 10px;\n        background: linear-gradient(to bottom,  #5d33ce 0%,#200750 100%);\n    }\n\n\n    .fee_tier .vals\n    {\n        position: relative;\n\n        display: flex;\n        align-content: stretch;\n        align-items: stretch;\n        flex-wrap: nowrap;\n        justify-content: flex-start;\n\n        padding: 6px;\n\n        border-radius: 9px;\n        background: #170232;\n    }\n\n\n    .fee_tier .vals .btn\n    {\n        position: relative;\n        z-index: 2;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 100%;\n        padding: 6px 8px;\n\n        text-align: center;\n\n        border-radius: 4px;\n    }\n\n\n    .fee_tier .vals .name\n    {\n        font-size: 16px;\n        font-weight: 500;\n\n        width: 100%;\n        padding: 2px 0;\n    }\n\n\n    .fee_tier .vals .cost\n    {\n        font-size: 12px;\n\n        width: 100%;\n        margin-top: 2px;\n\n        opacity: .6;\n    }\n\n\n    .fee_tier .vals .amount,\n    .fee_tier .vals .denom\n    {\n        font-weight: 500;\n\n        margin-top: 2px;\n        padding: 2px 0;\n\n        white-space: nowrap;\n    }\n\n\n    .fee_tier .vals .denom\n    {\n        margin-left: 4px;\n    }\n\n\n    .fee_tier .roller\n    {\n        position: absolute;\n        z-index: 1;\n        top: 0;\n        bottom: 0;\n        left: 6px;\n\n        height: calc(100% - 12px);\n        margin: auto 0;\n        padding: 1px;\n\n        transition: .2s linear;\n\n        border-radius: 4px;\n        background: linear-gradient(to bottom,  #7544ff 0%,#1a0242 100%);\n    }\n\n\n    .fee_tier .roller span\n    {\n        display: block;\n\n        width: 100%;\n        height: 100%;\n\n        border-radius: 3px;\n        background: radial-gradient(130.57% 114.69% at 50% 0%, rgba(148, 56, 248, .70) 0%, rgba(89, 21, 167, .70) 50.94%, rgba(53, 12, 107, .70) 85.09%);\n    }\n\n\n\n    .fee_token\n    {\n        margin-top: 10px;\n    }\n\n\n\n    .gas_adjustment\n    {\n        margin-top: 10px;\n    }\n\n\n    .gas_adjustment .label\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: space-between;\n    }\n\n\n\n    .field .arr\n    {\n        position: absolute;\n        z-index: 3;\n        top: 0;\n        right: 16px;\n        bottom: 0;\n\n        display: block;\n\n        width: 28px;\n        height: 28px;\n        margin: auto 0;\n    }\n\n\n\n    .field\n    {\n        position: relative;\n\n        padding: 1px;\n\n        border-radius: 10px;\n        background: linear-gradient(to bottom,  #5d33ce 0%,#200750 100%);\n    }\n\n\n    .input\n    {\n        border-radius: 9px;\n        background: #06000e;\n    }\n\n\n\n    .toggle_wrap\n    {\n        margin-left: 10px;\n        padding: 1px;\n\n        border-radius: 19px;\n        background: linear-gradient(to bottom,  #45097d 0%,#14012f 100%);\n    }\n\n\n    .toggle\n    {\n        position: relative;\n\n        width: 46px;\n        height: 22px;\n\n        border-radius: 19px;\n        background: #170232;\n    }\n\n\n    .ball_wrap\n    {\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        left: 2px;\n\n        width: 18px;\n        height: 18px;\n        margin: auto 0;\n        padding: 1px;\n\n        transition: left .2s linear;\n\n        border-radius: 50%;\n        background: linear-gradient(to bottom,  #8632e3 0%,#330c67 100%);\n    }\n\n\n    .ball\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 16px;\n        height: 16px;\n\n        color: #fff;\n        border-radius: 50%;\n        background: radial-gradient(130.57% 114.69% at 50% 0%, rgba(148, 56, 248, .70) 0%, rgba(89, 21, 167, .70) 50.94%, rgba(53, 12, 107, .70) 85.09%);\n    }\n\n\n    .ball svg\n    {\n        display: block;\n\n        width: 10px;\n        height: 10px;\n\n        transition: opacity .2s linear;\n\n        opacity: 0;\n    }\n\n\n\n    .toggle_btn\n    {\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: flex-start;\n\n        transition: color .2s linear;\n\n        color: rgba(255,255,255,.6);\n    }\n\n\n    .toggle_btn.enabled\n    {\n        color: #fff;\n    }\n\n    .toggle_btn.enabled .ball_wrap\n    {\n        left: 26px;\n\n        background: linear-gradient(to bottom,  #68def9 0%,#02294c 100%);\n    }\n\n\n    .toggle_btn.enabled .ball\n    {\n        background: linear-gradient(to bottom,  #56a8e7 0%,#064894 100%);\n    }\n\n\n    .toggle_btn.enabled .ball svg\n    {\n        opacity: 1;\n    }\n</style>","import script from \"./TxFeeModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TxFeeModal.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TxFeeModal.vue?vue&type=style&index=0&id=559233e6&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-559233e6\"]])\n\nexport default __exports__","<template>\n    <!-- Tx fee -->\n    <div class=\"tx_fee\">\n        <div class=\"btn\" :class=\"{ red: !store.TxFee.isEnough }\" @click.prevent=\"openTxFeeModal()\">\n            <!-- Tx fee label -->\n            {{ $t('message.tx_fee_label') }}\n\n            <!-- Tx fee value -->\n            {{ cost.toLocaleString('ru-RU', { maximumFractionDigits: 5 }).replace(',', '.') }}\n\n            <!-- Tx fee denom -->\n            {{ store.networks[store.currentNetwork].token_name }}\n\n            <!-- Tx fee cost -->\n            <div class=\"cost\">\n                (~ {{ formatTokenCost(calcTokenCost(store.networks[store.currentNetwork].token_name, store.TxFee.userGasAmount * store.TxFee[`${store.TxFee.currentLevel}Price`], store.networks[store.currentNetwork].exponent, 'USD'), 'USD') }}$)\n            </div>\n        </div>\n    </div>\n\n\n    <!-- Tx fee modal -->\n    <transition name=\"modal\">\n    <TxFeeModal v-if=\"showTxFeeModal\" />\n    </transition>\n\n    <!-- Overlay -->\n    <transition name=\"fade\">\n    <div class=\"modal_overlay\" @click.prevent=\"emitter.emit('close_any_modal')\" v-if=\"showTxFeeModal\"></div>\n    </transition>\n</template>\n\n\n<script setup>\n    import { inject, ref, onBeforeMount, computed, onUnmounted } from 'vue'\n    import { useGlobalStore } from '@/store'\n    import { formatTokenAmount, simulateTx, calcTokenCost, formatTokenCost } from '@/utils'\n\n    // Components\n    import TxFeeModal from '@/components/modal/TxFeeModal.vue'\n\n\n    const props = defineProps(['msgAny', 'txType']),\n        store = useGlobalStore(),\n        emitter = inject('emitter'),\n        showTxFeeModal = ref(false),\n        cost = computed(() => formatTokenAmount(store.TxFee.userGasAmount * store.TxFee[`${store.TxFee.currentLevel}Price`], store.networks[store.currentNetwork].exponent))\n\n\n    onBeforeMount(async () => {\n        // Reset data\n        await store.resetTxFee()\n\n        // Set current balance\n        store.TxFeeGetCurrentBalance(store.networks[store.currentNetwork].denom)\n\n        // Set gas prices\n        store.TxFeeSetGasPrices()\n\n        // Simulate Tx\n        if (store.TxFee.balance.amount) {\n            await simulateTx(props.msgAny)\n        } else {\n            // Set default gas amount\n            if (props.txType === 'send') {\n                store.TxFee.gasAmount = store.TxFee.userGasAmount = store.networks[store.currentNetwork].gas_amount_send\n            }\n\n            if (props.txType === 'claim') {\n                store.TxFee.gasAmount = store.TxFee.userGasAmount = store.networks[store.currentNetwork].gas_amount_claim\n            }\n\n            if (props.txType === 'stake') {\n                store.TxFee.gasAmount = store.TxFee.userGasAmount = store.networks[store.currentNetwork].gas_amount_stake\n            }\n\n            if (props.txType === 'unstake') {\n                store.TxFee.gasAmount = store.TxFee.userGasAmount = store.networks[store.currentNetwork].gas_amount_unstake\n            }\n\n            if (props.txType === 'redelegate') {\n                store.TxFee.gasAmount = store.TxFee.userGasAmount = store.networks[store.currentNetwork].gas_amount_redelegate\n            }\n        }\n\n        // Enough status\n        store.TxFeeIsEnough()\n    })\n\n\n    onUnmounted(() => {\n        // Reset data\n        store.TxFee.isEnough = false\n\n        // Unlisten events\n        emitter.off('close_any_modal')\n        emitter.off('close_tx_fee_modal')\n    })\n\n\n    // Open TxFee modal\n    function openTxFeeModal() {\n        // Show TxFee modal\n        showTxFeeModal.value = true\n\n        // Update status\n        store.isAnyModalOpen = true\n    }\n\n\n    // Event \"close_tx_fee_modal\"\n    emitter.on('close_tx_fee_modal', () => {\n        // Hide TxFee modal\n        showTxFeeModal.value = false\n\n        // Update status\n        store.isAnyModalOpen = false\n    })\n\n\n    // Event \"close_any_modal\"\n    emitter.on('close_any_modal', () => {\n        // Hide TxFee modal\n        showTxFeeModal.value = false\n\n        // Update status\n        store.isAnyModalOpen = false\n    })\n</script>\n\n\n<style scoped>\n    .tx_fee\n    {\n        margin-top: auto;\n        padding: 12px;\n\n        text-align: center;\n    }\n\n\n    .tx_fee .btn\n    {\n        font-size: 18px;\n        font-weight: 500;\n\n        display: flex;\n        align-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        justify-content: center;\n\n        width: 100%;\n\n        white-space: nowrap;\n        text-decoration: underline;\n\n        text-decoration-thickness: 1px;\n    }\n\n\n    .tx_fee .btn.red\n    {\n        color: #f33;\n    }\n\n\n    .tx_fee .cost\n    {\n        margin-left: 6px;\n\n        opacity: .6;\n        color: #fff;\n    }\n</style>","import script from \"./TxFee.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TxFee.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TxFee.vue?vue&type=style&index=0&id=22ea645c&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-22ea645c\"]])\n\nexport default __exports__","<template>\n    <!-- Sign Tx modal -->\n    <section class=\"modal\">\n        <div class=\"modal_content\">\n            <div class=\"data\">\n                <!-- Close button -->\n                <button class=\"close_btn\" @click.prevent=\"emitter.emit('close_sign_tx_modal')\">\n                    <svg class=\"icon\"><use xlink:href=\"@/assets/sprite.svg#ic_close\"></use></svg>\n                </button>\n\n                <template v-if=\"!showErrorSignTxModal\">\n                <!-- Modal title -->\n                <div class=\"modal_title\">\n                    {{ $t('message.sign_tx_title') }}\n                </div>\n\n                <!-- Auth -->\n                <div class=\"auth_wrap\">\n                    <Auth />\n                </div>\n                </template>\n\n\n                <template v-else>\n                <!-- Modal title -->\n                <div class=\"modal_title\">\n                    {{ $t('message.sign_tx_error_title') }}\n                </div>\n\n                <!-- Modal desc -->\n                <div class=\"modal_desc\">\n                    {{ $t('message.sign_tx_error_desc') }}\n                </div>\n\n                <!-- Sign Tx error modal buttons -->\n                <div class=\"btns\">\n                    <!-- Understood button -->\n                    <button class=\"btn\" @click.prevent=\"emitter.emit('close_sign_tx_modal')\">\n                        <span>{{ $t('message.btn_understood') }}</span>\n                    </button>\n                </div>\n                </template>\n            </div>\n        </div>\n    </section>\n</template>\n\n\n<script setup>\n    import { ref, inject } from 'vue'\n\n    // Components\n    import Auth from '@/components/Auth.vue'\n\n\n    const emitter = inject('emitter'),\n        showErrorSignTxModal = ref(false)\n\n\n    // Event \"show_error_sign_tx_modal\"\n    emitter.on('show_error_sign_tx_modal', () => {\n        showErrorSignTxModal.value = true\n    })\n</script>\n\n\n<style scoped>\n    .auth_wrap\n    {\n        display: flex;\n        flex: 1 0 auto;\n        flex-direction: column;\n\n        margin-top: 28px;\n    }\n</style>","import script from \"./SignTxModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SignTxModal.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./SignTxModal.vue?vue&type=style&index=0&id=aeebf056&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-aeebf056\"]])\n\nexport default __exports__"],"names":["store","useGlobalStore","emitter","inject","pinCode","ref","pinDB","hmacKey","wrongPin","userAuthErrorLimit","authErrorLimit","isBiometric","isBiometricAvailable","biometricType","moveFocus","event","nextIndex","target","value","length","closest","querySelector","focus","moveBack","currentIndex","setTimeout","select","checkBiometricAccess","Telegram","WebApp","isAccessGranted","biometricAuthenticate","BiometricManager","requestAccess","reason","authenticate","res","emit","async","login","compareResult","comparePINCode","setAuthError","pinHash","hashDataWithKey","join","newLimit","isAuthorized","updateUserAuthErrorLimit","onBeforeMount","result","getMultipleData","pin","watch","document","activeElement","blur","isFormValid","computed","__exports__","class","_createElementVNode","_hoisted_2","_createElementBlock","_hoisted_1","_hoisted_3","script","render","level_low","level_average","level_high","levels","low","average","high","rollerWidth","rollerOffsetLeft","validateUserGasAmount","e","TxFee","userGasAmount","gasAmount","onMounted","currentLevel","offsetWidth","offsetLeft","isGasAdjustmentAuto","TxFeeIsEnough","props","__props","showTxFeeModal","cost","formatTokenAmount","networks","currentNetwork","exponent","openTxFeeModal","isAnyModalOpen","resetTxFee","TxFeeGetCurrentBalance","denom","TxFeeSetGasPrices","balance","amount","simulateTx","msgAny","txType","gas_amount_send","gas_amount_claim","gas_amount_stake","gas_amount_unstake","gas_amount_redelegate","onUnmounted","isEnough","off","on","showErrorSignTxModal"],"sourceRoot":""}